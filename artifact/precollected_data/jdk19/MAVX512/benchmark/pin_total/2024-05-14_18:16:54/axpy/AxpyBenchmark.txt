# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.820 s/op
# Warmup Iteration   2: 0.594 s/op
# Warmup Iteration   3: 0.155 s/op
# Warmup Iteration   4: 0.161 s/op
# Warmup Iteration   5: 0.191 s/op
# Warmup Iteration   6: 0.128 s/op
# Warmup Iteration   7: 0.125 s/op
# Warmup Iteration   8: 0.150 s/op
# Warmup Iteration   9: 0.145 s/op
# Warmup Iteration  10: 0.154 s/op
Iteration   1: 0.155 s/op
                 ·gc.alloc.rate:      0.008 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.164 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.154 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.145 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.185 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.163 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.169 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.152 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.179 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.155 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3154.656 bytes/s; standard: 18.449 s, 58449 bytes, 833 methods; osr:  0.340 s, 824 bytes, 3 methods; nmethods_size: 1237488 bytes; nmethods_code_size: 880416 bytes}
  C2 {speed: 193.964 bytes/s; standard: 21.912 s, 4510 bytes, 51 methods; osr:  2.325 s, 191 bytes, 4 methods; nmethods_size: 43056 bytes; nmethods_code_size: 28992 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2683.185 bytes/s; standard:  0.253 s, 679 bytes, 140 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33632 bytes; nmethods_code_size: 21312 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3161.092 bytes/s; standard: 18.196 s, 57770 bytes, 693 methods; osr:  0.340 s, 824 bytes, 3 methods; nmethods_size: 1203856 bytes; nmethods_code_size: 859104 bytes}
  Tier4 {speed: 193.964 bytes/s; standard: 21.912 s, 4510 bytes, 51 methods; osr:  2.325 s, 191 bytes, 4 methods; nmethods_size: 43056 bytes; nmethods_code_size: 28992 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  43.026 s
    Standard compilation   :  40.361 s, Average : 0.046 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.665 s, Average : 0.381 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       18.726 s
       Setup time:            0.094 s
       Build HIR:             9.980 s
         Parse:                 8.119 s
         Optimize blocks:       0.009 s
         GVN:                   0.737 s
         Null checks elim:      0.367 s
         Range checks elim:     0.282 s
         Other:                 0.466 s
       Emit LIR:              5.500 s
         LIR Gen:               2.290 s
         Linear Scan:           3.113 s
         Other:                 0.097 s
       Code Emission:         1.814 s
       Code Installation:     0.849 s
       Other:                 0.489 s

    C2 Compile Time:       27.401 s
       Parse:                 5.724 s
       Optimize:              9.795 s
         Escape Analysis:       0.469 s
           Conn Graph:            0.427 s
           Macro Eliminate:       0.005 s
         GVN 1:                 1.106 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.005 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.561 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.208 s
         GVN 2:                 0.044 s
         Macro Expand:          0.921 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.260 s
         Other:                 1.219 s
       Matcher:                    2.828 s
         Post Selection Cleanup:   0.156 s
       Scheduler:                  2.195 s
       Regalloc:              3.756 s
         Ctor Chaitin:          0.007 s
         Build IFG (virt):      0.093 s
         Build IFG (phys):      0.542 s
         Compute Liveness:      1.249 s
         Regalloc Split:        0.671 s
         Postalloc Copy Rem:    0.558 s
         Merge multidefs:       0.082 s
         Fixup Spills:          0.080 s
         Compact:               0.009 s
         Coalesce 1:            0.274 s
         Coalesce 2:            0.098 s
         Coalesce 3:            0.018 s
         Cache LRG:             0.013 s
         Simplify:              0.064 s
         Select:                0.104 s
       Block Ordering:        0.205 s
       Peephole:              0.052 s
       Code Emission:           1.956 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.796 s
         Build OOP maps:        0.300 s
         Fill buffer:           0.601 s
         Code Installation:     0.066 s
         Other:                 0.193 s
       Other:                 0.824 s

  Total compiled methods    :      891 methods
    Standard compilation    :      884 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    63974 bytes
    Standard compilation    :    62959 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :     1486 bytes/s

  nmethod code size         :  1280544 bytes
  nmethod total size        :   909408 bytes


Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.162 ±(99.9%) 0.019 s/op

  Histogram, s/op:
    [0.140, 0.143) = 0 
    [0.143, 0.145) = 1 
    [0.145, 0.148) = 0 
    [0.148, 0.150) = 0 
    [0.150, 0.153) = 1 
    [0.153, 0.155) = 3 
    [0.155, 0.158) = 0 
    [0.158, 0.160) = 0 
    [0.160, 0.163) = 0 
    [0.163, 0.165) = 2 
    [0.165, 0.168) = 0 
    [0.168, 0.170) = 1 
    [0.170, 0.173) = 0 
    [0.173, 0.175) = 0 
    [0.175, 0.178) = 0 
    [0.178, 0.180) = 1 
    [0.180, 0.183) = 0 
    [0.183, 0.185) = 1 
    [0.185, 0.188) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.145 s/op
     p(50.0000) =      0.159 s/op
     p(90.0000) =      0.184 s/op
     p(95.0000) =      0.185 s/op
     p(99.0000) =      0.185 s/op
     p(99.9000) =      0.185 s/op
     p(99.9900) =      0.185 s/op
     p(99.9990) =      0.185 s/op
     p(99.9999) =      0.185 s/op
    p(100.0000) =      0.185 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:03:29
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.689 s/op
# Warmup Iteration   2: 1.357 s/op
# Warmup Iteration   3: 0.134 s/op
# Warmup Iteration   4: 0.117 s/op
# Warmup Iteration   5: 0.137 s/op
# Warmup Iteration   6: 0.140 s/op
# Warmup Iteration   7: 0.155 s/op
# Warmup Iteration   8: 0.138 s/op
# Warmup Iteration   9: 0.143 s/op
# Warmup Iteration  10: 0.117 s/op
Iteration   1: 0.117 s/op
                 ·gc.alloc.rate:      0.009 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.137 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.137 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.129 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.142 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.120 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.140 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.137 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.141 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.128 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3309.569 bytes/s; standard: 20.786 s, 69297 bytes, 987 methods; osr:  0.437 s, 941 bytes, 3 methods; nmethods_size: 1565888 bytes; nmethods_code_size: 1121120 bytes}
  C2 {speed: 233.919 bytes/s; standard: 33.885 s, 7484 bytes, 91 methods; osr:  4.167 s, 1417 bytes, 8 methods; nmethods_size: 86216 bytes; nmethods_code_size: 56224 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2737.280 bytes/s; standard:  0.252 s, 689 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34032 bytes; nmethods_code_size: 21536 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3316.438 bytes/s; standard: 20.534 s, 68608 bytes, 845 methods; osr:  0.437 s, 941 bytes, 3 methods; nmethods_size: 1531856 bytes; nmethods_code_size: 1099584 bytes}
  Tier4 {speed: 233.919 bytes/s; standard: 33.885 s, 7484 bytes, 91 methods; osr:  4.167 s, 1417 bytes, 8 methods; nmethods_size: 86216 bytes; nmethods_code_size: 56224 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  59.274 s
    Standard compilation   :  54.670 s, Average : 0.051 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.604 s, Average : 0.419 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.156 s
       Setup time:            0.099 s
       Build HIR:            11.801 s
         Parse:                 9.890 s
         Optimize blocks:       0.012 s
         GVN:                   0.643 s
         Null checks elim:      0.437 s
         Range checks elim:     0.309 s
         Other:                 0.510 s
       Emit LIR:              5.863 s
         LIR Gen:               2.338 s
         Linear Scan:           3.398 s
         Other:                 0.127 s
       Code Emission:         2.053 s
       Code Installation:     0.905 s
       Other:                 0.435 s

    C2 Compile Time:       41.335 s
       Parse:                 8.399 s
       Optimize:             15.186 s
         Escape Analysis:       0.695 s
           Conn Graph:            0.570 s
           Macro Eliminate:       0.074 s
         GVN 1:                 1.370 s
         Incremental Inline:    0.224 s
           IdealLoop:             0.000 s
          (IGVN:                  0.043 s)
          (Inline:                0.152 s)
          (Prune Useless:         0.023 s)
           Other:                 0.224 s
         Vector:                0.366 s
           Box elimination:     0.365 s
             IGVN:              0.063 s
             Prune Useless:     0.045 s
         Renumber Live:         0.019 s
         IdealLoop:             8.915 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.254 s
         GVN 2:                 0.061 s
         Macro Expand:          1.194 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.372 s
         Other:                 1.716 s
       Matcher:                    3.567 s
         Post Selection Cleanup:   0.255 s
       Scheduler:                  3.032 s
       Regalloc:              7.036 s
         Ctor Chaitin:          0.016 s
         Build IFG (virt):      0.171 s
         Build IFG (phys):      0.931 s
         Compute Liveness:      2.316 s
         Regalloc Split:        0.985 s
         Postalloc Copy Rem:    1.657 s
         Merge multidefs:       0.161 s
         Fixup Spills:          0.129 s
         Compact:               0.023 s
         Coalesce 1:            0.383 s
         Coalesce 2:            0.104 s
         Coalesce 3:            0.064 s
         Cache LRG:             0.016 s
         Simplify:              0.107 s
         Select:                0.206 s
       Block Ordering:        0.266 s
       Peephole:              0.050 s
       Code Emission:           2.768 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.994 s
         Build OOP maps:        0.612 s
         Fill buffer:           0.923 s
         Code Installation:     0.083 s
         Other:                 0.156 s
       Other:                 0.946 s

  Total compiled methods    :     1089 methods
    Standard compilation    :     1078 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    79139 bytes
    Standard compilation    :    76781 bytes
    On stack replacement    :     2358 bytes
  Average compilation speed :     1335 bytes/s

  nmethod code size         :  1652104 bytes
  nmethod total size        :  1177344 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.133 ±(99.9%) 0.013 s/op

  Histogram, s/op:
    [0.110, 0.113) = 0 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 1 
    [0.118, 0.120) = 1 
    [0.120, 0.123) = 0 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 0 
    [0.128, 0.130) = 2 
    [0.130, 0.133) = 0 
    [0.133, 0.135) = 0 
    [0.135, 0.138) = 3 
    [0.138, 0.140) = 1 
    [0.140, 0.143) = 2 
    [0.143, 0.145) = 0 
    [0.145, 0.148) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.117 s/op
     p(50.0000) =      0.137 s/op
     p(90.0000) =      0.142 s/op
     p(95.0000) =      0.142 s/op
     p(99.0000) =      0.142 s/op
     p(99.9000) =      0.142 s/op
     p(99.9900) =      0.142 s/op
     p(99.9990) =      0.142 s/op
     p(99.9999) =      0.142 s/op
    p(100.0000) =      0.142 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.009), stdev = 0.002
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate.norm":
  1739.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1048.000, 1739.200, 7960.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5043.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:02:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.688 s/op
# Warmup Iteration   2: 1.449 s/op
# Warmup Iteration   3: 0.142 s/op
# Warmup Iteration   4: 0.120 s/op
# Warmup Iteration   5: 0.148 s/op
# Warmup Iteration   6: 0.139 s/op
# Warmup Iteration   7: 0.144 s/op
# Warmup Iteration   8: 0.135 s/op
# Warmup Iteration   9: 0.142 s/op
# Warmup Iteration  10: 0.133 s/op
Iteration   1: 0.134 s/op
                 ·gc.alloc.rate:      0.008 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.142 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.138 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.128 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.142 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.142 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.150 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.144 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.152 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.144 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3410.080 bytes/s; standard: 20.209 s, 69197 bytes, 991 methods; osr:  0.176 s, 319 bytes, 2 methods; nmethods_size: 1552384 bytes; nmethods_code_size: 1110720 bytes}
  C2 {speed: 225.372 bytes/s; standard: 32.392 s, 7197 bytes, 85 methods; osr:  5.829 s, 1417 bytes, 8 methods; nmethods_size: 81592 bytes; nmethods_code_size: 53312 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2446.517 bytes/s; standard:  0.288 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3423.876 bytes/s; standard: 19.921 s, 68493 bytes, 846 methods; osr:  0.176 s, 319 bytes, 2 methods; nmethods_size: 1517576 bytes; nmethods_code_size: 1088672 bytes}
  Tier4 {speed: 225.372 bytes/s; standard: 32.392 s, 7197 bytes, 85 methods; osr:  5.829 s, 1417 bytes, 8 methods; nmethods_size: 81592 bytes; nmethods_code_size: 53312 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  58.814 s
    Standard compilation   :  52.602 s, Average : 0.049 s
    Bailed out compilation :   0.207 s, Average : 0.207 s
    On stack replacement   :   6.005 s, Average : 0.601 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.516 s
       Setup time:            0.101 s
       Build HIR:            11.408 s
         Parse:                 9.685 s
         Optimize blocks:       0.016 s
         GVN:                   0.602 s
         Null checks elim:      0.367 s
         Range checks elim:     0.250 s
         Other:                 0.488 s
       Emit LIR:              5.647 s
         LIR Gen:               2.178 s
         Linear Scan:           3.398 s
         Other:                 0.070 s
       Code Emission:         1.912 s
       Code Installation:     1.067 s
       Other:                 0.381 s

    C2 Compile Time:       41.466 s
       Parse:                 7.970 s
       Optimize:             15.650 s
         Escape Analysis:       0.671 s
           Conn Graph:            0.516 s
           Macro Eliminate:       0.044 s
         GVN 1:                 1.436 s
         Incremental Inline:    0.201 s
           IdealLoop:             0.000 s
          (IGVN:                  0.050 s)
          (Inline:                0.120 s)
          (Prune Useless:         0.024 s)
           Other:                 0.201 s
         Vector:                0.379 s
           Box elimination:     0.378 s
             IGVN:              0.078 s
             Prune Useless:     0.051 s
         Renumber Live:         0.019 s
         IdealLoop:             9.527 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.247 s
         GVN 2:                 0.053 s
         Macro Expand:          1.102 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.345 s
         Other:                 1.667 s
       Matcher:                    3.859 s
         Post Selection Cleanup:   0.272 s
       Scheduler:                  3.037 s
       Regalloc:              6.999 s
         Ctor Chaitin:          0.009 s
         Build IFG (virt):      0.135 s
         Build IFG (phys):      0.999 s
         Compute Liveness:      2.328 s
         Regalloc Split:        0.955 s
         Postalloc Copy Rem:    1.663 s
         Merge multidefs:       0.128 s
         Fixup Spills:          0.138 s
         Compact:               0.015 s
         Coalesce 1:            0.357 s
         Coalesce 2:            0.136 s
         Coalesce 3:            0.038 s
         Cache LRG:             0.013 s
         Simplify:              0.111 s
         Select:                0.184 s
       Block Ordering:        0.263 s
       Peephole:              0.069 s
       Code Emission:           2.615 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.968 s
         Build OOP maps:        0.597 s
         Fill buffer:           0.813 s
         Code Installation:     0.096 s
         Other:                 0.141 s
       Other:                 0.909 s

  Total compiled methods    :     1086 methods
    Standard compilation    :     1076 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    78130 bytes
    Standard compilation    :    76394 bytes
    On stack replacement    :     1736 bytes
  Average compilation speed :     1328 bytes/s

  nmethod code size         :  1633976 bytes
  nmethod total size        :  1164032 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.142 ±(99.9%) 0.011 s/op

  Histogram, s/op:
    [0.120, 0.123) = 0 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 0 
    [0.128, 0.130) = 1 
    [0.130, 0.133) = 0 
    [0.133, 0.135) = 1 
    [0.135, 0.138) = 0 
    [0.138, 0.140) = 1 
    [0.140, 0.143) = 3 
    [0.143, 0.145) = 2 
    [0.145, 0.148) = 0 
    [0.148, 0.150) = 0 
    [0.150, 0.153) = 2 
    [0.153, 0.155) = 0 
    [0.155, 0.158) = 0 
    [0.158, 0.160) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.128 s/op
     p(50.0000) =      0.142 s/op
     p(90.0000) =      0.152 s/op
     p(95.0000) =      0.152 s/op
     p(99.0000) =      0.152 s/op
     p(99.9000) =      0.152 s/op
     p(99.9900) =      0.152 s/op
     p(99.9990) =      0.152 s/op
     p(99.9999) =      0.152 s/op
    p(100.0000) =      0.152 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.698 s/op
# Warmup Iteration   2: 0.506 s/op
# Warmup Iteration   3: 0.214 s/op
# Warmup Iteration   4: 0.225 s/op
# Warmup Iteration   5: 0.257 s/op
# Warmup Iteration   6: 0.194 s/op
# Warmup Iteration   7: 0.205 s/op
# Warmup Iteration   8: 0.202 s/op
# Warmup Iteration   9: 0.244 s/op
# Warmup Iteration  10: 0.303 s/op
Iteration   1: 0.193 s/op
                 ·gc.alloc.rate:      0.008 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.245 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.208 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.203 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.236 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.223 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.222 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.201 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.230 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.205 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3127.794 bytes/s; standard: 18.806 s, 59287 bytes, 837 methods; osr:  0.412 s, 824 bytes, 3 methods; nmethods_size: 1230760 bytes; nmethods_code_size: 875872 bytes}
  C2 {speed: 187.076 bytes/s; standard: 18.835 s, 4134 bytes, 49 methods; osr:  4.770 s, 282 bytes, 5 methods; nmethods_size: 41384 bytes; nmethods_code_size: 28032 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2224.760 bytes/s; standard:  0.303 s, 674 bytes, 139 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33416 bytes; nmethods_code_size: 21184 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3142.257 bytes/s; standard: 18.503 s, 58613 bytes, 698 methods; osr:  0.412 s, 824 bytes, 3 methods; nmethods_size: 1197344 bytes; nmethods_code_size: 854688 bytes}
  Tier4 {speed: 187.076 bytes/s; standard: 18.835 s, 4134 bytes, 49 methods; osr:  4.770 s, 282 bytes, 5 methods; nmethods_size: 41384 bytes; nmethods_code_size: 28032 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  42.865 s
    Standard compilation   :  37.641 s, Average : 0.042 s
    Bailed out compilation :   0.041 s, Average : 0.041 s
    On stack replacement   :   5.182 s, Average : 0.648 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       19.184 s
       Setup time:            0.099 s
       Build HIR:            10.721 s
         Parse:                 8.788 s
         Optimize blocks:       0.010 s
         GVN:                   0.718 s
         Null checks elim:      0.414 s
         Range checks elim:     0.351 s
         Other:                 0.440 s
       Emit LIR:              5.284 s
         LIR Gen:               2.088 s
         Linear Scan:           3.104 s
         Other:                 0.092 s
       Code Emission:         1.781 s
       Code Installation:     0.776 s
       Other:                 0.523 s

    C2 Compile Time:       26.709 s
       Parse:                 5.559 s
       Optimize:              9.253 s
         Escape Analysis:       0.443 s
           Conn Graph:            0.407 s
           Macro Eliminate:       0.010 s
         GVN 1:                 1.333 s
         Incremental Inline:    0.011 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.011 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             4.925 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.197 s
         GVN 2:                 0.034 s
         Macro Expand:          0.885 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.260 s
         Other:                 1.165 s
       Matcher:                    2.901 s
         Post Selection Cleanup:   0.165 s
       Scheduler:                  2.267 s
       Regalloc:              3.629 s
         Ctor Chaitin:          0.018 s
         Build IFG (virt):      0.100 s
         Build IFG (phys):      0.518 s
         Compute Liveness:      1.190 s
         Regalloc Split:        0.670 s
         Postalloc Copy Rem:    0.602 s
         Merge multidefs:       0.091 s
         Fixup Spills:          0.083 s
         Compact:               0.010 s
         Coalesce 1:            0.274 s
         Coalesce 2:            0.084 s
         Coalesce 3:            0.025 s
         Cache LRG:             0.005 s
         Simplify:              0.057 s
         Select:                0.099 s
       Block Ordering:        0.190 s
       Peephole:              0.043 s
       Code Emission:           2.071 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.791 s
         Build OOP maps:        0.282 s
         Fill buffer:           0.728 s
         Code Installation:     0.074 s
         Other:                 0.195 s
       Other:                 0.723 s

  Total compiled methods    :      894 methods
    Standard compilation    :      886 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    64527 bytes
    Standard compilation    :    63421 bytes
    On stack replacement    :     1106 bytes
  Average compilation speed :     1505 bytes/s

  nmethod code size         :  1272144 bytes
  nmethod total size        :   903904 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.216 ±(99.9%) 0.026 s/op

  Histogram, s/op:
    [0.190, 0.195) = 1 
    [0.195, 0.200) = 0 
    [0.200, 0.205) = 3 
    [0.205, 0.210) = 1 
    [0.210, 0.215) = 0 
    [0.215, 0.220) = 0 
    [0.220, 0.225) = 2 
    [0.225, 0.230) = 1 
    [0.230, 0.235) = 0 
    [0.235, 0.240) = 1 
    [0.240, 0.245) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.193 s/op
     p(50.0000) =      0.215 s/op
     p(90.0000) =      0.245 s/op
     p(95.0000) =      0.245 s/op
     p(99.0000) =      0.245 s/op
     p(99.9000) =      0.245 s/op
     p(99.9900) =      0.245 s/op
     p(99.9990) =      0.245 s/op
     p(99.9999) =      0.245 s/op
    p(100.0000) =      0.245 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:04:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt     Score      Error   Units
AxpyBenchmark.autoVec                            ss   10     0.162 ±    0.019    s/op
AxpyBenchmark.autoVec:·gc.alloc.rate             ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
AxpyBenchmark.explicitVec                        ss   10     0.133 ±    0.013    s/op
AxpyBenchmark.explicitVec:·gc.alloc.rate         ss   10     0.002 ±    0.004  MB/sec
AxpyBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1739.200 ± 3304.567    B/op
AxpyBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
AxpyBenchmark.fullVec                            ss   10     0.142 ±    0.011    s/op
AxpyBenchmark.fullVec:·gc.alloc.rate             ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
AxpyBenchmark.serial                             ss   10     0.216 ±    0.026    s/op
AxpyBenchmark.serial:·gc.alloc.rate              ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.serial:·gc.alloc.rate.norm         ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_total/2024-05-14_18:16:54/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4688.908 bytes/s; standard: 22.181 s, 104204 bytes, 1244 methods; osr:  0.181 s, 649 bytes, 1 methods; nmethods_size: 2130144 bytes; nmethods_code_size: 1503264 bytes}
  C2 {speed: 501.580 bytes/s; standard: 30.027 s, 17114 bytes, 119 methods; osr:  4.406 s, 157 bytes, 3 methods; nmethods_size: 146328 bytes; nmethods_code_size: 92736 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2578.088 bytes/s; standard:  0.275 s, 710 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36136 bytes; nmethods_code_size: 22784 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4715.228 bytes/s; standard: 21.905 s, 103494 bytes, 1094 methods; osr:  0.181 s, 649 bytes, 1 methods; nmethods_size: 2094008 bytes; nmethods_code_size: 1480480 bytes}
  Tier4 {speed: 501.580 bytes/s; standard: 30.027 s, 17114 bytes, 119 methods; osr:  4.406 s, 157 bytes, 3 methods; nmethods_size: 146328 bytes; nmethods_code_size: 92736 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  56.844 s
    Standard compilation   :  52.257 s, Average : 0.038 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.587 s, Average : 1.147 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.300 s
       Setup time:            0.142 s
       Build HIR:            11.826 s
         Parse:                 9.443 s
         Optimize blocks:       0.011 s
         GVN:                   0.873 s
         Null checks elim:      0.462 s
         Range checks elim:     0.388 s
         Other:                 0.649 s
       Emit LIR:              6.900 s
         LIR Gen:               2.382 s
         Linear Scan:           4.429 s
         Other:                 0.089 s
       Code Emission:         1.982 s
       Code Installation:     0.969 s
       Other:                 0.481 s

    C2 Compile Time:       37.619 s
       Parse:                 8.449 s
       Optimize:             12.744 s
         Escape Analysis:       0.668 s
           Conn Graph:            0.630 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.754 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.030 s
         IdealLoop:             6.866 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.329 s
         GVN 2:                 0.068 s
         Macro Expand:          1.104 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.385 s
         Other:                 1.537 s
       Matcher:                    3.849 s
         Post Selection Cleanup:   0.257 s
       Scheduler:                  3.469 s
       Regalloc:              6.523 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.134 s
         Build IFG (phys):      1.169 s
         Compute Liveness:      2.481 s
         Regalloc Split:        1.397 s
         Postalloc Copy Rem:    1.378 s
         Merge multidefs:       0.123 s
         Fixup Spills:          0.091 s
         Compact:               0.031 s
         Coalesce 1:            0.420 s
         Coalesce 2:            0.130 s
         Coalesce 3:            0.045 s
         Cache LRG:             0.013 s
         Simplify:              0.164 s
         Select:                0.311 s
       Block Ordering:        0.275 s
       Peephole:              0.060 s
       Code Emission:           2.696 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.939 s
         Build OOP maps:        0.519 s
         Fill buffer:           0.947 s
         Code Installation:     0.084 s
         Other:                 0.207 s

  Total compiled methods    :     1368 methods
    Standard compilation    :     1364 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   122137 bytes
    Standard compilation    :   121331 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2148 bytes/s

  nmethod code size         :  2276664 bytes
  nmethod total size        :  1596128 bytes
