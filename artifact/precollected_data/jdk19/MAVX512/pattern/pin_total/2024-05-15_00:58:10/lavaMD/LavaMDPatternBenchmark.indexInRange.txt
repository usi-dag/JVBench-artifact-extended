# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 26.765 s/op
# Warmup Iteration   2: 10.785 s/op
# Warmup Iteration   3: 1.312 s/op
# Warmup Iteration   4: 1.324 s/op
# Warmup Iteration   5: 1.381 s/op
# Warmup Iteration   6: 1.422 s/op
# Warmup Iteration   7: 1.460 s/op
# Warmup Iteration   8: 1.532 s/op
# Warmup Iteration   9: 1.488 s/op
# Warmup Iteration  10: 1.467 s/op
Iteration   1: 1.461 s/op
                 ·gc.alloc.rate:      22.668 MB/sec
                 ·gc.alloc.rate.norm: 47673280.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.519 s/op
                 ·gc.alloc.rate:      22.370 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.920 s/op
                 ·gc.alloc.rate:      18.439 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.491 s/op
                 ·gc.alloc.rate:      22.761 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.498 s/op
                 ·gc.alloc.rate:      22.600 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.486 s/op
                 ·gc.alloc.rate:      22.682 MB/sec
                 ·gc.alloc.rate.norm: 47666696.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.777 s/op
                 ·gc.alloc.rate:      19.841 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.471 s/op
                 ·gc.alloc.rate:      22.889 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.595 s/op
                 ·gc.alloc.rate:      21.639 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.479 s/op
                 ·gc.alloc.rate:      22.864 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3266.162 bytes/s; standard: 27.659 s, 90708 bytes, 1188 methods; osr:  1.228 s, 3639 bytes, 3 methods; nmethods_size: 2254248 bytes; nmethods_code_size: 1591904 bytes}
  C2 {speed: 455.359 bytes/s; standard: 54.727 s, 24531 bytes, 168 methods; osr: 16.355 s, 7837 bytes, 14 methods; nmethods_size: 264600 bytes; nmethods_code_size: 161312 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2979.321 bytes/s; standard:  0.250 s, 744 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23168 bytes}
  Tier2 {speed: 978.737 bytes/s; standard:  0.075 s, 73 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1024 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 3274.643 bytes/s; standard: 27.334 s, 89891 bytes, 1034 methods; osr:  1.228 s, 3639 bytes, 3 methods; nmethods_size: 2216592 bytes; nmethods_code_size: 1568192 bytes}
  Tier4 {speed: 455.359 bytes/s; standard: 54.727 s, 24531 bytes, 168 methods; osr: 16.355 s, 7837 bytes, 14 methods; nmethods_size: 264600 bytes; nmethods_code_size: 161312 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  99.969 s
    Standard compilation   :  82.385 s, Average : 0.061 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :  17.583 s, Average : 1.034 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       28.790 s
       Setup time:            0.140 s
       Build HIR:            15.405 s
         Parse:                12.809 s
         Optimize blocks:       0.023 s
         GVN:                   1.058 s
         Null checks elim:      0.559 s
         Range checks elim:     0.335 s
         Other:                 0.621 s
       Emit LIR:              8.621 s
         LIR Gen:               3.263 s
         Linear Scan:           5.272 s
         Other:                 0.086 s
       Code Emission:         2.536 s
       Code Installation:     1.604 s
       Other:                 0.483 s

    C2 Compile Time:       74.166 s
       Parse:                13.753 s
       Optimize:             26.168 s
         Escape Analysis:       1.464 s
           Conn Graph:            1.007 s
           Macro Eliminate:       0.299 s
         GVN 1:                 2.564 s
         Incremental Inline:    0.504 s
           IdealLoop:             0.000 s
          (IGVN:                  0.191 s)
          (Inline:                0.240 s)
          (Prune Useless:         0.052 s)
           Other:                 0.504 s
         Vector:                0.506 s
           Box elimination:     0.505 s
             IGVN:              0.112 s
             Prune Useless:     0.084 s
         Renumber Live:         0.118 s
         IdealLoop:            15.361 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.422 s
         GVN 2:                 0.114 s
         Macro Expand:          1.648 s
         Barrier Expand:        0.009 s
         Graph Reshape:         0.496 s
         Other:                 2.960 s
       Matcher:                    6.107 s
         Post Selection Cleanup:   0.404 s
       Scheduler:                  5.345 s
       Regalloc:             16.141 s
         Ctor Chaitin:          0.020 s
         Build IFG (virt):      0.282 s
         Build IFG (phys):      2.453 s
         Compute Liveness:      5.051 s
         Regalloc Split:        1.583 s
         Postalloc Copy Rem:    4.895 s
         Merge multidefs:       0.330 s
         Fixup Spills:          0.116 s
         Compact:               0.040 s
         Coalesce 1:            0.508 s
         Coalesce 2:            0.156 s
         Coalesce 3:            0.097 s
         Cache LRG:             0.029 s
         Simplify:              0.399 s
         Select:                0.653 s
       Block Ordering:        0.321 s
       Peephole:              0.092 s
       Code Emission:           4.923 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.711 s
         Build OOP maps:        1.444 s
         Fill buffer:           1.276 s
         Code Installation:     0.184 s
         Other:                 0.308 s
       Other:                 1.132 s

  Total compiled methods    :     1373 methods
    Standard compilation    :     1356 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   126715 bytes
    Standard compilation    :   115239 bytes
    On stack replacement    :    11476 bytes
  Average compilation speed :     1267 bytes/s

  nmethod code size         :  2518848 bytes
  nmethod total size        :  1753216 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange":
  N = 10
  mean =      1.570 ±(99.9%) 0.235 s/op

  Histogram, s/op:
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 6 
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 1 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.461 s/op
     p(50.0000) =      1.494 s/op
     p(90.0000) =      1.905 s/op
     p(95.0000) =      1.920 s/op
     p(99.0000) =      1.920 s/op
     p(99.9000) =      1.920 s/op
     p(99.9900) =      1.920 s/op
     p(99.9990) =      1.920 s/op
     p(99.9999) =      1.920 s/op
    p(100.0000) =      1.920 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate":
  21.875 ±(99.9%) 2.300 MB/sec [Average]
  (min, avg, max) = (18.439, 21.875, 22.889), stdev = 1.522
  CI (99.9%): [19.575, 24.176] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  47667328.800 ±(99.9%) 3161.388 B/op [Average]
  (min, avg, max) = (47666664.000, 47667328.800, 47673280.000), stdev = 2091.063
  CI (99.9%): [47664167.412, 47670490.188] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                       Mode  Cnt         Score      Error   Units
lavaMD.LavaMDPatternBenchmark.indexInRange                        ss   10         1.570 ±    0.235    s/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate         ss   10        21.875 ±    2.300  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm    ss   10  47667328.800 ± 3161.388    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count              ss   10           ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_00:58:10/lavaMD/LavaMDPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4042.695 bytes/s; standard: 19.027 s, 77189 bytes, 1007 methods; osr:  0.227 s, 649 bytes, 1 methods; nmethods_size: 1553328 bytes; nmethods_code_size: 1100512 bytes}
  C2 {speed: 409.474 bytes/s; standard: 24.871 s, 10342 bytes, 78 methods; osr:  0.547 s, 66 bytes, 2 methods; nmethods_size: 95784 bytes; nmethods_code_size: 61216 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2999.883 bytes/s; standard:  0.208 s, 625 bytes, 132 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 31744 bytes; nmethods_code_size: 20096 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4054.103 bytes/s; standard: 18.819 s, 76564 bytes, 875 methods; osr:  0.227 s, 649 bytes, 1 methods; nmethods_size: 1521584 bytes; nmethods_code_size: 1080416 bytes}
  Tier4 {speed: 409.474 bytes/s; standard: 24.871 s, 10342 bytes, 78 methods; osr:  0.547 s, 66 bytes, 2 methods; nmethods_size: 95784 bytes; nmethods_code_size: 61216 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  44.713 s
    Standard compilation   :  43.898 s, Average : 0.040 s
    Bailed out compilation :   0.041 s, Average : 0.041 s
    On stack replacement   :   0.774 s, Average : 0.258 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       19.207 s
       Setup time:            0.127 s
       Build HIR:            10.082 s
         Parse:                 8.158 s
         Optimize blocks:       0.009 s
         GVN:                   0.670 s
         Null checks elim:      0.445 s
         Range checks elim:     0.316 s
         Other:                 0.484 s
       Emit LIR:              5.725 s
         LIR Gen:               2.105 s
         Linear Scan:           3.543 s
         Other:                 0.077 s
       Code Emission:         1.967 s
       Code Installation:     0.834 s
       Other:                 0.472 s

    C2 Compile Time:       28.906 s
       Parse:                 6.027 s
       Optimize:              9.469 s
         Escape Analysis:       0.549 s
           Conn Graph:            0.509 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.132 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.019 s
         IdealLoop:             5.121 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.203 s
         GVN 2:                 0.038 s
         Macro Expand:          0.932 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.287 s
         Other:                 1.185 s
       Matcher:                    2.790 s
         Post Selection Cleanup:   0.159 s
       Scheduler:                  2.355 s
       Regalloc:              4.629 s
         Ctor Chaitin:          0.010 s
         Build IFG (virt):      0.128 s
         Build IFG (phys):      0.612 s
         Compute Liveness:      1.394 s
         Regalloc Split:        0.802 s
         Postalloc Copy Rem:    1.007 s
         Merge multidefs:       0.079 s
         Fixup Spills:          0.084 s
         Compact:               0.007 s
         Coalesce 1:            0.299 s
         Coalesce 2:            0.138 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.005 s
         Simplify:              0.062 s
         Select:                0.132 s
       Block Ordering:        0.251 s
       Peephole:              0.053 s
       Code Emission:           2.165 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.794 s
         Build OOP maps:        0.430 s
         Fill buffer:           0.745 s
         Code Installation:     0.052 s
         Other:                 0.144 s
       Other:                 1.113 s

  Total compiled methods    :     1088 methods
    Standard compilation    :     1085 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    88246 bytes
    Standard compilation    :    87531 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     1973 bytes/s

  nmethod code size         :  1649112 bytes
  nmethod total size        :  1161728 bytes
