# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dk1=3 -Dk2=10 -Ddim=128 -Dchunksize=128 -Dclustersize=10 -Dinfile=streamcluster/input/streamcluster_128_128.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.streamcluster.StreamclusterPatternBenchmark.pow

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 291.716 s/op
# Warmup Iteration   2: 294.124 s/op
# Warmup Iteration   3: 303.597 s/op
# Warmup Iteration   4: 296.777 s/op
# Warmup Iteration   5: 309.247 s/op
# Warmup Iteration   6: 303.353 s/op
# Warmup Iteration   7: 312.646 s/op
# Warmup Iteration   8: 294.719 s/op
# Warmup Iteration   9: 289.162 s/op
# Warmup Iteration  10: 299.655 s/op
Iteration   1: 312.964 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 69230656.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 312.534 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 69171088.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 298.885 s/op
                 ·gc.alloc.rate:      0.220 MB/sec
                 ·gc.alloc.rate.norm: 69111520.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 304.689 s/op
                 ·gc.alloc.rate:      0.216 MB/sec
                 ·gc.alloc.rate.norm: 69230608.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 304.047 s/op
                 ·gc.alloc.rate:      0.217 MB/sec
                 ·gc.alloc.rate.norm: 69230608.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 298.435 s/op
                 ·gc.alloc.rate:      0.221 MB/sec
                 ·gc.alloc.rate.norm: 69231032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 300.314 s/op
                 ·gc.alloc.rate:      0.219 MB/sec
                 ·gc.alloc.rate.norm: 69230656.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 311.201 s/op
                 ·gc.alloc.rate:      0.212 MB/sec
                 ·gc.alloc.rate.norm: 69230640.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 298.938 s/op
                 ·gc.alloc.rate:      0.220 MB/sec
                 ·gc.alloc.rate.norm: 69171464.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 300.762 s/op
                 ·gc.alloc.rate:      0.219 MB/sec
                 ·gc.alloc.rate.norm: 69230656.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 302761.131 bytes/s; standard:  0.304 s, 90024 bytes, 1129 methods; osr:  0.020 s, 8079 bytes, 10 methods; nmethods_size: 2013056 bytes; nmethods_code_size: 1430528 bytes}
  C2 {speed: 37195.358 bytes/s; standard:  0.799 s, 31312 bytes, 145 methods; osr:  0.283 s, 8913 bytes, 17 methods; nmethods_size: 339592 bytes; nmethods_code_size: 217312 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 105928.458 bytes/s; standard:  0.007 s, 788 bytes, 161 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 38456 bytes; nmethods_code_size: 24288 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 307386.169 bytes/s; standard:  0.297 s, 89236 bytes, 968 methods; osr:  0.020 s, 8079 bytes, 10 methods; nmethods_size: 1974600 bytes; nmethods_code_size: 1406240 bytes}
  Tier4 {speed: 37195.358 bytes/s; standard:  0.799 s, 31312 bytes, 145 methods; osr:  0.283 s, 8913 bytes, 17 methods; nmethods_size: 339592 bytes; nmethods_code_size: 217312 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.406 s
    Standard compilation   :   1.103 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.000 s
    On stack replacement   :   0.303 s, Average : 0.011 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.322 s
       Setup time:            0.001 s
       Build HIR:             0.132 s
         Parse:                 0.103 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.123 s
         LIR Gen:               0.028 s
         Linear Scan:           0.094 s
         Other:                 0.001 s
       Code Emission:         0.034 s
       Code Installation:     0.027 s
       Other:                 0.007 s

    C2 Compile Time:        1.083 s
       Parse:                 0.113 s
       Optimize:              0.418 s
         Escape Analysis:       0.005 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.024 s
         Incremental Inline:    0.006 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.002 s)
           Other:                 0.006 s
         Vector:                0.005 s
           Box elimination:     0.005 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.003 s
         IdealLoop:             0.311 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.004 s
         GVN 2:                 0.002 s
         Macro Expand:          0.016 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.005 s
         Other:                 0.036 s
       Matcher:                    0.052 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.066 s
       Regalloc:              0.382 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.006 s
         Build IFG (phys):      0.074 s
         Compute Liveness:      0.112 s
         Regalloc Split:        0.039 s
         Postalloc Copy Rem:    0.054 s
         Merge multidefs:       0.023 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.011 s
         Coalesce 2:            0.004 s
         Coalesce 3:            0.005 s
         Cache LRG:             0.001 s
         Simplify:              0.020 s
         Select:                0.023 s
         Other:                 0.007 s
       Block Ordering:        0.004 s
       Peephole:              0.001 s
       Code Emission:           0.042 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.008 s
         Build OOP maps:        0.016 s
         Fill buffer:           0.011 s
         Code Installation:     0.004 s
         Other:                 0.003 s
       Other:                 0.000 s

  Total compiled methods    :     1301 methods
    Standard compilation    :     1274 methods
    On stack replacement    :       27 methods
  Total compiled bytecodes  :   138328 bytes
    Standard compilation    :   121336 bytes
    On stack replacement    :    16992 bytes
  Average compilation speed :    98353 bytes/s

  nmethod code size         :  2352648 bytes
  nmethod total size        :  1647840 bytes


Result "jvbench.streamcluster.StreamclusterPatternBenchmark.pow":
  N = 10
  mean =    304.277 ±(99.9%) 8.895 s/op

  Histogram, s/op:
    [290.000, 292.500) = 0 
    [292.500, 295.000) = 0 
    [295.000, 297.500) = 0 
    [297.500, 300.000) = 3 
    [300.000, 302.500) = 2 
    [302.500, 305.000) = 2 
    [305.000, 307.500) = 0 
    [307.500, 310.000) = 0 
    [310.000, 312.500) = 1 
    [312.500, 315.000) = 2 
    [315.000, 317.500) = 0 

  Percentiles, s/op:
      p(0.0000) =    298.435 s/op
     p(50.0000) =    302.404 s/op
     p(90.0000) =    312.921 s/op
     p(95.0000) =    312.964 s/op
     p(99.0000) =    312.964 s/op
     p(99.9000) =    312.964 s/op
     p(99.9900) =    312.964 s/op
     p(99.9990) =    312.964 s/op
     p(99.9999) =    312.964 s/op
    p(100.0000) =    312.964 s/op

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.pow:·gc.alloc.rate":
  0.217 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.211, 0.217, 0.221), stdev = 0.004
  CI (99.9%): [0.210, 0.223] (assumes normal distribution)

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.pow:·gc.alloc.rate.norm":
  69206892.800 ±(99.9%) 62940.967 B/op [Average]
  (min, avg, max) = (69111520.000, 69206892.800, 69231032.000), stdev = 41631.553
  CI (99.9%): [69143951.833, 69269833.767] (assumes normal distribution)

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.pow:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 01:40:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt         Score       Error   Units
StreamclusterPatternBenchmark.pow                        ss   10       304.277 ±     8.895    s/op
StreamclusterPatternBenchmark.pow:·gc.alloc.rate         ss   10         0.217 ±     0.006  MB/sec
StreamclusterPatternBenchmark.pow:·gc.alloc.rate.norm    ss   10  69206892.800 ± 62940.967    B/op
StreamclusterPatternBenchmark.pow:·gc.count              ss   10           ≈ 0              counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/streamcluster/StreamclusterPatternBenchmark.pow.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 335273.537 bytes/s; standard:  0.219 s, 73347 bytes, 980 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1472528 bytes; nmethods_code_size: 1041536 bytes}
  C2 {speed: 41696.983 bytes/s; standard:  0.237 s, 10035 bytes, 74 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 92280 bytes; nmethods_code_size: 58336 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 114448.605 bytes/s; standard:  0.006 s, 635 bytes, 134 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32208 bytes; nmethods_code_size: 20384 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 341019.791 bytes/s; standard:  0.213 s, 72712 bytes, 846 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1440320 bytes; nmethods_code_size: 1021152 bytes}
  Tier4 {speed: 41696.983 bytes/s; standard:  0.237 s, 10035 bytes, 74 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 92280 bytes; nmethods_code_size: 58336 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.462 s
    Standard compilation   :   0.455 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.217 s
       Setup time:            0.001 s
       Build HIR:             0.080 s
         Parse:                 0.060 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.087 s
         LIR Gen:               0.019 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.244 s
       Parse:                 0.027 s
       Optimize:              0.072 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.048 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.021 s
       Regalloc:              0.091 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.029 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :     1056 methods
    Standard compilation    :     1054 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    83448 bytes
    Standard compilation    :    83382 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   180673 bytes/s

  nmethod code size         :  1564808 bytes
  nmethod total size        :  1099872 bytes
