# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.559 s/op
# Warmup Iteration   2: 12.718 s/op
# Warmup Iteration   3: 9.978 s/op
# Warmup Iteration   4: 8.843 s/op
# Warmup Iteration   5: 8.953 s/op
# Warmup Iteration   6: 9.028 s/op
# Warmup Iteration   7: 9.149 s/op
# Warmup Iteration   8: 9.341 s/op
# Warmup Iteration   9: 10.077 s/op
# Warmup Iteration  10: 9.891 s/op
Iteration   1: 9.062 s/op
                 ·gc.alloc.rate:                   1395.891 MB/sec
                 ·gc.alloc.rate.norm:              13997253376.000 B/op
                 ·gc.churn.G1_Eden_Space:          1984.327 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19897778176.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 3528.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   2: 8.827 s/op
                 ·gc.alloc.rate:                   1430.985 MB/sec
                 ·gc.alloc.rate.norm:              13997227104.000 B/op
                 ·gc.churn.G1_Eden_Space:          1017.110 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     9948889088.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 61256.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   3: 8.970 s/op
                 ·gc.alloc.rate:               1409.425 MB/sec
                 ·gc.alloc.rate.norm:          13997227080.000 B/op
                 ·gc.churn.G1_Eden_Space:      1001.785 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9948889088.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   4: 8.836 s/op
                 ·gc.alloc.rate:                   1429.639 MB/sec
                 ·gc.alloc.rate.norm:              13997254232.000 B/op
                 ·gc.churn.G1_Eden_Space:          2032.302 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19897778176.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2392.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 9.163 s/op
                 ·gc.alloc.rate:               1381.324 MB/sec
                 ·gc.alloc.rate.norm:          13997227048.000 B/op
                 ·gc.churn.G1_Eden_Space:      981.812 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9948889088.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   6: 8.959 s/op
                 ·gc.alloc.rate:                   1411.050 MB/sec
                 ·gc.alloc.rate.norm:              13997253376.000 B/op
                 ·gc.churn.G1_Eden_Space:          2005.877 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19897778176.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2064.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   7: 8.944 s/op
                 ·gc.alloc.rate:                   1413.355 MB/sec
                 ·gc.alloc.rate.norm:              13997227104.000 B/op
                 ·gc.churn.G1_Eden_Space:          1004.579 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     9948889088.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 968.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   8: 10.073 s/op
                 ·gc.alloc.rate:               1262.397 MB/sec
                 ·gc.alloc.rate.norm:          13997227048.000 B/op
                 ·gc.churn.G1_Eden_Space:      897.281 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9948889088.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   9: 9.438 s/op
                 ·gc.alloc.rate:               1343.068 MB/sec
                 ·gc.alloc.rate.norm:          13997253320.000 B/op
                 ·gc.churn.G1_Eden_Space:      1909.237 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 19897778176.000 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     2.000 ms

Iteration  10: 9.142 s/op
                 ·gc.alloc.rate:                   1384.268 MB/sec
                 ·gc.alloc.rate.norm:              13997227136.000 B/op
                 ·gc.churn.G1_Eden_Space:          983.904 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     9948889088.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1424.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 219014.372 bytes/s; standard:  0.372 s, 83288 bytes, 1206 methods; osr:  0.014 s, 1298 bytes, 3 methods; nmethods_size: 2228944 bytes; nmethods_code_size: 1608352 bytes}
  C2 {speed: 40365.742 bytes/s; standard:  0.498 s, 20493 bytes, 159 methods; osr:  0.070 s, 2441 bytes, 8 methods; nmethods_size: 186632 bytes; nmethods_code_size: 119328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 101988.114 bytes/s; standard:  0.008 s, 779 bytes, 160 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 38400 bytes; nmethods_code_size: 24320 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 221375.505 bytes/s; standard:  0.365 s, 82509 bytes, 1046 methods; osr:  0.014 s, 1298 bytes, 3 methods; nmethods_size: 2190544 bytes; nmethods_code_size: 1584032 bytes}
  Tier4 {speed: 40365.742 bytes/s; standard:  0.498 s, 20493 bytes, 159 methods; osr:  0.070 s, 2441 bytes, 8 methods; nmethods_size: 186632 bytes; nmethods_code_size: 119328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.955 s
    Standard compilation   :   0.871 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.084 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.384 s
       Setup time:            0.001 s
       Build HIR:             0.144 s
         Parse:                 0.116 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.010 s
       Emit LIR:              0.137 s
         LIR Gen:               0.038 s
         Linear Scan:           0.099 s
         Other:                 0.001 s
       Code Emission:         0.041 s
       Code Installation:     0.045 s
       Other:                 0.015 s

    C2 Compile Time:        0.569 s
       Parse:                 0.111 s
       Optimize:              0.206 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.013 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.005 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.001 s
         IdealLoop:             0.137 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.007 s
         GVN 2:                 0.001 s
         Macro Expand:          0.009 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.020 s
       Matcher:                    0.032 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.037 s
       Regalloc:              0.145 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.027 s
         Compute Liveness:      0.047 s
         Regalloc Split:        0.011 s
         Postalloc Copy Rem:    0.025 s
         Merge multidefs:       0.013 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.007 s
       Block Ordering:        0.003 s
       Peephole:              0.000 s
       Code Emission:           0.032 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.008 s
         Fill buffer:           0.007 s
         Code Installation:     0.003 s
         Other:                 0.009 s
       Other:                 0.000 s

  Total compiled methods    :     1376 methods
    Standard compilation    :     1365 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :   107520 bytes
    Standard compilation    :   103781 bytes
    On stack replacement    :     3739 bytes
  Average compilation speed :   112570 bytes/s

  nmethod code size         :  2415576 bytes
  nmethod total size        :  1727680 bytes


Result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange":
  N = 10
  mean =      9.141 ±(99.9%) 0.565 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 5 
    [ 9.000,  9.250) = 3 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 1 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.827 s/op
     p(50.0000) =      9.016 s/op
     p(90.0000) =     10.009 s/op
     p(95.0000) =     10.073 s/op
     p(99.0000) =     10.073 s/op
     p(99.9000) =     10.073 s/op
     p(99.9900) =     10.073 s/op
     p(99.9990) =     10.073 s/op
     p(99.9999) =     10.073 s/op
    p(100.0000) =     10.073 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate":
  1386.140 ±(99.9%) 76.588 MB/sec [Average]
  (min, avg, max) = (1262.397, 1386.140, 1430.985), stdev = 50.658
  CI (99.9%): [1309.553, 1462.728] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  13997237682.400 ±(99.9%) 20684.319 B/op [Average]
  (min, avg, max) = (13997227048.000, 13997237682.400, 13997254232.000), stdev = 13681.396
  CI (99.9%): [13997216998.081, 13997258366.719] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  1381.821 ±(99.9%) 785.039 MB/sec [Average]
  (min, avg, max) = (897.281, 1381.821, 2032.302), stdev = 519.255
  CI (99.9%): [596.782, 2166.860] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  13928444723.200 ±(99.9%) 7767294261.507 B/op [Average]
  (min, avg, max) = (9948889088.000, 13928444723.200, 19897778176.000), stdev = 5137584233.478
  CI (99.9%): [6161150461.693, 21695738984.707] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  7163.200 ±(99.9%) 28794.065 B/op [Average]
  (min, avg, max) = (≈ 0, 7163.200, 61256.000), stdev = 19045.491
  CI (99.9%): [≈ 0, 35957.265] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.count":
  14.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.516
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 1.500, 2.000), stdev = 0.527
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# Run complete. Total time: 00:03:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                               Mode  Cnt            Score            Error   Units
Jacobi2dPatternBenchmark.indexInRange                                     ss   10            9.141 ±          0.565    s/op
Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10         1386.140 ±         76.588  MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  13997237682.400 ±      20684.319    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10         1381.821 ±        785.039  MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  13928444723.200 ± 7767294261.507    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10            0.001 ±          0.003  MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10         7163.200 ±      28794.065    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.count                           ss   10           14.000                   counts
Jacobi2dPatternBenchmark.indexInRange:·gc.time                            ss   10           15.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/jacobi2d/Jacobi2dPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 337650.572 bytes/s; standard:  0.249 s, 84080 bytes, 1092 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1679144 bytes; nmethods_code_size: 1188608 bytes}
  C2 {speed: 46508.615 bytes/s; standard:  0.233 s, 11030 bytes, 84 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 94744 bytes; nmethods_code_size: 60384 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 94478.775 bytes/s; standard:  0.007 s, 678 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34408 bytes; nmethods_code_size: 21792 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 344866.347 bytes/s; standard:  0.242 s, 83402 bytes, 949 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1644736 bytes; nmethods_code_size: 1166816 bytes}
  Tier4 {speed: 46508.615 bytes/s; standard:  0.233 s, 11030 bytes, 84 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 94744 bytes; nmethods_code_size: 60384 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.488 s
    Standard compilation   :   0.482 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.247 s
       Setup time:            0.001 s
       Build HIR:             0.090 s
         Parse:                 0.068 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.098 s
         LIR Gen:               0.022 s
         Linear Scan:           0.076 s
         Other:                 0.001 s
       Code Emission:         0.027 s
       Code Installation:     0.024 s
       Other:                 0.006 s

    C2 Compile Time:        0.244 s
       Parse:                 0.028 s
       Optimize:              0.070 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.045 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.022 s
       Regalloc:              0.089 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.015 s
         Compute Liveness:      0.029 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1178 methods
    Standard compilation    :     1176 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    95176 bytes
    Standard compilation    :    95110 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   195195 bytes/s

  nmethod code size         :  1773888 bytes
  nmethod total size        :  1248992 bytes
