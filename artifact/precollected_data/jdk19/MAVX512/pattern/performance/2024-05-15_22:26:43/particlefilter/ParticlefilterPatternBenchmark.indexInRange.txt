# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7.894 s/op
# Warmup Iteration   2: 7.282 s/op
# Warmup Iteration   3: 2.800 s/op
# Warmup Iteration   4: 2.794 s/op
# Warmup Iteration   5: 2.799 s/op
# Warmup Iteration   6: 2.801 s/op
# Warmup Iteration   7: 2.758 s/op
# Warmup Iteration   8: 3.084 s/op
# Warmup Iteration   9: 3.086 s/op
# Warmup Iteration  10: 3.080 s/op
Iteration   1: 3.084 s/op
                 ·gc.alloc.rate:      10.851 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.077 s/op
                 ·gc.alloc.rate:      10.874 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.079 s/op
                 ·gc.alloc.rate:      10.869 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.074 s/op
                 ·gc.alloc.rate:      10.885 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.069 s/op
                 ·gc.alloc.rate:      10.897 MB/sec
                 ·gc.alloc.rate.norm: 40798344.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.078 s/op
                 ·gc.alloc.rate:      10.871 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.083 s/op
                 ·gc.alloc.rate:      10.854 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.087 s/op
                 ·gc.alloc.rate:      10.843 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.087 s/op
                 ·gc.alloc.rate:      10.844 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.084 s/op
                 ·gc.alloc.rate:      10.853 MB/sec
                 ·gc.alloc.rate.norm: 40798312.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 159439.569 bytes/s; standard:  0.367 s, 82237 bytes, 1182 methods; osr:  0.231 s, 13240 bytes, 10 methods; nmethods_size: 3280976 bytes; nmethods_code_size: 2348032 bytes}
  C2 {speed: 29571.777 bytes/s; standard:  1.006 s, 31214 bytes, 185 methods; osr:  0.795 s, 22039 bytes, 21 methods; nmethods_size: 422664 bytes; nmethods_code_size: 275072 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 111104.132 bytes/s; standard:  0.006 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 159956.492 bytes/s; standard:  0.361 s, 81533 bytes, 1037 methods; osr:  0.231 s, 13240 bytes, 10 methods; nmethods_size: 3246168 bytes; nmethods_code_size: 2325984 bytes}
  Tier4 {speed: 29571.777 bytes/s; standard:  1.006 s, 31214 bytes, 185 methods; osr:  0.795 s, 22039 bytes, 21 methods; nmethods_size: 422664 bytes; nmethods_code_size: 275072 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   2.400 s
    Standard compilation   :   1.373 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   1.026 s, Average : 0.033 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.597 s
       Setup time:            0.001 s
       Build HIR:             0.222 s
         Parse:                 0.173 s
         Optimize blocks:       0.000 s
         GVN:                   0.020 s
         Null checks elim:      0.011 s
         Range checks elim:     0.002 s
         Other:                 0.017 s
       Emit LIR:              0.239 s
         LIR Gen:               0.047 s
         Linear Scan:           0.190 s
         Other:                 0.001 s
       Code Emission:         0.089 s
       Code Installation:     0.039 s
       Other:                 0.007 s

    C2 Compile Time:        1.802 s
       Parse:                 0.182 s
       Optimize:              0.774 s
         Escape Analysis:       0.006 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.032 s
         Incremental Inline:    0.041 s
           IdealLoop:             0.000 s
          (IGVN:                  0.013 s)
          (Inline:                0.021 s)
          (Prune Useless:         0.006 s)
           Other:                 0.041 s
         Vector:                0.019 s
           Box elimination:     0.019 s
             IGVN:              0.006 s
             Prune Useless:     0.005 s
         Renumber Live:         0.004 s
         IdealLoop:             0.591 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.004 s
         GVN 2:                 0.002 s
         Macro Expand:          0.020 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.006 s
         Other:                 0.049 s
       Matcher:                    0.060 s
         Post Selection Cleanup:   0.006 s
       Scheduler:                  0.079 s
       Regalloc:              0.646 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.010 s
         Build IFG (phys):      0.141 s
         Compute Liveness:      0.168 s
         Regalloc Split:        0.057 s
         Postalloc Copy Rem:    0.076 s
         Merge multidefs:       0.025 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.020 s
         Coalesce 2:            0.013 s
         Coalesce 3:            0.005 s
         Cache LRG:             0.002 s
         Simplify:              0.044 s
         Select:                0.052 s
         Other:                 0.029 s
       Block Ordering:        0.005 s
       Peephole:              0.001 s
       Code Emission:           0.049 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.009 s
         Build OOP maps:        0.019 s
         Fill buffer:           0.013 s
         Code Installation:     0.005 s
         Other:                 0.003 s
       Other:                 0.000 s

  Total compiled methods    :     1398 methods
    Standard compilation    :     1367 methods
    On stack replacement    :       31 methods
  Total compiled bytecodes  :   148730 bytes
    Standard compilation    :   113451 bytes
    On stack replacement    :    35279 bytes
  Average compilation speed :    61960 bytes/s

  nmethod code size         :  3703640 bytes
  nmethod total size        :  2623104 bytes


Result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange":
  N = 10
  mean =      3.080 ±(99.9%) 0.009 s/op

  Histogram, s/op:
    [3.060, 3.063) = 0 
    [3.063, 3.065) = 0 
    [3.065, 3.068) = 0 
    [3.068, 3.070) = 1 
    [3.070, 3.073) = 0 
    [3.073, 3.075) = 1 
    [3.075, 3.078) = 1 
    [3.078, 3.080) = 2 
    [3.080, 3.083) = 0 
    [3.083, 3.085) = 3 
    [3.085, 3.088) = 2 

  Percentiles, s/op:
      p(0.0000) =      3.069 s/op
     p(50.0000) =      3.081 s/op
     p(90.0000) =      3.087 s/op
     p(95.0000) =      3.087 s/op
     p(99.0000) =      3.087 s/op
     p(99.9000) =      3.087 s/op
     p(99.9900) =      3.087 s/op
     p(99.9990) =      3.087 s/op
     p(99.9999) =      3.087 s/op
    p(100.0000) =      3.087 s/op

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate":
  10.864 ±(99.9%) 0.027 MB/sec [Average]
  (min, avg, max) = (10.843, 10.864, 10.897), stdev = 0.018
  CI (99.9%): [10.837, 10.891] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  40798315.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (40798312.000, 40798315.200, 40798344.000), stdev = 10.119
  CI (99.9%): [40798299.901, 40798330.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt         Score    Error   Units
ParticlefilterPatternBenchmark.indexInRange                        ss   10         3.080 ±  0.009    s/op
ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate         ss   10        10.864 ±  0.027  MB/sec
ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate.norm    ss   10  40798315.200 ± 15.299    B/op
ParticlefilterPatternBenchmark.indexInRange:·gc.count              ss   10           ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/particlefilter/ParticlefilterPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 336360.358 bytes/s; standard:  0.221 s, 74224 bytes, 985 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1481232 bytes; nmethods_code_size: 1048000 bytes}
  C2 {speed: 41282.465 bytes/s; standard:  0.235 s, 9857 bytes, 76 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 90896 bytes; nmethods_code_size: 57216 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 113260.181 bytes/s; standard:  0.006 s, 635 bytes, 134 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32208 bytes; nmethods_code_size: 20384 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 342176.481 bytes/s; standard:  0.215 s, 73589 bytes, 851 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1449024 bytes; nmethods_code_size: 1027616 bytes}
  Tier4 {speed: 41282.465 bytes/s; standard:  0.235 s, 9857 bytes, 76 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 90896 bytes; nmethods_code_size: 57216 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.461 s
    Standard compilation   :   0.455 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.218 s
       Setup time:            0.001 s
       Build HIR:             0.080 s
         Parse:                 0.060 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.087 s
         LIR Gen:               0.019 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.021 s
       Other:                 0.005 s

    C2 Compile Time:        0.242 s
       Parse:                 0.027 s
       Optimize:              0.073 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.048 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.020 s
       Regalloc:              0.091 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.028 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1063 methods
    Standard compilation    :     1061 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    84147 bytes
    Standard compilation    :    84081 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   182517 bytes/s

  nmethod code size         :  1572128 bytes
  nmethod total size        :  1105216 bytes
