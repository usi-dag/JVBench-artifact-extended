# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19-xor/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.491 s/op
# Warmup Iteration   2: 6.023 s/op
# Warmup Iteration   3: 3.364 s/op
# Warmup Iteration   4: 3.333 s/op
# Warmup Iteration   5: 3.327 s/op
# Warmup Iteration   6: 3.324 s/op
# Warmup Iteration   7: 3.323 s/op
# Warmup Iteration   8: 3.325 s/op
# Warmup Iteration   9: 3.326 s/op
# Warmup Iteration  10: 3.323 s/op
Iteration   1: 3.326 s/op
                 ·gc.alloc.rate:      7.350 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.325 s/op
                 ·gc.alloc.rate:      7.352 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.324 s/op
                 ·gc.alloc.rate:      7.354 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.324 s/op
                 ·gc.alloc.rate:      7.353 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.322 s/op
                 ·gc.alloc.rate:      7.357 MB/sec
                 ·gc.alloc.rate.norm: 29493320.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.326 s/op
                 ·gc.alloc.rate:      7.349 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.325 s/op
                 ·gc.alloc.rate:      7.352 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.323 s/op
                 ·gc.alloc.rate:      7.355 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.323 s/op
                 ·gc.alloc.rate:      7.354 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.324 s/op
                 ·gc.alloc.rate:      7.353 MB/sec
                 ·gc.alloc.rate.norm: 29493288.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 232181.671 bytes/s; standard:  0.305 s, 76564 bytes, 1121 methods; osr:  0.066 s, 9656 bytes, 10 methods; nmethods_size: 2339448 bytes; nmethods_code_size: 1636448 bytes}
  C2 {speed: 24532.211 bytes/s; standard:  0.806 s, 20421 bytes, 154 methods; osr:  0.726 s, 17168 bytes, 19 methods; nmethods_size: 346312 bytes; nmethods_code_size: 226368 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 103524.738 bytes/s; standard:  0.007 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 234581.655 bytes/s; standard:  0.298 s, 75860 bytes, 976 methods; osr:  0.066 s, 9656 bytes, 10 methods; nmethods_size: 2304640 bytes; nmethods_code_size: 1614400 bytes}
  Tier4 {speed: 24532.211 bytes/s; standard:  0.806 s, 20421 bytes, 154 methods; osr:  0.726 s, 17168 bytes, 19 methods; nmethods_size: 346312 bytes; nmethods_code_size: 226368 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.904 s
    Standard compilation   :   1.111 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.793 s, Average : 0.027 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.369 s
       Setup time:            0.001 s
       Build HIR:             0.144 s
         Parse:                 0.116 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.010 s
       Emit LIR:              0.140 s
         LIR Gen:               0.030 s
         Linear Scan:           0.108 s
         Other:                 0.001 s
       Code Emission:         0.043 s
       Code Installation:     0.030 s
       Other:                 0.011 s

    C2 Compile Time:        1.533 s
       Parse:                 0.128 s
       Optimize:              0.683 s
         Escape Analysis:       0.005 s
           Conn Graph:            0.004 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.027 s
         Incremental Inline:    0.016 s
           IdealLoop:             0.000 s
          (IGVN:                  0.007 s)
          (Inline:                0.005 s)
          (Prune Useless:         0.004 s)
           Other:                 0.016 s
         Vector:                0.011 s
           Box elimination:     0.010 s
             IGVN:              0.003 s
             Prune Useless:     0.004 s
         Renumber Live:         0.003 s
         IdealLoop:             0.548 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.004 s
         GVN 2:                 0.002 s
         Macro Expand:          0.017 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.005 s
         Other:                 0.046 s
       Matcher:                    0.051 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.068 s
       Regalloc:              0.553 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.009 s
         Build IFG (phys):      0.120 s
         Compute Liveness:      0.148 s
         Regalloc Split:        0.050 s
         Postalloc Copy Rem:    0.062 s
         Merge multidefs:       0.022 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.019 s
         Coalesce 2:            0.014 s
         Coalesce 3:            0.004 s
         Cache LRG:             0.001 s
         Simplify:              0.036 s
         Select:                0.043 s
         Other:                 0.022 s
       Block Ordering:        0.004 s
       Peephole:              0.001 s
       Code Emission:           0.041 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.007 s
         Build OOP maps:        0.016 s
         Fill buffer:           0.010 s
         Code Installation:     0.005 s
         Other:                 0.003 s

  Total compiled methods    :     1304 methods
    Standard compilation    :     1275 methods
    On stack replacement    :       29 methods
  Total compiled bytecodes  :   123809 bytes
    Standard compilation    :    96985 bytes
    On stack replacement    :    26824 bytes
  Average compilation speed :    65013 bytes/s

  nmethod code size         :  2685760 bytes
  nmethod total size        :  1862816 bytes


Result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended":
  N = 10
  mean =      3.324 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [3.321, 3.321) = 0 
    [3.321, 3.322) = 0 
    [3.322, 3.322) = 0 
    [3.322, 3.322) = 1 
    [3.322, 3.322) = 0 
    [3.322, 3.323) = 0 
    [3.323, 3.323) = 0 
    [3.323, 3.323) = 1 
    [3.323, 3.323) = 0 
    [3.323, 3.324) = 1 
    [3.324, 3.324) = 1 
    [3.324, 3.324) = 1 
    [3.324, 3.324) = 1 
    [3.324, 3.325) = 0 
    [3.325, 3.325) = 2 
    [3.325, 3.325) = 0 
    [3.325, 3.325) = 0 
    [3.325, 3.326) = 0 
    [3.326, 3.326) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.322 s/op
     p(50.0000) =      3.324 s/op
     p(90.0000) =      3.326 s/op
     p(95.0000) =      3.326 s/op
     p(99.0000) =      3.326 s/op
     p(99.9000) =      3.326 s/op
     p(99.9900) =      3.326 s/op
     p(99.9990) =      3.326 s/op
     p(99.9999) =      3.326 s/op
    p(100.0000) =      3.326 s/op

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate":
  7.353 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (7.349, 7.353, 7.357), stdev = 0.002
  CI (99.9%): [7.350, 7.356] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate.norm":
  29493291.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (29493288.000, 29493291.200, 29493320.000), stdev = 10.119
  CI (99.9%): [29493275.901, 29493306.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                       Mode  Cnt         Score    Error   Units
ParticlefilterPatternBenchmark.xorExtended                        ss   10         3.324 ±  0.002    s/op
ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate         ss   10         7.353 ±  0.003  MB/sec
ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate.norm    ss   10  29493291.200 ± 15.299    B/op
ParticlefilterPatternBenchmark.xorExtended:·gc.count              ss   10           ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_09:06:15/particlefilter/ParticlefilterPatternBenchmark.xorExtended.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 337427.357 bytes/s; standard:  0.222 s, 74901 bytes, 998 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1493576 bytes; nmethods_code_size: 1060640 bytes}
  C2 {speed: 41610.381 bytes/s; standard:  0.228 s, 9672 bytes, 73 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 89328 bytes; nmethods_code_size: 56288 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 103274.785 bytes/s; standard:  0.006 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 344455.113 bytes/s; standard:  0.216 s, 74233 bytes, 857 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1459664 bytes; nmethods_code_size: 1039168 bytes}
  Tier4 {speed: 41610.381 bytes/s; standard:  0.228 s, 9672 bytes, 73 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 89328 bytes; nmethods_code_size: 56288 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.456 s
    Standard compilation   :   0.450 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.220 s
       Setup time:            0.001 s
       Build HIR:             0.081 s
         Parse:                 0.061 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.087 s
         LIR Gen:               0.019 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.021 s
       Other:                 0.005 s

    C2 Compile Time:        0.236 s
       Parse:                 0.025 s
       Optimize:              0.070 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.046 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.016 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.089 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.015 s
         Compute Liveness:      0.028 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.015 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1073 methods
    Standard compilation    :     1071 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    84639 bytes
    Standard compilation    :    84573 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   185609 bytes/s

  nmethod code size         :  1582904 bytes
  nmethod total size        :  1116928 bytes
