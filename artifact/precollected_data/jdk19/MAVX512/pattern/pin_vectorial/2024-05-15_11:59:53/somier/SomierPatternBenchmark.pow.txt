# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.pow

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 22.259 s/op
# Warmup Iteration   2: 16.278 s/op
# Warmup Iteration   3: 16.257 s/op
# Warmup Iteration   4: 16.279 s/op
# Warmup Iteration   5: 16.222 s/op
# Warmup Iteration   6: 16.248 s/op
# Warmup Iteration   7: 16.268 s/op
# Warmup Iteration   8: 16.259 s/op
# Warmup Iteration   9: 16.324 s/op
# Warmup Iteration  10: 16.262 s/op
Iteration   1: 16.258 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.271 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.251 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.262 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.262 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 16.258 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 16.252 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 16.264 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 16.211 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 16.242 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5137.273 bytes/s; standard: 15.381 s, 77649 bytes, 1071 methods; osr:  0.125 s, 2009 bytes, 7 methods; nmethods_size: 2022448 bytes; nmethods_code_size: 1435168 bytes}
  C2 {speed: 843.048 bytes/s; standard: 27.429 s, 19795 bytes, 119 methods; osr:  2.850 s, 5732 bytes, 15 methods; nmethods_size: 171976 bytes; nmethods_code_size: 107392 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5393.319 bytes/s; standard:  0.138 s, 743 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36600 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5134.978 bytes/s; standard: 15.243 s, 76906 bytes, 918 methods; osr:  0.125 s, 2009 bytes, 7 methods; nmethods_size: 1985848 bytes; nmethods_code_size: 1412064 bytes}
  Tier4 {speed: 843.048 bytes/s; standard: 27.429 s, 19795 bytes, 119 methods; osr:  2.850 s, 5732 bytes, 15 methods; nmethods_size: 171976 bytes; nmethods_code_size: 107392 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  45.917 s
    Standard compilation   :  42.810 s, Average : 0.036 s
    Bailed out compilation :   0.132 s, Average : 0.132 s
    On stack replacement   :   2.975 s, Average : 0.135 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       15.597 s
       Setup time:            0.070 s
       Build HIR:             9.649 s
         Parse:                 8.366 s
         Optimize blocks:       0.007 s
         GVN:                   0.438 s
         Null checks elim:      0.287 s
         Range checks elim:     0.247 s
         Other:                 0.304 s
       Emit LIR:              3.348 s
         LIR Gen:               1.814 s
         Linear Scan:           1.500 s
         Other:                 0.033 s
       Code Emission:         1.492 s
       Code Installation:     0.786 s
       Other:                 0.252 s

    C2 Compile Time:       32.691 s
       Parse:                 9.321 s
       Optimize:             11.318 s
         Escape Analysis:       0.739 s
           Conn Graph:            0.481 s
           Macro Eliminate:       0.055 s
         GVN 1:                 0.986 s
         Incremental Inline:    0.378 s
           IdealLoop:             0.000 s
          (IGVN:                  0.062 s)
          (Inline:                0.287 s)
          (Prune Useless:         0.025 s)
           Other:                 0.378 s
         Vector:                0.700 s
           Box elimination:     0.697 s
             IGVN:              0.075 s
             Prune Useless:     0.019 s
         Renumber Live:         0.013 s
         IdealLoop:             5.648 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.193 s
         GVN 2:                 0.024 s
         Macro Expand:          1.059 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.275 s
         Other:                 1.303 s
       Matcher:                    2.520 s
         Post Selection Cleanup:   0.202 s
       Scheduler:                  2.581 s
       Regalloc:              3.526 s
         Ctor Chaitin:          0.086 s
         Build IFG (virt):      0.101 s
         Build IFG (phys):      0.426 s
         Compute Liveness:      1.214 s
         Regalloc Split:        0.750 s
         Postalloc Copy Rem:    0.384 s
         Merge multidefs:       0.063 s
         Fixup Spills:          0.122 s
         Compact:               0.004 s
         Coalesce 1:            0.302 s
         Coalesce 2:            0.118 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.008 s
         Simplify:              0.061 s
         Select:                0.064 s
       Block Ordering:        0.222 s
       Peephole:              0.026 s
       Code Emission:           2.529 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.047 s
         Build OOP maps:        0.198 s
         Fill buffer:           0.876 s
         Code Installation:     0.137 s
         Other:                 0.271 s
       Other:                 0.512 s

  Total compiled methods    :     1212 methods
    Standard compilation    :     1190 methods
    On stack replacement    :       22 methods
  Total compiled bytecodes  :   105185 bytes
    Standard compilation    :    97444 bytes
    On stack replacement    :     7741 bytes
  Average compilation speed :     2290 bytes/s

  nmethod code size         :  2194424 bytes
  nmethod total size        :  1542560 bytes


Result "jvbench.somier.SomierPatternBenchmark.pow":
  N = 10
  mean =     16.253 ±(99.9%) 0.025 s/op

  Histogram, s/op:
    [16.210, 16.215) = 1 
    [16.215, 16.220) = 0 
    [16.220, 16.225) = 0 
    [16.225, 16.230) = 0 
    [16.230, 16.235) = 0 
    [16.235, 16.240) = 0 
    [16.240, 16.245) = 1 
    [16.245, 16.250) = 0 
    [16.250, 16.255) = 2 
    [16.255, 16.260) = 2 
    [16.260, 16.265) = 3 
    [16.265, 16.270) = 0 
    [16.270, 16.275) = 1 
    [16.275, 16.280) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.211 s/op
     p(50.0000) =     16.258 s/op
     p(90.0000) =     16.270 s/op
     p(95.0000) =     16.271 s/op
     p(99.0000) =     16.271 s/op
     p(99.9000) =     16.271 s/op
     p(99.9900) =     16.271 s/op
     p(99.9990) =     16.271 s/op
     p(99.9999) =     16.271 s/op
    p(100.0000) =     16.271 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate.norm":
  1748.800 ±(99.9%) 3316.527 B/op [Average]
  (min, avg, max) = (1048.000, 1748.800, 7992.000), stdev = 2193.677
  CI (99.9%): [≈ 0, 5065.327] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:06:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt     Score      Error   Units
SomierPatternBenchmark.pow                        ss   10    16.253 ±    0.025    s/op
SomierPatternBenchmark.pow:·gc.alloc.rate         ss   10    ≈ 10⁻⁴             MB/sec
SomierPatternBenchmark.pow:·gc.alloc.rate.norm    ss   10  1748.800 ± 3316.527    B/op
SomierPatternBenchmark.pow:·gc.count              ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_11:59:53/somier/SomierPatternBenchmark.pow.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6257.917 bytes/s; standard: 12.491 s, 78251 bytes, 1038 methods; osr:  0.117 s, 649 bytes, 1 methods; nmethods_size: 1573064 bytes; nmethods_code_size: 1114816 bytes}
  C2 {speed: 539.029 bytes/s; standard: 15.791 s, 10122 bytes, 78 methods; osr:  3.278 s, 157 bytes, 3 methods; nmethods_size: 95304 bytes; nmethods_code_size: 60480 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4146.573 bytes/s; standard:  0.146 s, 605 bytes, 128 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 30784 bytes; nmethods_code_size: 19488 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6282.636 bytes/s; standard: 12.345 s, 77646 bytes, 910 methods; osr:  0.117 s, 649 bytes, 1 methods; nmethods_size: 1542280 bytes; nmethods_code_size: 1095328 bytes}
  Tier4 {speed: 539.029 bytes/s; standard: 15.791 s, 10122 bytes, 78 methods; osr:  3.278 s, 157 bytes, 3 methods; nmethods_size: 95304 bytes; nmethods_code_size: 60480 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  31.678 s
    Standard compilation   :  28.282 s, Average : 0.025 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.395 s, Average : 0.849 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.579 s
       Setup time:            0.025 s
       Build HIR:             7.308 s
         Parse:                 6.088 s
         Optimize blocks:       0.006 s
         GVN:                   0.380 s
         Null checks elim:      0.289 s
         Range checks elim:     0.233 s
         Other:                 0.312 s
       Emit LIR:              3.103 s
         LIR Gen:               1.530 s
         Linear Scan:           1.525 s
         Other:                 0.048 s
       Code Emission:         1.316 s
       Code Installation:     0.600 s
       Other:                 0.226 s

    C2 Compile Time:       21.624 s
       Parse:                 5.035 s
       Optimize:              7.505 s
         Escape Analysis:       0.356 s
           Conn Graph:            0.329 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.979 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.013 s
         IdealLoop:             4.140 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.166 s
         GVN 2:                 0.034 s
         Macro Expand:          0.746 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.219 s
         Other:                 0.849 s
       Matcher:                    2.135 s
         Post Selection Cleanup:   0.179 s
       Scheduler:                  1.875 s
       Regalloc:              2.524 s
         Ctor Chaitin:          0.033 s
         Build IFG (virt):      0.084 s
         Build IFG (phys):      0.325 s
         Compute Liveness:      0.912 s
         Regalloc Split:        0.562 s
         Postalloc Copy Rem:    0.255 s
         Merge multidefs:       0.042 s
         Fixup Spills:          0.057 s
         Compact:               0.007 s
         Coalesce 1:            0.218 s
         Coalesce 2:            0.075 s
         Coalesce 3:            0.032 s
         Cache LRG:             0.002 s
         Simplify:              0.035 s
         Select:                0.051 s
       Block Ordering:        0.187 s
       Peephole:              0.029 s
       Code Emission:           1.677 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.717 s
         Build OOP maps:        0.158 s
         Fill buffer:           0.626 s
         Code Installation:     0.064 s
         Other:                 0.111 s
       Other:                 0.593 s

  Total compiled methods    :     1120 methods
    Standard compilation    :     1116 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    89179 bytes
    Standard compilation    :    88373 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2815 bytes/s

  nmethod code size         :  1668368 bytes
  nmethod total size        :  1175296 bytes
