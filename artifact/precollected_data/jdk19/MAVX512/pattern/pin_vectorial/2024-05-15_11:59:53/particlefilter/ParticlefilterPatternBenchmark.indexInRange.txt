# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 58.447 s/op
# Warmup Iteration   2: 50.417 s/op
# Warmup Iteration   3: 28.560 s/op
# Warmup Iteration   4: 31.380 s/op
# Warmup Iteration   5: 31.292 s/op
# Warmup Iteration   6: 31.270 s/op
# Warmup Iteration   7: 31.268 s/op
# Warmup Iteration   8: 31.272 s/op
# Warmup Iteration   9: 31.266 s/op
# Warmup Iteration  10: 31.267 s/op
Iteration   1: 31.271 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40805848.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.271 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798904.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.272 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798936.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.271 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798936.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.268 s/op
                 ·gc.alloc.rate:      1.223 MB/sec
                 ·gc.alloc.rate.norm: 40798904.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 31.274 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798936.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 31.275 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798904.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 31.272 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798936.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 31.273 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798904.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 31.270 s/op
                 ·gc.alloc.rate:      1.224 MB/sec
                 ·gc.alloc.rate.norm: 40798936.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4830.023 bytes/s; standard: 18.393 s, 82094 bytes, 1191 methods; osr:  0.846 s, 10831 bytes, 9 methods; nmethods_size: 3060408 bytes; nmethods_code_size: 2191648 bytes}
  C2 {speed: 1003.502 bytes/s; standard: 32.818 s, 22797 bytes, 182 methods; osr:  6.630 s, 16789 bytes, 20 methods; nmethods_size: 342288 bytes; nmethods_code_size: 220000 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4902.003 bytes/s; standard:  0.147 s, 719 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35456 bytes; nmethods_code_size: 22432 bytes}
  Tier2 {speed: 348.024 bytes/s; standard:  0.678 s, 236 bytes, 6 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 4520 bytes; nmethods_code_size: 2496 bytes}
  Tier3 {speed: 4994.501 bytes/s; standard: 17.568 s, 81139 bytes, 1037 methods; osr:  0.846 s, 10831 bytes, 9 methods; nmethods_size: 3020432 bytes; nmethods_code_size: 2166720 bytes}
  Tier4 {speed: 1003.502 bytes/s; standard: 32.818 s, 22797 bytes, 182 methods; osr:  6.630 s, 16789 bytes, 20 methods; nmethods_size: 342288 bytes; nmethods_code_size: 220000 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  58.687 s
    Standard compilation   :  51.211 s, Average : 0.037 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   7.476 s, Average : 0.258 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       19.194 s
       Setup time:            0.025 s
       Build HIR:            12.985 s
         Parse:                11.639 s
         Optimize blocks:       0.027 s
         GVN:                   0.410 s
         Null checks elim:      0.348 s
         Range checks elim:     0.255 s
         Other:                 0.305 s
       Emit LIR:              3.949 s
         LIR Gen:               2.223 s
         Linear Scan:           1.679 s
         Other:                 0.048 s
       Code Emission:         1.300 s
       Code Installation:     0.706 s
       Other:                 0.228 s

    C2 Compile Time:       41.682 s
       Parse:                12.507 s
       Optimize:             14.781 s
         Escape Analysis:       0.811 s
           Conn Graph:            0.575 s
           Macro Eliminate:       0.141 s
         GVN 1:                 1.430 s
         Incremental Inline:    0.561 s
           IdealLoop:             0.000 s
          (IGVN:                  0.109 s)
          (Inline:                0.418 s)
          (Prune Useless:         0.040 s)
           Other:                 0.561 s
         Vector:                0.821 s
           Box elimination:     0.820 s
             IGVN:              0.076 s
             Prune Useless:     0.025 s
         Renumber Live:         0.021 s
         IdealLoop:             7.915 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.206 s
         GVN 2:                 0.032 s
         Macro Expand:          1.054 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.291 s
         Other:                 1.638 s
       Matcher:                    3.121 s
         Post Selection Cleanup:   0.349 s
       Scheduler:                  2.848 s
       Regalloc:              4.391 s
         Ctor Chaitin:          0.018 s
         Build IFG (virt):      0.113 s
         Build IFG (phys):      0.644 s
         Compute Liveness:      1.569 s
         Regalloc Split:        0.802 s
         Postalloc Copy Rem:    0.473 s
         Merge multidefs:       0.101 s
         Fixup Spills:          0.118 s
         Compact:               0.009 s
         Coalesce 1:            0.320 s
         Coalesce 2:            0.098 s
         Coalesce 3:            0.045 s
         Cache LRG:             0.005 s
         Simplify:              0.072 s
         Select:                0.101 s
       Block Ordering:        0.302 s
       Peephole:              0.028 s
       Code Emission:           3.130 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.426 s
         Build OOP maps:        0.264 s
         Fill buffer:           1.065 s
         Code Installation:     0.171 s
         Other:                 0.204 s
       Other:                 0.403 s

  Total compiled methods    :     1402 methods
    Standard compilation    :     1373 methods
    On stack replacement    :       29 methods
  Total compiled bytecodes  :   132511 bytes
    Standard compilation    :   104891 bytes
    On stack replacement    :    27620 bytes
  Average compilation speed :     2257 bytes/s

  nmethod code size         :  3402696 bytes
  nmethod total size        :  2411648 bytes


Result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange":
  N = 10
  mean =     31.272 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [31.268, 31.269) = 1 
    [31.269, 31.269) = 0 
    [31.269, 31.270) = 0 
    [31.270, 31.270) = 0 
    [31.270, 31.271) = 1 
    [31.271, 31.271) = 0 
    [31.271, 31.272) = 3 
    [31.272, 31.272) = 2 
    [31.272, 31.273) = 0 
    [31.273, 31.273) = 1 
    [31.273, 31.274) = 0 
    [31.274, 31.274) = 1 
    [31.274, 31.275) = 0 
    [31.275, 31.275) = 0 
    [31.275, 31.276) = 1 

  Percentiles, s/op:
      p(0.0000) =     31.268 s/op
     p(50.0000) =     31.272 s/op
     p(90.0000) =     31.275 s/op
     p(95.0000) =     31.275 s/op
     p(99.0000) =     31.275 s/op
     p(99.9000) =     31.275 s/op
     p(99.9900) =     31.275 s/op
     p(99.9990) =     31.275 s/op
     p(99.9999) =     31.275 s/op
    p(100.0000) =     31.275 s/op

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate":
  1.224 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (1.223, 1.224, 1.224), stdev = 0.001
  CI (99.9%): [1.223, 1.225] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  40799614.400 ±(99.9%) 3311.454 B/op [Average]
  (min, avg, max) = (40798904.000, 40799614.400, 40805848.000), stdev = 2190.321
  CI (99.9%): [40796302.946, 40802925.854] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.indexInRange:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:11:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt         Score      Error   Units
ParticlefilterPatternBenchmark.indexInRange                        ss   10        31.272 ±    0.003    s/op
ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate         ss   10         1.224 ±    0.001  MB/sec
ParticlefilterPatternBenchmark.indexInRange:·gc.alloc.rate.norm    ss   10  40799614.400 ± 3311.454    B/op
ParticlefilterPatternBenchmark.indexInRange:·gc.count              ss   10           ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_11:59:53/particlefilter/ParticlefilterPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6022.276 bytes/s; standard: 12.865 s, 77568 bytes, 1036 methods; osr:  0.123 s, 649 bytes, 1 methods; nmethods_size: 1565896 bytes; nmethods_code_size: 1109120 bytes}
  C2 {speed: 545.518 bytes/s; standard: 16.139 s, 10357 bytes, 77 methods; osr:  3.134 s, 157 bytes, 3 methods; nmethods_size: 96080 bytes; nmethods_code_size: 61504 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4340.225 bytes/s; standard:  0.153 s, 662 bytes, 140 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33664 bytes; nmethods_code_size: 21312 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6042.264 bytes/s; standard: 12.713 s, 76906 bytes, 896 methods; osr:  0.123 s, 649 bytes, 1 methods; nmethods_size: 1532232 bytes; nmethods_code_size: 1087808 bytes}
  Tier4 {speed: 545.518 bytes/s; standard: 16.139 s, 10357 bytes, 77 methods; osr:  3.134 s, 157 bytes, 3 methods; nmethods_size: 96080 bytes; nmethods_code_size: 61504 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  32.261 s
    Standard compilation   :  29.004 s, Average : 0.026 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.257 s, Average : 0.814 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.958 s
       Setup time:            0.044 s
       Build HIR:             7.727 s
         Parse:                 6.435 s
         Optimize blocks:       0.006 s
         GVN:                   0.336 s
         Null checks elim:      0.355 s
         Range checks elim:     0.269 s
         Other:                 0.327 s
       Emit LIR:              2.917 s
         LIR Gen:               1.483 s
         Linear Scan:           1.393 s
         Other:                 0.041 s
       Code Emission:         1.422 s
       Code Installation:     0.582 s
       Other:                 0.266 s

    C2 Compile Time:       21.787 s
       Parse:                 5.052 s
       Optimize:              7.647 s
         Escape Analysis:       0.352 s
           Conn Graph:            0.318 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.119 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.013 s
         IdealLoop:             4.025 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.138 s
         GVN 2:                 0.027 s
         Macro Expand:          0.812 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.229 s
         Other:                 0.930 s
       Matcher:                    2.114 s
         Post Selection Cleanup:   0.176 s
       Scheduler:                  1.904 s
       Regalloc:              2.466 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.074 s
         Build IFG (phys):      0.319 s
         Compute Liveness:      0.857 s
         Regalloc Split:        0.553 s
         Postalloc Copy Rem:    0.238 s
         Merge multidefs:       0.050 s
         Fixup Spills:          0.063 s
         Compact:               0.003 s
         Coalesce 1:            0.245 s
         Coalesce 2:            0.080 s
         Coalesce 3:            0.026 s
         Cache LRG:             0.002 s
         Simplify:              0.041 s
         Select:                0.053 s
       Block Ordering:        0.217 s
       Peephole:              0.024 s
       Code Emission:           1.701 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.689 s
         Build OOP maps:        0.148 s
         Fill buffer:           0.701 s
         Code Installation:     0.058 s
         Other:                 0.106 s
       Other:                 0.604 s

  Total compiled methods    :     1117 methods
    Standard compilation    :     1113 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    88731 bytes
    Standard compilation    :    87925 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2750 bytes/s

  nmethod code size         :  1661976 bytes
  nmethod total size        :  1170624 bytes
