# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 19.569 s/op
# Warmup Iteration   2: 10.372 s/op
# Warmup Iteration   3: 1.339 s/op
# Warmup Iteration   4: 1.400 s/op
# Warmup Iteration   5: 1.334 s/op
# Warmup Iteration   6: 1.301 s/op
# Warmup Iteration   7: 1.337 s/op
# Warmup Iteration   8: 1.649 s/op
# Warmup Iteration   9: 1.304 s/op
# Warmup Iteration  10: 1.308 s/op
Iteration   1: 1.324 s/op
                 ·gc.alloc.rate:      24.409 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.747 s/op
                 ·gc.alloc.rate:      19.856 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.324 s/op
                 ·gc.alloc.rate:      24.862 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.311 s/op
                 ·gc.alloc.rate:      25.064 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.339 s/op
                 ·gc.alloc.rate:      24.649 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.337 s/op
                 ·gc.alloc.rate:      24.572 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.307 s/op
                 ·gc.alloc.rate:      25.110 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.383 s/op
                 ·gc.alloc.rate:      24.044 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.406 s/op
                 ·gc.alloc.rate:      23.764 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.335 s/op
                 ·gc.alloc.rate:      24.604 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4417.941 bytes/s; standard: 20.804 s, 90614 bytes, 1172 methods; osr:  0.671 s, 4261 bytes, 4 methods; nmethods_size: 2242768 bytes; nmethods_code_size: 1584672 bytes}
  C2 {speed: 554.168 bytes/s; standard: 41.869 s, 23647 bytes, 165 methods; osr: 12.351 s, 6400 bytes, 13 methods; nmethods_size: 250488 bytes; nmethods_code_size: 153120 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2559.822 bytes/s; standard:  0.298 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4444.129 bytes/s; standard: 20.506 s, 89850 bytes, 1015 methods; osr:  0.671 s, 4261 bytes, 4 methods; nmethods_size: 2205240 bytes; nmethods_code_size: 1560960 bytes}
  Tier4 {speed: 554.168 bytes/s; standard: 41.869 s, 23647 bytes, 165 methods; osr: 12.351 s, 6400 bytes, 13 methods; nmethods_size: 250488 bytes; nmethods_code_size: 153120 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  79.322 s
    Standard compilation   :  62.673 s, Average : 0.047 s
    Bailed out compilation :   3.627 s, Average : 1.814 s
    On stack replacement   :  13.022 s, Average : 0.766 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.401 s
       Setup time:            0.125 s
       Build HIR:            12.086 s
         Parse:                10.318 s
         Optimize blocks:       0.010 s
         GVN:                   0.649 s
         Null checks elim:      0.352 s
         Range checks elim:     0.293 s
         Other:                 0.465 s
       Emit LIR:              6.288 s
         LIR Gen:               2.111 s
         Linear Scan:           4.111 s
         Other:                 0.066 s
       Code Emission:         1.637 s
       Code Installation:     0.851 s
       Other:                 0.414 s

    C2 Compile Time:       60.083 s
       Parse:                11.236 s
       Optimize:             20.782 s
         Escape Analysis:       1.112 s
           Conn Graph:            0.808 s
           Macro Eliminate:       0.941 s
         GVN 1:                 1.862 s
         Incremental Inline:    0.380 s
           IdealLoop:             0.000 s
          (IGVN:                  0.172 s)
          (Inline:                0.160 s)
          (Prune Useless:         0.042 s)
           Other:                 0.380 s
         Vector:                0.394 s
           Box elimination:     0.393 s
             IGVN:              0.086 s
             Prune Useless:     0.061 s
         Renumber Live:         0.128 s
         IdealLoop:            11.775 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.269 s
         GVN 2:                 0.079 s
         Macro Expand:          1.347 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.374 s
         Other:                 3.060 s
       Matcher:                    4.862 s
         Post Selection Cleanup:   0.285 s
       Scheduler:                  4.032 s
       Regalloc:             13.307 s
         Ctor Chaitin:          0.016 s
         Build IFG (virt):      0.188 s
         Build IFG (phys):      2.059 s
         Compute Liveness:      3.978 s
         Regalloc Split:        1.297 s
         Postalloc Copy Rem:    4.018 s
         Merge multidefs:       0.271 s
         Fixup Spills:          0.097 s
         Compact:               0.031 s
         Coalesce 1:            0.388 s
         Coalesce 2:            0.142 s
         Coalesce 3:            0.096 s
         Cache LRG:             0.025 s
         Simplify:              0.376 s
         Select:                0.592 s
       Block Ordering:        0.323 s
       Peephole:              0.094 s
       Code Emission:           4.559 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.174 s
         Build OOP maps:        1.147 s
         Fill buffer:           1.021 s
         Code Installation:     0.144 s
         Other:                 1.072 s
       Other:                 0.744 s

  Total compiled methods    :     1354 methods
    Standard compilation    :     1337 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   124922 bytes
    Standard compilation    :   114261 bytes
    On stack replacement    :    10661 bytes
  Average compilation speed :     1574 bytes/s

  nmethod code size         :  2493256 bytes
  nmethod total size        :  1737792 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fma":
  N = 10
  mean =      1.381 ±(99.9%) 0.200 s/op

  Histogram, s/op:
    [1.300, 1.350) = 7 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.307 s/op
     p(50.0000) =      1.336 s/op
     p(90.0000) =      1.713 s/op
     p(95.0000) =      1.747 s/op
     p(99.0000) =      1.747 s/op
     p(99.9000) =      1.747 s/op
     p(99.9900) =      1.747 s/op
     p(99.9990) =      1.747 s/op
     p(99.9999) =      1.747 s/op
    p(100.0000) =      1.747 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate":
  24.093 ±(99.9%) 2.338 MB/sec [Average]
  (min, avg, max) = (19.856, 24.093, 25.110), stdev = 1.547
  CI (99.9%): [21.755, 26.432] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm":
  47667309.600 ±(99.9%) 3163.052 B/op [Average]
  (min, avg, max) = (47666648.000, 47667309.600, 47673264.000), stdev = 2092.163
  CI (99.9%): [47664146.548, 47670472.652] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:01:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 19.821 s/op
# Warmup Iteration   2: 19.347 s/op
# Warmup Iteration   3: 12.797 s/op
# Warmup Iteration   4: 19.074 s/op
# Warmup Iteration   5: 19.098 s/op
# Warmup Iteration   6: 19.055 s/op
# Warmup Iteration   7: 19.040 s/op
# Warmup Iteration   8: 19.062 s/op
# Warmup Iteration   9: 19.358 s/op
# Warmup Iteration  10: 12.842 s/op
Iteration   1: 12.828 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7680.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.829 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.986 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.955 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.890 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 12.901 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 12.837 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 12.852 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 12.885 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 12.862 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4523.285 bytes/s; standard: 17.084 s, 76032 bytes, 948 methods; osr:  0.513 s, 3564 bytes, 4 methods; nmethods_size: 1554688 bytes; nmethods_code_size: 1101088 bytes}
  C2 {speed: 622.011 bytes/s; standard: 26.917 s, 16843 bytes, 97 methods; osr:  5.848 s, 3537 bytes, 7 methods; nmethods_size: 129504 bytes; nmethods_code_size: 79808 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2793.588 bytes/s; standard:  0.254 s, 709 bytes, 146 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35024 bytes; nmethods_code_size: 22176 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4548.597 bytes/s; standard: 16.830 s, 75323 bytes, 802 methods; osr:  0.513 s, 3564 bytes, 4 methods; nmethods_size: 1519664 bytes; nmethods_code_size: 1078912 bytes}
  Tier4 {speed: 622.011 bytes/s; standard: 26.917 s, 16843 bytes, 97 methods; osr:  5.848 s, 3537 bytes, 7 methods; nmethods_size: 129504 bytes; nmethods_code_size: 79808 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  53.833 s
    Standard compilation   :  44.000 s, Average : 0.042 s
    Bailed out compilation :   3.471 s, Average : 1.736 s
    On stack replacement   :   6.362 s, Average : 0.578 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       17.551 s
       Setup time:            0.110 s
       Build HIR:             9.614 s
         Parse:                 7.895 s
         Optimize blocks:       0.008 s
         GVN:                   0.675 s
         Null checks elim:      0.314 s
         Range checks elim:     0.318 s
         Other:                 0.404 s
       Emit LIR:              5.003 s
         LIR Gen:               1.873 s
         Linear Scan:           3.064 s
         Other:                 0.066 s
       Code Emission:         1.555 s
       Code Installation:     0.749 s
       Other:                 0.520 s

    C2 Compile Time:       38.619 s
       Parse:                 7.605 s
       Optimize:             13.535 s
         Escape Analysis:       0.961 s
           Conn Graph:            0.669 s
           Macro Eliminate:       0.172 s
         GVN 1:                 1.642 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.112 s
         IdealLoop:             7.183 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.198 s
         GVN 2:                 0.051 s
         Macro Expand:          0.955 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.320 s
         Other:                 2.112 s
       Matcher:                    3.854 s
         Post Selection Cleanup:   0.214 s
       Scheduler:                  2.658 s
       Regalloc:              6.845 s
         Ctor Chaitin:          0.013 s
         Build IFG (virt):      0.129 s
         Build IFG (phys):      1.027 s
         Compute Liveness:      2.121 s
         Regalloc Split:        0.917 s
         Postalloc Copy Rem:    1.659 s
         Merge multidefs:       0.131 s
         Fixup Spills:          0.063 s
         Compact:               0.015 s
         Coalesce 1:            0.316 s
         Coalesce 2:            0.101 s
         Coalesce 3:            0.068 s
         Cache LRG:             0.012 s
         Simplify:              0.165 s
         Select:                0.243 s
       Block Ordering:        0.239 s
       Peephole:              0.055 s
       Code Emission:           3.034 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.845 s
         Build OOP maps:        0.537 s
         Fill buffer:           0.754 s
         Code Installation:     0.127 s
         Other:                 0.771 s
       Other:                 0.667 s

  Total compiled methods    :     1056 methods
    Standard compilation    :     1045 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    99976 bytes
    Standard compilation    :    92875 bytes
    On stack replacement    :     7101 bytes
  Average compilation speed :     1857 bytes/s

  nmethod code size         :  1684192 bytes
  nmethod total size        :  1180896 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar":
  N = 10
  mean =     12.883 ±(99.9%) 0.081 s/op

  Histogram, s/op:
    [12.800, 12.813) = 0 
    [12.813, 12.825) = 0 
    [12.825, 12.838) = 3 
    [12.838, 12.850) = 0 
    [12.850, 12.863) = 2 
    [12.863, 12.875) = 0 
    [12.875, 12.888) = 1 
    [12.888, 12.900) = 1 
    [12.900, 12.913) = 1 
    [12.913, 12.925) = 0 
    [12.925, 12.938) = 0 
    [12.938, 12.950) = 0 
    [12.950, 12.963) = 1 
    [12.963, 12.975) = 0 
    [12.975, 12.988) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.828 s/op
     p(50.0000) =     12.873 s/op
     p(90.0000) =     12.983 s/op
     p(95.0000) =     12.986 s/op
     p(99.0000) =     12.986 s/op
     p(99.9000) =     12.986 s/op
     p(99.9900) =     12.986 s/op
     p(99.9990) =     12.986 s/op
     p(99.9999) =     12.986 s/op
    p(100.0000) =     12.986 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  1732.000 ±(99.9%) 3159.716 B/op [Average]
  (min, avg, max) = (1064.000, 1732.000, 7680.000), stdev = 2089.957
  CI (99.9%): [≈ 0, 4891.716] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:07:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                    Mode  Cnt         Score      Error   Units
lavaMD.LavaMDPatternBenchmark.fma                              ss   10         1.381 ±    0.200    s/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate               ss   10        24.093 ±    2.338  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm          ss   10  47667309.600 ± 3163.052    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.count                    ss   10           ≈ 0             counts
lavaMD.LavaMDPatternBenchmark.fmaScalar                        ss   10        12.883 ±    0.081    s/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate         ss   10        ≈ 10⁻⁴             MB/sec
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm    ss   10      1732.000 ± 3159.716    B/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count              ss   10           ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_12:22:47/lavaMD/LavaMDPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5238.300 bytes/s; standard: 16.666 s, 87446 bytes, 1129 methods; osr:  0.152 s, 649 bytes, 1 methods; nmethods_size: 1799984 bytes; nmethods_code_size: 1271104 bytes}
  C2 {speed: 551.261 bytes/s; standard: 18.150 s, 11420 bytes, 93 methods; osr:  2.851 s, 157 bytes, 3 methods; nmethods_size: 105272 bytes; nmethods_code_size: 67136 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2919.399 bytes/s; standard:  0.232 s, 678 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34376 bytes; nmethods_code_size: 21760 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5270.771 bytes/s; standard: 16.433 s, 86768 bytes, 986 methods; osr:  0.152 s, 649 bytes, 1 methods; nmethods_size: 1765608 bytes; nmethods_code_size: 1249344 bytes}
  Tier4 {speed: 551.261 bytes/s; standard: 18.150 s, 11420 bytes, 93 methods; osr:  2.851 s, 157 bytes, 3 methods; nmethods_size: 105272 bytes; nmethods_code_size: 67136 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  37.892 s
    Standard compilation   :  34.815 s, Average : 0.028 s
    Bailed out compilation :   0.074 s, Average : 0.074 s
    On stack replacement   :   3.003 s, Average : 0.751 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       16.846 s
       Setup time:            0.090 s
       Build HIR:             8.856 s
         Parse:                 7.251 s
         Optimize blocks:       0.007 s
         GVN:                   0.539 s
         Null checks elim:      0.327 s
         Range checks elim:     0.335 s
         Other:                 0.398 s
       Emit LIR:              5.207 s
         LIR Gen:               1.975 s
         Linear Scan:           3.148 s
         Other:                 0.084 s
       Code Emission:         1.638 s
       Code Installation:     0.653 s
       Other:                 0.402 s

    C2 Compile Time:       23.369 s
       Parse:                 5.031 s
       Optimize:              7.625 s
         Escape Analysis:       0.433 s
           Conn Graph:            0.404 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.065 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.014 s
         IdealLoop:             4.180 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.164 s
         GVN 2:                 0.036 s
         Macro Expand:          0.651 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.230 s
         Other:                 0.844 s
       Matcher:                    2.357 s
         Post Selection Cleanup:   0.192 s
       Scheduler:                  1.906 s
       Regalloc:              4.119 s
         Ctor Chaitin:          0.014 s
         Build IFG (virt):      0.096 s
         Build IFG (phys):      0.570 s
         Compute Liveness:      1.113 s
         Regalloc Split:        0.705 s
         Postalloc Copy Rem:    0.836 s
         Merge multidefs:       0.073 s
         Fixup Spills:          0.083 s
         Compact:               0.013 s
         Coalesce 1:            0.217 s
         Coalesce 2:            0.091 s
         Coalesce 3:            0.030 s
         Cache LRG:             0.007 s
         Simplify:              0.087 s
         Select:                0.162 s
         Other:                 0.021 s
       Block Ordering:        0.198 s
       Peephole:              0.033 s
       Code Emission:           1.686 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.597 s
         Build OOP maps:        0.295 s
         Fill buffer:           0.641 s
         Code Installation:     0.056 s
         Other:                 0.096 s
       Other:                 0.358 s

  Total compiled methods    :     1226 methods
    Standard compilation    :     1222 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    99672 bytes
    Standard compilation    :    98866 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2630 bytes/s

  nmethod code size         :  1905256 bytes
  nmethod total size        :  1338240 bytes
