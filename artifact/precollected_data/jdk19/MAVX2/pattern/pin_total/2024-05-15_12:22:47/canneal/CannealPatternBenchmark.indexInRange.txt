# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 96.428 s/op
# Warmup Iteration   2: 26.707 s/op
# Warmup Iteration   3: 16.606 s/op
# Warmup Iteration   4: 16.557 s/op
# Warmup Iteration   5: 15.621 s/op
# Warmup Iteration   6: 16.291 s/op
# Warmup Iteration   7: 16.034 s/op
# Warmup Iteration   8: 15.408 s/op
# Warmup Iteration   9: 15.089 s/op
# Warmup Iteration  10: 16.317 s/op
Iteration   1: 14.904 s/op
                 ·gc.alloc.rate:               299.489 MB/sec
                 ·gc.alloc.rate.norm:          4849840296.000 B/op
                 ·gc.churn.G1_Eden_Space:      304.335 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     196.000 ms

Iteration   2: 15.287 s/op
                 ·gc.alloc.rate:               292.596 MB/sec
                 ·gc.alloc.rate.norm:          4847229752.000 B/op
                 ·gc.churn.G1_Eden_Space:      297.490 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     196.000 ms

Iteration   3: 14.471 s/op
                 ·gc.alloc.rate:      308.753 MB/sec
                 ·gc.alloc.rate.norm: 4849081296.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14.420 s/op
                 ·gc.alloc.rate:               309.855 MB/sec
                 ·gc.alloc.rate.norm:          4848381864.000 B/op
                 ·gc.churn.G1_Eden_Space:      314.963 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     191.000 ms

Iteration   5: 14.682 s/op
                 ·gc.alloc.rate:               304.339 MB/sec
                 ·gc.alloc.rate.norm:          4846418448.000 B/op
                 ·gc.churn.G1_Eden_Space:      309.482 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     192.000 ms

Iteration   6: 14.229 s/op
                 ·gc.alloc.rate:                   313.613 MB/sec
                 ·gc.alloc.rate.norm:              4847660296.000 B/op
                 ·gc.churn.G1_Eden_Space:          318.830 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     4928307200.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 640.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         193.000 ms

Iteration   7: 14.139 s/op
                 ·gc.alloc.rate:               315.690 MB/sec
                 ·gc.alloc.rate.norm:          4847382072.000 B/op
                 ·gc.churn.G1_Eden_Space:      320.961 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     197.000 ms

Iteration   8: 14.040 s/op
                 ·gc.alloc.rate:                   317.814 MB/sec
                 ·gc.alloc.rate.norm:              4848374432.000 B/op
                 ·gc.churn.G1_Eden_Space:          323.053 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     4928307200.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4128.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         188.000 ms

Iteration   9: 14.052 s/op
                 ·gc.alloc.rate:                   317.543 MB/sec
                 ·gc.alloc.rate.norm:              4848635048.000 B/op
                 ·gc.churn.G1_Eden_Space:          322.761 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     4928307200.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1424.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         207.000 ms

Iteration  10: 13.973 s/op
                 ·gc.alloc.rate:               319.286 MB/sec
                 ·gc.alloc.rate.norm:          4848143832.000 B/op
                 ·gc.churn.G1_Eden_Space:      324.565 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 4928307200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     204.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2977.307 bytes/s; standard: 35.065 s, 104120 bytes, 1384 methods; osr:  1.305 s, 4162 bytes, 8 methods; nmethods_size: 2807776 bytes; nmethods_code_size: 2020512 bytes}
  C2 {speed: 494.284 bytes/s; standard: 130.454 s, 62809 bytes, 282 methods; osr: 28.902 s, 15958 bytes, 19 methods; nmethods_size: 606632 bytes; nmethods_code_size: 368032 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2407.780 bytes/s; standard:  0.359 s, 864 bytes, 176 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 42176 bytes; nmethods_code_size: 26688 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2982.982 bytes/s; standard: 34.706 s, 103256 bytes, 1208 methods; osr:  1.305 s, 4162 bytes, 8 methods; nmethods_size: 2765600 bytes; nmethods_code_size: 1993824 bytes}
  Tier4 {speed: 494.284 bytes/s; standard: 130.454 s, 62809 bytes, 282 methods; osr: 28.902 s, 15958 bytes, 19 methods; nmethods_size: 606632 bytes; nmethods_code_size: 368032 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   : 195.850 s
    Standard compilation   : 165.519 s, Average : 0.099 s
    Bailed out compilation :   0.125 s, Average : 0.125 s
    On stack replacement   :  30.206 s, Average : 1.119 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       36.372 s
       Setup time:            0.194 s
       Build HIR:            20.303 s
         Parse:                17.847 s
         Optimize blocks:       0.009 s
         GVN:                   1.096 s
         Null checks elim:      0.465 s
         Range checks elim:     0.265 s
         Other:                 0.621 s
       Emit LIR:             10.297 s
         LIR Gen:               3.010 s
         Linear Scan:           7.193 s
         Other:                 0.093 s
       Code Emission:         2.914 s
       Code Installation:     2.253 s
       Other:                 0.411 s

    C2 Compile Time:      161.643 s
       Parse:                20.283 s
       Optimize:             62.261 s
         Escape Analysis:       3.894 s
           Conn Graph:            2.720 s
           Macro Eliminate:       0.632 s
         GVN 1:                 5.439 s
         Incremental Inline:    0.668 s
           IdealLoop:             0.000 s
          (IGVN:                  0.150 s)
          (Inline:                0.468 s)
          (Prune Useless:         0.051 s)
           Other:                 0.668 s
         Vector:                0.632 s
           Box elimination:     0.631 s
             IGVN:              0.164 s
             Prune Useless:     0.120 s
         Renumber Live:         0.370 s
         IdealLoop:            40.961 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.709 s
         GVN 2:                 0.251 s
         Macro Expand:          2.093 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.637 s
         Other:                 6.606 s
       Matcher:                    9.423 s
         Post Selection Cleanup:   0.604 s
       Scheduler:                  9.352 s
       Regalloc:             47.750 s
         Ctor Chaitin:          0.029 s
         Build IFG (virt):      0.521 s
         Build IFG (phys):      7.098 s
         Compute Liveness:     13.324 s
         Regalloc Split:        3.909 s
         Postalloc Copy Rem:   17.182 s
         Merge multidefs:       1.036 s
         Fixup Spills:          0.132 s
         Compact:               0.125 s
         Coalesce 1:            1.014 s
         Coalesce 2:            0.334 s
         Coalesce 3:            0.304 s
         Cache LRG:             0.096 s
         Simplify:              1.343 s
         Select:                2.057 s
       Block Ordering:        0.604 s
       Peephole:              0.254 s
       Code Emission:          10.078 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.593 s
         Build OOP maps:        4.530 s
         Fill buffer:           1.766 s
         Code Installation:     0.236 s
         Other:                 1.952 s
       Other:                 1.401 s

  Total compiled methods    :     1693 methods
    Standard compilation    :     1666 methods
    On stack replacement    :       27 methods
  Total compiled bytecodes  :   187049 bytes
    Standard compilation    :   166929 bytes
    On stack replacement    :    20120 bytes
  Average compilation speed :      955 bytes/s

  nmethod code size         :  3414408 bytes
  nmethod total size        :  2388544 bytes


Result "jvbench.canneal.CannealPatternBenchmark.indexInRange":
  N = 10
  mean =     14.420 ±(99.9%) 0.648 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 1 
    [14.000, 14.250) = 4 
    [14.250, 14.500) = 2 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 1 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.973 s/op
     p(50.0000) =     14.324 s/op
     p(90.0000) =     15.249 s/op
     p(95.0000) =     15.287 s/op
     p(99.0000) =     15.287 s/op
     p(99.9000) =     15.287 s/op
     p(99.9900) =     15.287 s/op
     p(99.9990) =     15.287 s/op
     p(99.9999) =     15.287 s/op
    p(100.0000) =     15.287 s/op

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate":
  309.898 ±(99.9%) 13.300 MB/sec [Average]
  (min, avg, max) = (292.596, 309.898, 319.286), stdev = 8.797
  CI (99.9%): [296.598, 323.198] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  4848114733.600 ±(99.9%) 1488671.399 B/op [Average]
  (min, avg, max) = (4846418448.000, 4848114733.600, 4849840296.000), stdev = 984663.958
  CI (99.9%): [4846626062.201, 4849603404.999] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  283.644 ±(99.9%) 151.279 MB/sec [Average]
  (min, avg, max) = (≈ 0, 283.644, 324.565), stdev = 100.061
  CI (99.9%): [132.365, 434.922] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  4435476480.000 ±(99.9%) 2356180591.982 B/op [Average]
  (min, avg, max) = (≈ 0, 4435476480.000, 4928307200.000), stdev = 1558467576.101
  CI (99.9%): [2079295888.018, 6791657071.982] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  619.200 ±(99.9%) 1993.237 B/op [Average]
  (min, avg, max) = (≈ 0, 619.200, 4128.000), stdev = 1318.403
  CI (99.9%): [≈ 0, 2612.437] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.900, 1.000), stdev = 0.316
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.time":
  1764.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 176.400, 207.000), stdev = 62.249
  CI (99.9%): [1764.000, 1764.000] (assumes normal distribution)


# Run complete. Total time: 00:12:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt           Score            Error   Units
CannealPatternBenchmark.indexInRange                                     ss   10          14.420 ±          0.648    s/op
CannealPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10         309.898 ±         13.300  MB/sec
CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  4848114733.600 ±    1488671.399    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10         283.644 ±        151.279  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  4435476480.000 ± 2356180591.982    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10          ≈ 10⁻⁴                   MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10         619.200 ±       1993.237    B/op
CannealPatternBenchmark.indexInRange:·gc.count                           ss   10           9.000                   counts
CannealPatternBenchmark.indexInRange:·gc.time                            ss   10        1764.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_12:22:47/canneal/CannealPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5174.244 bytes/s; standard: 16.172 s, 83728 bytes, 1081 methods; osr:  0.135 s, 649 bytes, 1 methods; nmethods_size: 1685912 bytes; nmethods_code_size: 1192640 bytes}
  C2 {speed: 572.101 bytes/s; standard: 17.163 s, 11256 bytes, 86 methods; osr:  2.786 s, 157 bytes, 3 methods; nmethods_size: 101952 bytes; nmethods_code_size: 64704 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2163.136 bytes/s; standard:  0.304 s, 658 bytes, 139 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33448 bytes; nmethods_code_size: 21184 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5231.480 bytes/s; standard: 15.868 s, 83070 bytes, 942 methods; osr:  0.135 s, 649 bytes, 1 methods; nmethods_size: 1652464 bytes; nmethods_code_size: 1171456 bytes}
  Tier4 {speed: 572.101 bytes/s; standard: 17.163 s, 11256 bytes, 86 methods; osr:  2.786 s, 157 bytes, 3 methods; nmethods_size: 101952 bytes; nmethods_code_size: 64704 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  36.256 s
    Standard compilation   :  33.335 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.921 s, Average : 0.730 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       16.262 s
       Setup time:            0.100 s
       Build HIR:             8.871 s
         Parse:                 7.350 s
         Optimize blocks:       0.007 s
         GVN:                   0.470 s
         Null checks elim:      0.306 s
         Range checks elim:     0.309 s
         Other:                 0.429 s
       Emit LIR:              4.641 s
         LIR Gen:               1.754 s
         Linear Scan:           2.842 s
         Other:                 0.045 s
       Code Emission:         1.510 s
       Code Installation:     0.803 s
       Other:                 0.337 s

    C2 Compile Time:       22.376 s
       Parse:                 4.752 s
       Optimize:              7.346 s
         Escape Analysis:       0.414 s
           Conn Graph:            0.389 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.163 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.014 s
         IdealLoop:             3.800 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.153 s
         GVN 2:                 0.033 s
         Macro Expand:          0.715 s
         Barrier Expand:        0.004 s
         Graph Reshape:         0.193 s
         Other:                 0.855 s
       Matcher:                    2.288 s
         Post Selection Cleanup:   0.130 s
       Scheduler:                  1.876 s
       Regalloc:              3.550 s
         Ctor Chaitin:          0.005 s
         Build IFG (virt):      0.110 s
         Build IFG (phys):      0.460 s
         Compute Liveness:      1.149 s
         Regalloc Split:        0.568 s
         Postalloc Copy Rem:    0.797 s
         Merge multidefs:       0.072 s
         Fixup Spills:          0.057 s
         Compact:               0.023 s
         Coalesce 1:            0.193 s
         Coalesce 2:            0.062 s
         Coalesce 3:            0.029 s
         Cache LRG:             0.005 s
         Simplify:              0.074 s
         Select:                0.083 s
       Block Ordering:        0.181 s
       Peephole:              0.053 s
       Code Emission:           1.688 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.625 s
         Build OOP maps:        0.299 s
         Fill buffer:           0.559 s
         Code Installation:     0.073 s
         Other:                 0.133 s
       Other:                 0.404 s

  Total compiled methods    :     1171 methods
    Standard compilation    :     1167 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    95790 bytes
    Standard compilation    :    94984 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2642 bytes/s

  nmethod code size         :  1787864 bytes
  nmethod total size        :  1257344 bytes
