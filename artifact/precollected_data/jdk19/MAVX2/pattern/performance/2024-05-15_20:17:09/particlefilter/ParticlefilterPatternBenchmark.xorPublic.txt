# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19-xor/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7.517 s/op
# Warmup Iteration   2: 7.431 s/op
# Warmup Iteration   3: 4.753 s/op
# Warmup Iteration   4: 4.797 s/op
# Warmup Iteration   5: 4.807 s/op
# Warmup Iteration   6: 4.828 s/op
# Warmup Iteration   7: 4.826 s/op
# Warmup Iteration   8: 4.800 s/op
# Warmup Iteration   9: 4.797 s/op
# Warmup Iteration  10: 4.843 s/op
Iteration   1: 4.793 s/op
                 ·gc.alloc.rate:      6.399 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4.825 s/op
                 ·gc.alloc.rate:      6.361 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4.828 s/op
                 ·gc.alloc.rate:      6.358 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4.828 s/op
                 ·gc.alloc.rate:      6.358 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4.826 s/op
                 ·gc.alloc.rate:      6.359 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4.797 s/op
                 ·gc.alloc.rate:      6.395 MB/sec
                 ·gc.alloc.rate.norm: 35522632.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4.798 s/op
                 ·gc.alloc.rate:                   6.398 MB/sec
                 ·gc.alloc.rate.norm:              35549256.000 B/op
                 ·gc.churn.G1_Eden_Space:          55.109 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     306184192.000 B/op
                 ·gc.churn.G1_Old_Gen:             27.177 MB/sec
                 ·gc.churn.G1_Old_Gen.norm:        150994944.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.091 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 503416.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   8: 4.795 s/op
                 ·gc.alloc.rate:      6.397 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4.793 s/op
                 ·gc.alloc.rate:      6.400 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4.798 s/op
                 ·gc.alloc.rate:      6.393 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 355450.017 bytes/s; standard:  0.214 s, 77128 bytes, 1127 methods; osr:  0.016 s, 4562 bytes, 7 methods; nmethods_size: 2080672 bytes; nmethods_code_size: 1476288 bytes}
  C2 {speed: 42565.235 bytes/s; standard:  0.488 s, 19774 bytes, 146 methods; osr:  0.306 s, 14034 bytes, 17 methods; nmethods_size: 299024 bytes; nmethods_code_size: 195360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 139254.008 bytes/s; standard:  0.005 s, 714 bytes, 147 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35272 bytes; nmethods_code_size: 22336 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 360383.421 bytes/s; standard:  0.209 s, 76414 bytes, 980 methods; osr:  0.016 s, 4562 bytes, 7 methods; nmethods_size: 2045400 bytes; nmethods_code_size: 1453952 bytes}
  Tier4 {speed: 42565.235 bytes/s; standard:  0.488 s, 19774 bytes, 146 methods; osr:  0.306 s, 14034 bytes, 17 methods; nmethods_size: 299024 bytes; nmethods_code_size: 195360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.024 s
    Standard compilation   :   0.702 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.322 s, Average : 0.013 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.228 s
       Setup time:            0.001 s
       Build HIR:             0.100 s
         Parse:                 0.083 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.076 s
         LIR Gen:               0.016 s
         Linear Scan:           0.060 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.795 s
       Parse:                 0.082 s
       Optimize:              0.358 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.015 s
         Incremental Inline:    0.008 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.003 s)
          (Prune Useless:         0.002 s)
           Other:                 0.008 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.001 s
         IdealLoop:             0.277 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.015 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.026 s
       Matcher:                    0.031 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.036 s
       Regalloc:              0.252 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.060 s
         Compute Liveness:      0.070 s
         Regalloc Split:        0.025 s
         Postalloc Copy Rem:    0.024 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.001 s
         Compact:               0.000 s
         Coalesce 1:            0.012 s
         Coalesce 2:            0.009 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.014 s
         Select:                0.016 s
         Other:                 0.008 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.031 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.008 s
         Fill buffer:           0.006 s
         Code Installation:     0.002 s
         Other:                 0.009 s
       Other:                 0.000 s

  Total compiled methods    :     1297 methods
    Standard compilation    :     1273 methods
    On stack replacement    :       24 methods
  Total compiled bytecodes  :   115498 bytes
    Standard compilation    :    96902 bytes
    On stack replacement    :    18596 bytes
  Average compilation speed :   112763 bytes/s

  nmethod code size         :  2379696 bytes
  nmethod total size        :  1671648 bytes


Result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic":
  N = 10
  mean =      4.808 ±(99.9%) 0.024 s/op

  Histogram, s/op:
    [4.790, 4.793) = 0 
    [4.793, 4.795) = 3 
    [4.795, 4.798) = 1 
    [4.798, 4.800) = 2 
    [4.800, 4.803) = 0 
    [4.803, 4.805) = 0 
    [4.805, 4.808) = 0 
    [4.808, 4.810) = 0 
    [4.810, 4.813) = 0 
    [4.813, 4.815) = 0 
    [4.815, 4.818) = 0 
    [4.818, 4.820) = 0 
    [4.820, 4.823) = 0 
    [4.823, 4.825) = 1 
    [4.825, 4.828) = 1 
    [4.828, 4.830) = 2 

  Percentiles, s/op:
      p(0.0000) =      4.793 s/op
     p(50.0000) =      4.798 s/op
     p(90.0000) =      4.828 s/op
     p(95.0000) =      4.828 s/op
     p(99.0000) =      4.828 s/op
     p(99.9000) =      4.828 s/op
     p(99.9900) =      4.828 s/op
     p(99.9990) =      4.828 s/op
     p(99.9999) =      4.828 s/op
    p(100.0000) =      4.828 s/op

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.alloc.rate":
  6.382 ±(99.9%) 0.030 MB/sec [Average]
  (min, avg, max) = (6.358, 6.382, 6.400), stdev = 0.020
  CI (99.9%): [6.352, 6.412] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.alloc.rate.norm":
  35525268.800 ±(99.9%) 12742.310 B/op [Average]
  (min, avg, max) = (35522600.000, 35525268.800, 35549256.000), stdev = 8428.249
  CI (99.9%): [35512526.490, 35538011.110] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Eden_Space":
  5.511 ±(99.9%) 26.347 MB/sec [Average]
  (min, avg, max) = (≈ 0, 5.511, 55.109), stdev = 17.427
  CI (99.9%): [≈ 0, 31.858] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Eden_Space.norm":
  30618419.200 ±(99.9%) 146383985.715 B/op [Average]
  (min, avg, max) = (≈ 0, 30618419.200, 306184192.000), stdev = 96823943.026
  CI (99.9%): [≈ 0, 177002404.915] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Old_Gen":
  2.718 ±(99.9%) 12.993 MB/sec [Average]
  (min, avg, max) = (≈ 0, 2.718, 27.177), stdev = 8.594
  CI (99.9%): [≈ 0, 15.711] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Old_Gen.norm":
  15099494.400 ±(99.9%) 72189362.818 B/op [Average]
  (min, avg, max) = (≈ 0, 15099494.400, 150994944.000), stdev = 47748793.821
  CI (99.9%): [≈ 0, 87288857.218] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Survivor_Space":
  0.009 ±(99.9%) 0.043 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.009, 0.091), stdev = 0.029
  CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Survivor_Space.norm":
  50341.600 ±(99.9%) 240678.789 B/op [Average]
  (min, avg, max) = (≈ 0, 50341.600, 503416.000), stdev = 159194.117
  CI (99.9%): [≈ 0, 291020.389] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorPublic:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  Mode  Cnt         Score           Error   Units
ParticlefilterPatternBenchmark.xorPublic                                     ss   10         4.808 ±         0.024    s/op
ParticlefilterPatternBenchmark.xorPublic:·gc.alloc.rate                      ss   10         6.382 ±         0.030  MB/sec
ParticlefilterPatternBenchmark.xorPublic:·gc.alloc.rate.norm                 ss   10  35525268.800 ±     12742.310    B/op
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Eden_Space             ss   10         5.511 ±        26.347  MB/sec
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Eden_Space.norm        ss   10  30618419.200 ± 146383985.715    B/op
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Old_Gen                ss   10         2.718 ±        12.993  MB/sec
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Old_Gen.norm           ss   10  15099494.400 ±  72189362.818    B/op
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Survivor_Space         ss   10         0.009 ±         0.043  MB/sec
ParticlefilterPatternBenchmark.xorPublic:·gc.churn.G1_Survivor_Space.norm    ss   10     50341.600 ±    240678.789    B/op
ParticlefilterPatternBenchmark.xorPublic:·gc.count                           ss   10         1.000                  counts
ParticlefilterPatternBenchmark.xorPublic:·gc.time                            ss   10         1.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_20:17:09/particlefilter/ParticlefilterPatternBenchmark.xorPublic.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 470859.104 bytes/s; standard:  0.173 s, 81510 bytes, 1059 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1630808 bytes; nmethods_code_size: 1155648 bytes}
  C2 {speed: 69936.329 bytes/s; standard:  0.108 s, 7826 bytes, 92 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 69184 bytes; nmethods_code_size: 44704 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 149412.906 bytes/s; standard:  0.004 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 479381.084 bytes/s; standard:  0.169 s, 80842 bytes, 918 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1596896 bytes; nmethods_code_size: 1134176 bytes}
  Tier4 {speed: 69936.329 bytes/s; standard:  0.108 s, 7826 bytes, 92 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 69184 bytes; nmethods_code_size: 44704 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.287 s
    Standard compilation   :   0.281 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.171 s
       Setup time:            0.001 s
       Build HIR:             0.067 s
         Parse:                 0.051 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.063 s
         LIR Gen:               0.013 s
         Linear Scan:           0.050 s
         Other:                 0.001 s
       Code Emission:         0.019 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.115 s
       Parse:                 0.023 s
       Optimize:              0.049 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.033 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.014 s
       Regalloc:              0.061 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.012 s
         Compute Liveness:      0.019 s
         Regalloc Split:        0.008 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.007 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s

  Total compiled methods    :     1154 methods
    Standard compilation    :     1151 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    89493 bytes
    Standard compilation    :    89336 bytes
    On stack replacement    :      157 bytes
  Average compilation speed :   311544 bytes/s

  nmethod code size         :  1699992 bytes
  nmethod total size        :  1200352 bytes
