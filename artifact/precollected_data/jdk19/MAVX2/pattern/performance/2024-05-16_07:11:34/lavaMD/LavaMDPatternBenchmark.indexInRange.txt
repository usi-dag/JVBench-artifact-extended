# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.614 s/op
# Warmup Iteration   2: 1.218 s/op
# Warmup Iteration   3: 0.323 s/op
# Warmup Iteration   4: 0.324 s/op
# Warmup Iteration   5: 0.324 s/op
# Warmup Iteration   6: 0.325 s/op
# Warmup Iteration   7: 0.324 s/op
# Warmup Iteration   8: 0.322 s/op
# Warmup Iteration   9: 0.322 s/op
# Warmup Iteration  10: 0.324 s/op
Iteration   1: 0.324 s/op
                 ·gc.alloc.rate:      55.115 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.331 s/op
                 ·gc.alloc.rate:      54.675 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.322 s/op
                 ·gc.alloc.rate:      55.229 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.324 s/op
                 ·gc.alloc.rate:      55.155 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.324 s/op
                 ·gc.alloc.rate:      55.110 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.324 s/op
                 ·gc.alloc.rate:      55.146 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.324 s/op
                 ·gc.alloc.rate:      55.141 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.325 s/op
                 ·gc.alloc.rate:      55.090 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.324 s/op
                 ·gc.alloc.rate:      55.136 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.323 s/op
                 ·gc.alloc.rate:      55.203 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 387493.086 bytes/s; standard:  0.250 s, 95917 bytes, 1232 methods; osr:  0.011 s, 5364 bytes, 5 methods; nmethods_size: 2419776 bytes; nmethods_code_size: 1708640 bytes}
  C2 {speed: 72125.115 bytes/s; standard:  0.319 s, 24570 bytes, 167 methods; osr:  0.109 s, 6268 bytes, 11 methods; nmethods_size: 251840 bytes; nmethods_code_size: 153312 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 128192.839 bytes/s; standard:  0.006 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 393584.037 bytes/s; standard:  0.244 s, 95148 bytes, 1074 methods; osr:  0.011 s, 5364 bytes, 5 methods; nmethods_size: 2382000 bytes; nmethods_code_size: 1684768 bytes}
  Tier4 {speed: 72125.115 bytes/s; standard:  0.319 s, 24570 bytes, 167 methods; osr:  0.109 s, 6268 bytes, 11 methods; nmethods_size: 251840 bytes; nmethods_code_size: 153312 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.689 s
    Standard compilation   :   0.569 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.119 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.259 s
       Setup time:            0.001 s
       Build HIR:             0.116 s
         Parse:                 0.096 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.085 s
         LIR Gen:               0.018 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.027 s
       Code Installation:     0.023 s
       Other:                 0.007 s

    C2 Compile Time:        0.428 s
       Parse:                 0.076 s
       Optimize:              0.145 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.003 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.003 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.091 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.007 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.018 s
       Matcher:                    0.028 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.125 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.028 s
         Compute Liveness:      0.039 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.017 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.008 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.006 s
         Code Installation:     0.003 s
         Other:                 0.002 s

  Total compiled methods    :     1415 methods
    Standard compilation    :     1399 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   132119 bytes
    Standard compilation    :   120487 bytes
    On stack replacement    :    11632 bytes
  Average compilation speed :   191640 bytes/s

  nmethod code size         :  2671616 bytes
  nmethod total size        :  1861952 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange":
  N = 10
  mean =      0.324 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [0.322, 0.323) = 1 
    [0.323, 0.323) = 1 
    [0.323, 0.324) = 0 
    [0.324, 0.324) = 4 
    [0.324, 0.325) = 2 
    [0.325, 0.325) = 1 
    [0.325, 0.326) = 0 
    [0.326, 0.326) = 0 
    [0.326, 0.327) = 0 
    [0.327, 0.327) = 0 
    [0.327, 0.328) = 0 
    [0.328, 0.328) = 0 
    [0.328, 0.329) = 0 
    [0.329, 0.329) = 0 
    [0.329, 0.330) = 0 
    [0.330, 0.330) = 0 
    [0.330, 0.331) = 0 
    [0.331, 0.331) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.322 s/op
     p(50.0000) =      0.324 s/op
     p(90.0000) =      0.330 s/op
     p(95.0000) =      0.331 s/op
     p(99.0000) =      0.331 s/op
     p(99.9000) =      0.331 s/op
     p(99.9900) =      0.331 s/op
     p(99.9990) =      0.331 s/op
     p(99.9999) =      0.331 s/op
    p(100.0000) =      0.331 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate":
  55.100 ±(99.9%) 0.234 MB/sec [Average]
  (min, avg, max) = (54.675, 55.100, 55.229), stdev = 0.155
  CI (99.9%): [54.865, 55.334] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  47666104.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (47666104.000, 47666104.000, 47666104.000), stdev = 0.001
  CI (99.9%): [47666104.000, 47666104.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                       Mode  Cnt         Score   Error   Units
lavaMD.LavaMDPatternBenchmark.indexInRange                        ss   10         0.324 ± 0.004    s/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate         ss   10        55.100 ± 0.234  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm    ss   10  47666104.000 ± 0.001    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count              ss   10           ≈ 0          counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-16_07:11:34/lavaMD/LavaMDPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 495463.667 bytes/s; standard:  0.151 s, 74583 bytes, 1007 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1492608 bytes; nmethods_code_size: 1058336 bytes}
  C2 {speed: 73302.636 bytes/s; standard:  0.135 s, 10182 bytes, 79 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 89104 bytes; nmethods_code_size: 56896 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 145322.655 bytes/s; standard:  0.005 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 506492.422 bytes/s; standard:  0.146 s, 73915 bytes, 866 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1458696 bytes; nmethods_code_size: 1036864 bytes}
  Tier4 {speed: 73302.636 bytes/s; standard:  0.135 s, 10182 bytes, 79 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 89104 bytes; nmethods_code_size: 56896 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.292 s
    Standard compilation   :   0.286 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.149 s
       Setup time:            0.001 s
       Build HIR:             0.059 s
         Parse:                 0.045 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.055 s
         LIR Gen:               0.011 s
         Linear Scan:           0.043 s
         Other:                 0.001 s
       Code Emission:         0.017 s
       Code Installation:     0.014 s
       Other:                 0.003 s

    C2 Compile Time:        0.142 s
       Parse:                 0.019 s
       Optimize:              0.045 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.004 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.030 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.012 s
       Regalloc:              0.046 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.009 s
         Compute Liveness:      0.015 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.007 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1089 methods
    Standard compilation    :     1086 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    84922 bytes
    Standard compilation    :    84765 bytes
    On stack replacement    :      157 bytes
  Average compilation speed :   291250 bytes/s

  nmethod code size         :  1581712 bytes
  nmethod total size        :  1115232 bytes
