# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.623 s/op
# Warmup Iteration   2: 1.217 s/op
# Warmup Iteration   3: 0.324 s/op
# Warmup Iteration   4: 0.323 s/op
# Warmup Iteration   5: 0.323 s/op
# Warmup Iteration   6: 0.324 s/op
# Warmup Iteration   7: 0.324 s/op
# Warmup Iteration   8: 0.323 s/op
# Warmup Iteration   9: 0.323 s/op
# Warmup Iteration  10: 0.323 s/op
Iteration   1: 0.324 s/op
                 ·gc.alloc.rate:      55.133 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.324 s/op
                 ·gc.alloc.rate:      55.128 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.326 s/op
                 ·gc.alloc.rate:               55.055 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      915.101 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 792723456.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   4: 0.323 s/op
                 ·gc.alloc.rate:      55.158 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.322 s/op
                 ·gc.alloc.rate:      55.244 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.323 s/op
                 ·gc.alloc.rate:      55.199 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.324 s/op
                 ·gc.alloc.rate:      55.138 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.324 s/op
                 ·gc.alloc.rate:      55.120 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.323 s/op
                 ·gc.alloc.rate:      55.161 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.322 s/op
                 ·gc.alloc.rate:      55.238 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 361050.986 bytes/s; standard:  0.259 s, 94478 bytes, 1229 methods; osr:  0.018 s, 5484 bytes, 5 methods; nmethods_size: 2443024 bytes; nmethods_code_size: 1719328 bytes}
  C2 {speed: 72059.169 bytes/s; standard:  0.325 s, 24732 bytes, 167 methods; osr:  0.105 s, 6309 bytes, 12 methods; nmethods_size: 255856 bytes; nmethods_code_size: 155776 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 136825.777 bytes/s; standard:  0.006 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 365697.029 bytes/s; standard:  0.253 s, 93709 bytes, 1071 methods; osr:  0.018 s, 5484 bytes, 5 methods; nmethods_size: 2405248 bytes; nmethods_code_size: 1695456 bytes}
  Tier4 {speed: 72059.169 bytes/s; standard:  0.325 s, 24732 bytes, 167 methods; osr:  0.105 s, 6309 bytes, 12 methods; nmethods_size: 255856 bytes; nmethods_code_size: 155776 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.708 s
    Standard compilation   :   0.584 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.123 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.274 s
       Setup time:            0.001 s
       Build HIR:             0.122 s
         Parse:                 0.101 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.092 s
         LIR Gen:               0.019 s
         Linear Scan:           0.072 s
         Other:                 0.001 s
       Code Emission:         0.030 s
       Code Installation:     0.023 s
       Other:                 0.007 s

    C2 Compile Time:        0.431 s
       Parse:                 0.074 s
       Optimize:              0.154 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.003 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.003 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.096 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.011 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.017 s
       Matcher:                    0.026 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.124 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.028 s
         Compute Liveness:      0.039 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.008 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.006 s
         Code Installation:     0.002 s
         Other:                 0.002 s

  Total compiled methods    :     1413 methods
    Standard compilation    :     1396 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   131003 bytes
    Standard compilation    :   119210 bytes
    On stack replacement    :    11793 bytes
  Average compilation speed :   185127 bytes/s

  nmethod code size         :  2698880 bytes
  nmethod total size        :  1875104 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fma":
  N = 10
  mean =      0.324 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.322, 0.322) = 0 
    [0.322, 0.323) = 2 
    [0.323, 0.323) = 0 
    [0.323, 0.323) = 1 
    [0.323, 0.323) = 0 
    [0.323, 0.324) = 2 
    [0.324, 0.324) = 0 
    [0.324, 0.324) = 3 
    [0.324, 0.324) = 1 
    [0.324, 0.325) = 0 
    [0.325, 0.325) = 0 
    [0.325, 0.325) = 0 
    [0.325, 0.325) = 0 
    [0.325, 0.326) = 0 
    [0.326, 0.326) = 1 
    [0.326, 0.326) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.322 s/op
     p(50.0000) =      0.324 s/op
     p(90.0000) =      0.325 s/op
     p(95.0000) =      0.326 s/op
     p(99.0000) =      0.326 s/op
     p(99.9000) =      0.326 s/op
     p(99.9900) =      0.326 s/op
     p(99.9990) =      0.326 s/op
     p(99.9999) =      0.326 s/op
    p(100.0000) =      0.326 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate":
  55.157 ±(99.9%) 0.086 MB/sec [Average]
  (min, avg, max) = (55.055, 55.157, 55.244), stdev = 0.057
  CI (99.9%): [55.071, 55.244] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space":
  91.510 ±(99.9%) 437.502 MB/sec [Average]
  (min, avg, max) = (≈ 0, 91.510, 915.101), stdev = 289.380
  CI (99.9%): [≈ 0, 529.012] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm":
  79272345.600 ±(99.9%) 378994154.795 B/op [Average]
  (min, avg, max) = (≈ 0, 79272345.600, 792723456.000), stdev = 250681167.560
  CI (99.9%): [≈ 0, 458266500.395] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:00:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3.965 s/op
# Warmup Iteration   2: 3.950 s/op
# Warmup Iteration   3: 3.909 s/op
# Warmup Iteration   4: 3.909 s/op
# Warmup Iteration   5: 3.909 s/op
# Warmup Iteration   6: 3.910 s/op
# Warmup Iteration   7: 3.911 s/op
# Warmup Iteration   8: 3.936 s/op
# Warmup Iteration   9: 3.935 s/op
# Warmup Iteration  10: 3.932 s/op
Iteration   1: 3.929 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.921 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.925 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.938 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.922 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.912 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.912 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.912 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.912 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.910 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 480764.803 bytes/s; standard:  0.157 s, 74420 bytes, 935 methods; osr:  0.005 s, 3564 bytes, 4 methods; nmethods_size: 1572992 bytes; nmethods_code_size: 1111584 bytes}
  C2 {speed: 94496.595 bytes/s; standard:  0.181 s, 16450 bytes, 98 methods; osr:  0.030 s, 3462 bytes, 6 methods; nmethods_size: 129616 bytes; nmethods_code_size: 79936 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 145321.354 bytes/s; standard:  0.005 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 490940.278 bytes/s; standard:  0.152 s, 73726 bytes, 792 methods; osr:  0.005 s, 3564 bytes, 4 methods; nmethods_size: 1538680 bytes; nmethods_code_size: 1089856 bytes}
  Tier4 {speed: 94496.595 bytes/s; standard:  0.181 s, 16450 bytes, 98 methods; osr:  0.030 s, 3462 bytes, 6 methods; nmethods_size: 129616 bytes; nmethods_code_size: 79936 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.373 s
    Standard compilation   :   0.338 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.035 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.161 s
       Setup time:            0.001 s
       Build HIR:             0.070 s
         Parse:                 0.056 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.055 s
         LIR Gen:               0.011 s
         Linear Scan:           0.043 s
         Other:                 0.001 s
       Code Emission:         0.017 s
       Code Installation:     0.015 s
       Other:                 0.004 s

    C2 Compile Time:        0.212 s
       Parse:                 0.030 s
       Optimize:              0.076 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.044 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.013 s
       Matcher:                    0.014 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.016 s
       Regalloc:              0.061 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.014 s
         Compute Liveness:      0.021 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.011 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1043 methods
    Standard compilation    :     1033 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    97896 bytes
    Standard compilation    :    90870 bytes
    On stack replacement    :     7026 bytes
  Average compilation speed :   262153 bytes/s

  nmethod code size         :  1702608 bytes
  nmethod total size        :  1191520 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar":
  N = 10
  mean =      3.919 ±(99.9%) 0.014 s/op

  Histogram, s/op:
    [3.900, 3.903) = 0 
    [3.903, 3.905) = 0 
    [3.905, 3.907) = 0 
    [3.907, 3.910) = 1 
    [3.910, 3.913) = 4 
    [3.913, 3.915) = 0 
    [3.915, 3.918) = 0 
    [3.918, 3.920) = 0 
    [3.920, 3.923) = 2 
    [3.923, 3.925) = 1 
    [3.925, 3.927) = 0 
    [3.927, 3.930) = 1 
    [3.930, 3.933) = 0 
    [3.933, 3.935) = 0 
    [3.935, 3.938) = 0 
    [3.938, 3.940) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.910 s/op
     p(50.0000) =      3.917 s/op
     p(90.0000) =      3.937 s/op
     p(95.0000) =      3.938 s/op
     p(99.0000) =      3.938 s/op
     p(99.9000) =      3.938 s/op
     p(99.9900) =      3.938 s/op
     p(99.9990) =      3.938 s/op
     p(99.9999) =      3.938 s/op
    p(100.0000) =      3.938 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                       Mode  Cnt         Score           Error   Units
lavaMD.LavaMDPatternBenchmark.fma                                 ss   10         0.324 ±         0.001    s/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate                  ss   10        55.157 ±         0.086  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm             ss   10  47668758.400 ±     12690.454    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space         ss   10        91.510 ±       437.502  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm    ss   10  79272345.600 ± 378994154.795    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.count                       ss   10         1.000                  counts
lavaMD.LavaMDPatternBenchmark.fma:·gc.time                        ss   10         1.000                      ms
lavaMD.LavaMDPatternBenchmark.fmaScalar                           ss   10         3.919 ±         0.014    s/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate            ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm       ss   10       507.200 ±        15.299    B/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count                 ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-16_07:11:34/lavaMD/LavaMDPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 463835.257 bytes/s; standard:  0.193 s, 89591 bytes, 1155 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1843344 bytes; nmethods_code_size: 1303936 bytes}
  C2 {speed: 74201.102 bytes/s; standard:  0.150 s, 11338 bytes, 93 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 96568 bytes; nmethods_code_size: 61472 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 139514.628 bytes/s; standard:  0.005 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 472206.854 bytes/s; standard:  0.188 s, 88908 bytes, 1011 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1808720 bytes; nmethods_code_size: 1282016 bytes}
  Tier4 {speed: 74201.102 bytes/s; standard:  0.150 s, 11338 bytes, 93 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 96568 bytes; nmethods_code_size: 61472 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.348 s
    Standard compilation   :   0.343 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.192 s
       Setup time:            0.001 s
       Build HIR:             0.076 s
         Parse:                 0.058 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.071 s
         LIR Gen:               0.015 s
         Linear Scan:           0.055 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.018 s
       Other:                 0.004 s

    C2 Compile Time:        0.155 s
       Parse:                 0.022 s
       Optimize:              0.047 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.031 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.005 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.013 s
       Regalloc:              0.050 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.010 s
         Compute Liveness:      0.017 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.010 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s

  Total compiled methods    :     1251 methods
    Standard compilation    :     1248 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   101644 bytes
    Standard compilation    :   100929 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   291877 bytes/s

  nmethod code size         :  1939912 bytes
  nmethod total size        :  1365408 bytes
