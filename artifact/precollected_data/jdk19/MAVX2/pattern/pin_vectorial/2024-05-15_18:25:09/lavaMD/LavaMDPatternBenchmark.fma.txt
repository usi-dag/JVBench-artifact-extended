# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.644 s/op
# Warmup Iteration   2: 3.637 s/op
# Warmup Iteration   3: 0.869 s/op
# Warmup Iteration   4: 0.858 s/op
# Warmup Iteration   5: 0.852 s/op
# Warmup Iteration   6: 0.846 s/op
# Warmup Iteration   7: 0.848 s/op
# Warmup Iteration   8: 0.847 s/op
# Warmup Iteration   9: 0.847 s/op
# Warmup Iteration  10: 0.850 s/op
Iteration   1: 0.848 s/op
                 ·gc.alloc.rate:      32.969 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.849 s/op
                 ·gc.alloc.rate:      33.501 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.849 s/op
                 ·gc.alloc.rate:      33.399 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.851 s/op
                 ·gc.alloc.rate:      33.528 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.845 s/op
                 ·gc.alloc.rate:      33.589 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.847 s/op
                 ·gc.alloc.rate:      33.429 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.849 s/op
                 ·gc.alloc.rate:      33.488 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.848 s/op
                 ·gc.alloc.rate:      33.341 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.847 s/op
                 ·gc.alloc.rate:      33.556 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.853 s/op
                 ·gc.alloc.rate:                   33.355 MB/sec
                 ·gc.alloc.rate.norm:              47693280.000 B/op
                 ·gc.churn.G1_Eden_Space:          525.074 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     750780416.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.029 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 40872.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         3.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 7112.616 bytes/s; standard: 13.492 s, 94256 bytes, 1222 methods; osr:  0.359 s, 4261 bytes, 4 methods; nmethods_size: 2353904 bytes; nmethods_code_size: 1662688 bytes}
  C2 {speed: 968.278 bytes/s; standard: 25.738 s, 24211 bytes, 169 methods; osr:  5.860 s, 6384 bytes, 13 methods; nmethods_size: 253152 bytes; nmethods_code_size: 154656 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 6177.660 bytes/s; standard:  0.124 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 7121.095 bytes/s; standard: 13.367 s, 93487 bytes, 1064 methods; osr:  0.359 s, 4261 bytes, 4 methods; nmethods_size: 2316128 bytes; nmethods_code_size: 1638816 bytes}
  Tier4 {speed: 968.278 bytes/s; standard: 25.738 s, 24211 bytes, 169 methods; osr:  5.860 s, 6384 bytes, 13 methods; nmethods_size: 253152 bytes; nmethods_code_size: 154656 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  45.545 s
    Standard compilation   :  39.229 s, Average : 0.028 s
    Bailed out compilation :   0.096 s, Average : 0.048 s
    On stack replacement   :   6.219 s, Average : 0.366 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.915 s
       Setup time:            0.028 s
       Build HIR:             9.143 s
         Parse:                 7.971 s
         Optimize blocks:       0.004 s
         GVN:                   0.373 s
         Null checks elim:      0.310 s
         Range checks elim:     0.183 s
         Other:                 0.302 s
       Emit LIR:              2.867 s
         LIR Gen:               1.600 s
         Linear Scan:           1.206 s
         Other:                 0.061 s
       Code Emission:         0.962 s
       Code Installation:     0.658 s
       Other:                 0.255 s

    C2 Compile Time:       33.330 s
       Parse:                11.353 s
       Optimize:             10.710 s
         Escape Analysis:       1.407 s
           Conn Graph:            1.205 s
           Macro Eliminate:       0.160 s
         GVN 1:                 1.376 s
         Incremental Inline:    0.183 s
           IdealLoop:             0.000 s
          (IGVN:                  0.034 s)
          (Inline:                0.138 s)
          (Prune Useless:         0.009 s)
           Other:                 0.183 s
         Vector:                0.333 s
           Box elimination:     0.332 s
             IGVN:              0.043 s
             Prune Useless:     0.005 s
         Renumber Live:         0.041 s
         IdealLoop:             5.067 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.139 s
         GVN 2:                 0.047 s
         Macro Expand:          0.836 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.218 s
         Other:                 1.064 s
       Matcher:                    2.309 s
         Post Selection Cleanup:   0.243 s
       Scheduler:                  2.175 s
       Regalloc:              2.698 s
         Ctor Chaitin:          0.011 s
         Build IFG (virt):      0.096 s
         Build IFG (phys):      0.437 s
         Compute Liveness:      0.883 s
         Regalloc Split:        0.588 s
         Postalloc Copy Rem:    0.343 s
         Merge multidefs:       0.049 s
         Fixup Spills:          0.062 s
         Compact:               0.003 s
         Coalesce 1:            0.205 s
         Coalesce 2:            0.053 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.002 s
         Simplify:              0.044 s
         Select:                0.041 s
       Block Ordering:        0.187 s
       Peephole:              0.024 s
       Code Emission:           3.411 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.884 s
         Build OOP maps:        0.278 s
         Fill buffer:           0.944 s
         Code Installation:     0.201 s
         Other:                 1.103 s
       Other:                 0.262 s

  Total compiled methods    :     1408 methods
    Standard compilation    :     1391 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   129112 bytes
    Standard compilation    :   118467 bytes
    On stack replacement    :    10645 bytes
  Average compilation speed :     2834 bytes/s

  nmethod code size         :  2607056 bytes
  nmethod total size        :  1817344 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fma":
  N = 10
  mean =      0.849 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [0.845, 0.845) = 1 
    [0.845, 0.846) = 0 
    [0.846, 0.846) = 0 
    [0.846, 0.847) = 1 
    [0.847, 0.847) = 1 
    [0.847, 0.848) = 2 
    [0.848, 0.848) = 0 
    [0.848, 0.849) = 2 
    [0.849, 0.849) = 1 
    [0.849, 0.850) = 0 
    [0.850, 0.850) = 0 
    [0.850, 0.851) = 0 
    [0.851, 0.851) = 1 
    [0.851, 0.852) = 0 
    [0.852, 0.852) = 0 
    [0.852, 0.853) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.845 s/op
     p(50.0000) =      0.848 s/op
     p(90.0000) =      0.853 s/op
     p(95.0000) =      0.853 s/op
     p(99.0000) =      0.853 s/op
     p(99.9000) =      0.853 s/op
     p(99.9900) =      0.853 s/op
     p(99.9990) =      0.853 s/op
     p(99.9999) =      0.853 s/op
    p(100.0000) =      0.853 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate":
  33.416 ±(99.9%) 0.268 MB/sec [Average]
  (min, avg, max) = (32.969, 33.416, 33.589), stdev = 0.178
  CI (99.9%): [33.147, 33.684] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm":
  47669972.800 ±(99.9%) 12773.896 B/op [Average]
  (min, avg, max) = (47666648.000, 47669972.800, 47693280.000), stdev = 8449.142
  CI (99.9%): [47657198.904, 47682746.696] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space":
  52.507 ±(99.9%) 251.033 MB/sec [Average]
  (min, avg, max) = (≈ 0, 52.507, 525.074), stdev = 166.043
  CI (99.9%): [≈ 0, 303.541] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm":
  75078041.600 ±(99.9%) 358941554.013 B/op [Average]
  (min, avg, max) = (≈ 0, 75078041.600, 750780416.000), stdev = 237417613.721
  CI (99.9%): [≈ 0, 434019595.613] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.014 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.003, 0.029), stdev = 0.009
  CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Survivor_Space.norm":
  4087.200 ±(99.9%) 19540.546 B/op [Average]
  (min, avg, max) = (≈ 0, 4087.200, 40872.000), stdev = 12924.861
  CI (99.9%): [≈ 0, 23627.746] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.300, 3.000), stdev = 0.949
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:01:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 11.140 s/op
# Warmup Iteration   2: 10.968 s/op
# Warmup Iteration   3: 9.742 s/op
# Warmup Iteration   4: 10.968 s/op
# Warmup Iteration   5: 10.977 s/op
# Warmup Iteration   6: 10.964 s/op
# Warmup Iteration   7: 10.967 s/op
# Warmup Iteration   8: 10.972 s/op
# Warmup Iteration   9: 10.968 s/op
# Warmup Iteration  10: 9.949 s/op
Iteration   1: 9.943 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7712.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.947 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.946 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.949 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.945 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.945 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.942 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.944 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.943 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.952 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6346.311 bytes/s; standard: 11.648 s, 75666 bytes, 945 methods; osr:  1.010 s, 4667 bytes, 5 methods; nmethods_size: 1589840 bytes; nmethods_code_size: 1122656 bytes}
  C2 {speed: 880.735 bytes/s; standard: 21.790 s, 17723 bytes, 95 methods; osr:  1.872 s, 3117 bytes, 6 methods; nmethods_size: 134880 bytes; nmethods_code_size: 83328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3720.228 bytes/s; standard:  0.184 s, 684 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33816 bytes; nmethods_code_size: 21408 bytes}
  Tier2 {speed: 26401.613 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.042 s, 1103 bytes, 1 methods; nmethods_size: 7800 bytes; nmethods_code_size: 4640 bytes}
  Tier3 {speed: 6317.754 bytes/s; standard: 11.464 s, 74982 bytes, 804 methods; osr:  0.968 s, 3564 bytes, 4 methods; nmethods_size: 1548224 bytes; nmethods_code_size: 1096608 bytes}
  Tier4 {speed: 880.735 bytes/s; standard: 21.790 s, 17723 bytes, 95 methods; osr:  1.872 s, 3117 bytes, 6 methods; nmethods_size: 134880 bytes; nmethods_code_size: 83328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  36.320 s
    Standard compilation   :  33.438 s, Average : 0.032 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.882 s, Average : 0.262 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.631 s
       Setup time:            0.038 s
       Build HIR:             7.787 s
         Parse:                 6.634 s
         Optimize blocks:       0.028 s
         GVN:                   0.335 s
         Null checks elim:      0.316 s
         Range checks elim:     0.219 s
         Other:                 0.256 s
       Emit LIR:              2.451 s
         LIR Gen:               1.264 s
         Linear Scan:           1.155 s
         Other:                 0.032 s
       Code Emission:         1.060 s
       Code Installation:     1.094 s
       Other:                 0.201 s

    C2 Compile Time:       25.405 s
       Parse:                 7.949 s
       Optimize:              8.985 s
         Escape Analysis:       2.052 s
           Conn Graph:            1.886 s
           Macro Eliminate:       0.173 s
         GVN 1:                 1.048 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.031 s
         IdealLoop:             3.776 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.132 s
         GVN 2:                 0.026 s
         Macro Expand:          0.663 s
         Barrier Expand:        0.009 s
         Graph Reshape:         0.303 s
         Other:                 0.944 s
       Matcher:                    1.733 s
         Post Selection Cleanup:   0.153 s
       Scheduler:                  1.598 s
       Regalloc:              2.191 s
         Ctor Chaitin:          0.011 s
         Build IFG (virt):      0.072 s
         Build IFG (phys):      0.339 s
         Compute Liveness:      0.767 s
         Regalloc Split:        0.426 s
         Postalloc Copy Rem:    0.242 s
         Merge multidefs:       0.031 s
         Fixup Spills:          0.054 s
         Compact:               0.002 s
         Coalesce 1:            0.219 s
         Coalesce 2:            0.066 s
         Coalesce 3:            0.019 s
         Cache LRG:             0.001 s
         Simplify:              0.022 s
         Select:                0.058 s
       Block Ordering:        0.128 s
       Peephole:              0.013 s
       Code Emission:           2.342 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.740 s
         Build OOP maps:        0.130 s
         Fill buffer:           0.679 s
         Code Installation:     0.152 s
         Other:                 0.641 s
       Other:                 0.314 s

  Total compiled methods    :     1051 methods
    Standard compilation    :     1040 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :   101173 bytes
    Standard compilation    :    93389 bytes
    On stack replacement    :     7784 bytes
  Average compilation speed :     2785 bytes/s

  nmethod code size         :  1724720 bytes
  nmethod total size        :  1205984 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar":
  N = 10
  mean =      9.945 ±(99.9%) 0.005 s/op

  Histogram, s/op:
    [9.942, 9.943) = 1 
    [9.943, 9.943) = 2 
    [9.943, 9.944) = 0 
    [9.944, 9.944) = 0 
    [9.944, 9.945) = 1 
    [9.945, 9.945) = 2 
    [9.945, 9.946) = 0 
    [9.946, 9.946) = 1 
    [9.946, 9.947) = 0 
    [9.947, 9.947) = 0 
    [9.947, 9.948) = 1 
    [9.948, 9.948) = 0 
    [9.948, 9.949) = 0 
    [9.949, 9.949) = 1 
    [9.949, 9.950) = 0 
    [9.950, 9.950) = 0 
    [9.950, 9.951) = 0 
    [9.951, 9.951) = 0 
    [9.951, 9.952) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.942 s/op
     p(50.0000) =      9.945 s/op
     p(90.0000) =      9.952 s/op
     p(95.0000) =      9.952 s/op
     p(99.0000) =      9.952 s/op
     p(99.9000) =      9.952 s/op
     p(99.9900) =      9.952 s/op
     p(99.9990) =      9.952 s/op
     p(99.9999) =      9.952 s/op
    p(100.0000) =      9.952 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  1732.000 ±(99.9%) 3176.687 B/op [Average]
  (min, avg, max) = (1064.000, 1732.000, 7712.000), stdev = 2101.182
  CI (99.9%): [≈ 0, 4908.687] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:05:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                           Mode  Cnt         Score           Error   Units
lavaMD.LavaMDPatternBenchmark.fma                                     ss   10         0.849 ±         0.003    s/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate                      ss   10        33.416 ±         0.268  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm                 ss   10  47669972.800 ±     12773.896    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space             ss   10        52.507 ±       251.033  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm        ss   10  75078041.600 ± 358941554.013    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Survivor_Space         ss   10         0.003 ±         0.014  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.churn.G1_Survivor_Space.norm    ss   10      4087.200 ±     19540.546    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.count                           ss   10         1.000                  counts
lavaMD.LavaMDPatternBenchmark.fma:·gc.time                            ss   10         3.000                      ms
lavaMD.LavaMDPatternBenchmark.fmaScalar                               ss   10         9.945 ±         0.005    s/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate                ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm           ss   10      1732.000 ±      3176.687    B/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count                     ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_18:25:09/lavaMD/LavaMDPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 9006.609 bytes/s; standard: 10.256 s, 92580 bytes, 1177 methods; osr:  0.096 s, 649 bytes, 1 methods; nmethods_size: 1862608 bytes; nmethods_code_size: 1318144 bytes}
  C2 {speed: 823.467 bytes/s; standard: 12.524 s, 12161 bytes, 96 methods; osr:  2.435 s, 157 bytes, 3 methods; nmethods_size: 111848 bytes; nmethods_code_size: 71104 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4080.980 bytes/s; standard:  0.167 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 9087.558 bytes/s; standard: 10.088 s, 91897 bytes, 1033 methods; osr:  0.096 s, 649 bytes, 1 methods; nmethods_size: 1827984 bytes; nmethods_code_size: 1296224 bytes}
  Tier4 {speed: 823.467 bytes/s; standard: 12.524 s, 12161 bytes, 96 methods; osr:  2.435 s, 157 bytes, 3 methods; nmethods_size: 111848 bytes; nmethods_code_size: 71104 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  25.310 s
    Standard compilation   :  22.780 s, Average : 0.018 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.530 s, Average : 0.633 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.337 s
       Setup time:            0.009 s
       Build HIR:             6.369 s
         Parse:                 5.497 s
         Optimize blocks:       0.006 s
         GVN:                   0.257 s
         Null checks elim:      0.235 s
         Range checks elim:     0.166 s
         Other:                 0.207 s
       Emit LIR:              2.441 s
         LIR Gen:               1.220 s
         Linear Scan:           1.190 s
         Other:                 0.031 s
       Code Emission:         0.921 s
       Code Installation:     0.426 s
       Other:                 0.171 s

    C2 Compile Time:       16.751 s
       Parse:                 4.280 s
       Optimize:              5.663 s
         Escape Analysis:       0.337 s
           Conn Graph:            0.313 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.927 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.010 s
         IdealLoop:             2.909 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.103 s
         GVN 2:                 0.020 s
         Macro Expand:          0.588 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.213 s
         Other:                 0.646 s
       Matcher:                    1.495 s
         Post Selection Cleanup:   0.124 s
       Scheduler:                  1.317 s
       Regalloc:              1.957 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.075 s
         Build IFG (phys):      0.258 s
         Compute Liveness:      0.571 s
         Regalloc Split:        0.390 s
         Postalloc Copy Rem:    0.163 s
         Merge multidefs:       0.033 s
         Fixup Spills:          0.070 s
         Compact:               0.003 s
         Coalesce 1:            0.226 s
         Coalesce 2:            0.069 s
         Coalesce 3:            0.008 s
         Cache LRG:             0.001 s
         Simplify:              0.025 s
         Select:                0.042 s
         Other:                 0.017 s
       Block Ordering:        0.178 s
       Peephole:              0.031 s
       Code Emission:           1.509 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.724 s
         Build OOP maps:        0.112 s
         Fill buffer:           0.479 s
         Code Installation:     0.041 s
         Other:                 0.153 s
       Other:                 0.148 s

  Total compiled methods    :     1277 methods
    Standard compilation    :     1273 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   105547 bytes
    Standard compilation    :   104741 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     4170 bytes/s

  nmethod code size         :  1974456 bytes
  nmethod total size        :  1389248 bytes
