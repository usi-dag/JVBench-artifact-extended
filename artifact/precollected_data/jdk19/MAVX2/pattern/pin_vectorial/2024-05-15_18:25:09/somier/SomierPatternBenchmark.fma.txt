# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5.437 s/op
# Warmup Iteration   2: 1.173 s/op
# Warmup Iteration   3: 1.153 s/op
# Warmup Iteration   4: 1.152 s/op
# Warmup Iteration   5: 1.154 s/op
# Warmup Iteration   6: 1.157 s/op
# Warmup Iteration   7: 1.169 s/op
# Warmup Iteration   8: 1.186 s/op
# Warmup Iteration   9: 1.152 s/op
# Warmup Iteration  10: 1.152 s/op
Iteration   1: 1.162 s/op
                 ·gc.alloc.rate:      0.005 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.154 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.163 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.184 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.193 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.150 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.147 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.146 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.160 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.177 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5884.210 bytes/s; standard: 13.324 s, 76208 bytes, 1073 methods; osr:  0.175 s, 3223 bytes, 10 methods; nmethods_size: 2010616 bytes; nmethods_code_size: 1432256 bytes}
  C2 {speed: 1033.531 bytes/s; standard: 21.187 s, 18251 bytes, 117 methods; osr:  2.657 s, 6392 bytes, 16 methods; nmethods_size: 161248 bytes; nmethods_code_size: 100256 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2731.168 bytes/s; standard:  0.270 s, 738 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36352 bytes; nmethods_code_size: 22944 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5948.615 bytes/s; standard: 13.053 s, 75470 bytes, 921 methods; osr:  0.175 s, 3223 bytes, 10 methods; nmethods_size: 1974264 bytes; nmethods_code_size: 1409312 bytes}
  Tier4 {speed: 1033.531 bytes/s; standard: 21.187 s, 18251 bytes, 117 methods; osr:  2.657 s, 6392 bytes, 16 methods; nmethods_size: 161248 bytes; nmethods_code_size: 100256 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  37.343 s
    Standard compilation   :  34.510 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.832 s, Average : 0.109 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.478 s
       Setup time:            0.020 s
       Build HIR:             8.717 s
         Parse:                 7.759 s
         Optimize blocks:       0.005 s
         GVN:                   0.308 s
         Null checks elim:      0.208 s
         Range checks elim:     0.208 s
         Other:                 0.230 s
       Emit LIR:              2.853 s
         LIR Gen:               1.687 s
         Linear Scan:           1.125 s
         Other:                 0.041 s
       Code Emission:         0.955 s
       Code Installation:     0.779 s
       Other:                 0.154 s

    C2 Compile Time:       25.635 s
       Parse:                 8.216 s
       Optimize:              8.127 s
         Escape Analysis:       0.445 s
           Conn Graph:            0.362 s
           Macro Eliminate:       0.023 s
         GVN 1:                 0.972 s
         Incremental Inline:    0.184 s
           IdealLoop:             0.000 s
          (IGVN:                  0.046 s)
          (Inline:                0.126 s)
          (Prune Useless:         0.007 s)
           Other:                 0.184 s
         Vector:                0.334 s
           Box elimination:     0.334 s
             IGVN:              0.030 s
             Prune Useless:     0.009 s
         Renumber Live:         0.011 s
         IdealLoop:             4.385 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.154 s
         GVN 2:                 0.021 s
         Macro Expand:          0.661 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.167 s
         Other:                 0.793 s
       Matcher:                    1.988 s
         Post Selection Cleanup:   0.174 s
       Scheduler:                  1.791 s
       Regalloc:              2.566 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.066 s
         Build IFG (phys):      0.336 s
         Compute Liveness:      0.859 s
         Regalloc Split:        0.592 s
         Postalloc Copy Rem:    0.256 s
         Merge multidefs:       0.037 s
         Fixup Spills:          0.083 s
         Compact:               0.005 s
         Coalesce 1:            0.184 s
         Coalesce 2:            0.067 s
         Coalesce 3:            0.017 s
         Cache LRG:             0.001 s
         Simplify:              0.030 s
         Select:                0.042 s
       Block Ordering:        0.181 s
       Peephole:              0.024 s
       Code Emission:           2.267 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.828 s
         Build OOP maps:        0.199 s
         Fill buffer:           0.846 s
         Code Installation:     0.221 s
         Other:                 0.173 s
       Other:                 0.253 s

  Total compiled methods    :     1216 methods
    Standard compilation    :     1190 methods
    On stack replacement    :       26 methods
  Total compiled bytecodes  :   104074 bytes
    Standard compilation    :    94459 bytes
    On stack replacement    :     9615 bytes
  Average compilation speed :     2787 bytes/s

  nmethod code size         :  2171864 bytes
  nmethod total size        :  1532512 bytes


Result "jvbench.somier.SomierPatternBenchmark.fma":
  N = 10
  mean =      1.163 ±(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.140, 1.145) = 0 
    [1.145, 1.150) = 2 
    [1.150, 1.155) = 2 
    [1.155, 1.160) = 0 
    [1.160, 1.165) = 3 
    [1.165, 1.170) = 0 
    [1.170, 1.175) = 0 
    [1.175, 1.180) = 1 
    [1.180, 1.185) = 1 
    [1.185, 1.190) = 0 
    [1.190, 1.195) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.146 s/op
     p(50.0000) =      1.161 s/op
     p(90.0000) =      1.192 s/op
     p(95.0000) =      1.193 s/op
     p(99.0000) =      1.193 s/op
     p(99.9000) =      1.193 s/op
     p(99.9900) =      1.193 s/op
     p(99.9990) =      1.193 s/op
     p(99.9999) =      1.193 s/op
    p(100.0000) =      1.193 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate":
  0.001 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate.norm":
  1739.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1048.000, 1739.200, 7960.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5043.767] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:01:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.611 s/op
# Warmup Iteration   2: 8.409 s/op
# Warmup Iteration   3: 8.378 s/op
# Warmup Iteration   4: 8.381 s/op
# Warmup Iteration   5: 8.385 s/op
# Warmup Iteration   6: 8.382 s/op
# Warmup Iteration   7: 8.386 s/op
# Warmup Iteration   8: 8.383 s/op
# Warmup Iteration   9: 8.398 s/op
# Warmup Iteration  10: 8.391 s/op
Iteration   1: 8.402 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7976.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.389 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.396 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.395 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.400 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.390 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.386 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.393 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.386 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.391 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6654.462 bytes/s; standard:  9.735 s, 63924 bytes, 888 methods; osr:  0.117 s, 1635 bytes, 8 methods; nmethods_size: 1358392 bytes; nmethods_code_size: 958464 bytes}
  C2 {speed: 883.618 bytes/s; standard: 11.850 s, 10463 bytes, 67 methods; osr:  2.887 s, 2559 bytes, 9 methods; nmethods_size: 89280 bytes; nmethods_code_size: 58592 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5355.572 bytes/s; standard:  0.131 s, 703 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34840 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6672.002 bytes/s; standard:  9.604 s, 63221 bytes, 743 methods; osr:  0.117 s, 1635 bytes, 8 methods; nmethods_size: 1323552 bytes; nmethods_code_size: 936416 bytes}
  Tier4 {speed: 883.618 bytes/s; standard: 11.850 s, 10463 bytes, 67 methods; osr:  2.887 s, 2559 bytes, 9 methods; nmethods_size: 89280 bytes; nmethods_code_size: 58592 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  24.589 s
    Standard compilation   :  21.585 s, Average : 0.023 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.004 s, Average : 0.177 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        9.841 s
       Setup time:            0.041 s
       Build HIR:             5.864 s
         Parse:                 4.988 s
         Optimize blocks:       0.005 s
         GVN:                   0.268 s
         Null checks elim:      0.213 s
         Range checks elim:     0.190 s
         Other:                 0.201 s
       Emit LIR:              2.381 s
         LIR Gen:               1.097 s
         Linear Scan:           1.250 s
         Other:                 0.033 s
       Code Emission:         0.943 s
       Code Installation:     0.397 s
       Other:                 0.216 s

    C2 Compile Time:       16.660 s
       Parse:                 3.831 s
       Optimize:              5.885 s
         Escape Analysis:       0.269 s
           Conn Graph:            0.249 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.894 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             3.274 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.113 s
         GVN 2:                 0.030 s
         Macro Expand:          0.522 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.157 s
         Other:                 0.626 s
       Matcher:                    1.537 s
         Post Selection Cleanup:   0.091 s
       Scheduler:                  1.368 s
       Regalloc:              2.203 s
         Ctor Chaitin:          0.005 s
         Build IFG (virt):      0.054 s
         Build IFG (phys):      0.362 s
         Compute Liveness:      0.710 s
         Regalloc Split:        0.461 s
         Postalloc Copy Rem:    0.194 s
         Merge multidefs:       0.033 s
         Fixup Spills:          0.048 s
         Compact:               0.008 s
         Coalesce 1:            0.143 s
         Coalesce 2:            0.063 s
         Coalesce 3:            0.007 s
         Cache LRG:             0.001 s
         Simplify:              0.036 s
         Select:                0.041 s
         Other:                 0.037 s
       Block Ordering:        0.156 s
       Peephole:              0.021 s
       Code Emission:           1.193 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.527 s
         Build OOP maps:        0.131 s
         Fill buffer:           0.394 s
         Code Installation:     0.045 s
         Other:                 0.096 s
       Other:                 0.421 s

  Total compiled methods    :      972 methods
    Standard compilation    :      955 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :    78581 bytes
    Standard compilation    :    74387 bytes
    On stack replacement    :     4194 bytes
  Average compilation speed :     3195 bytes/s

  nmethod code size         :  1447672 bytes
  nmethod total size        :  1017056 bytes


Result "jvbench.somier.SomierPatternBenchmark.fmaScalar":
  N = 10
  mean =      8.393 ±(99.9%) 0.008 s/op

  Histogram, s/op:
    [8.380, 8.383) = 0 
    [8.383, 8.385) = 0 
    [8.385, 8.388) = 2 
    [8.388, 8.390) = 1 
    [8.390, 8.393) = 2 
    [8.393, 8.395) = 1 
    [8.395, 8.398) = 2 
    [8.398, 8.400) = 1 
    [8.400, 8.403) = 1 
    [8.403, 8.405) = 0 
    [8.405, 8.408) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.386 s/op
     p(50.0000) =      8.392 s/op
     p(90.0000) =      8.402 s/op
     p(95.0000) =      8.402 s/op
     p(99.0000) =      8.402 s/op
     p(99.9000) =      8.402 s/op
     p(99.9900) =      8.402 s/op
     p(99.9990) =      8.402 s/op
     p(99.9999) =      8.402 s/op
    p(100.0000) =      8.402 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  1761.600 ±(99.9%) 3301.228 B/op [Average]
  (min, avg, max) = (1064.000, 1761.600, 7976.000), stdev = 2183.558
  CI (99.9%): [≈ 0, 5062.828] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:04:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             Mode  Cnt     Score      Error   Units
SomierPatternBenchmark.fma                              ss   10     1.163 ±    0.024    s/op
SomierPatternBenchmark.fma:·gc.alloc.rate               ss   10     0.001 ±    0.002  MB/sec
SomierPatternBenchmark.fma:·gc.alloc.rate.norm          ss   10  1739.200 ± 3304.567    B/op
SomierPatternBenchmark.fma:·gc.count                    ss   10       ≈ 0             counts
SomierPatternBenchmark.fmaScalar                        ss   10     8.393 ±    0.008    s/op
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate         ss   10    ≈ 10⁻⁴             MB/sec
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm    ss   10  1761.600 ± 3301.228    B/op
SomierPatternBenchmark.fmaScalar:·gc.count              ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_18:25:09/somier/SomierPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 8423.829 bytes/s; standard: 10.563 s, 89313 bytes, 1143 methods; osr:  0.117 s, 649 bytes, 1 methods; nmethods_size: 1826200 bytes; nmethods_code_size: 1290368 bytes}
  C2 {speed: 806.522 bytes/s; standard: 13.667 s, 11249 bytes, 93 methods; osr:  0.363 s, 66 bytes, 2 methods; nmethods_size: 96704 bytes; nmethods_code_size: 61888 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4663.409 bytes/s; standard:  0.146 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 8476.117 bytes/s; standard: 10.416 s, 88630 bytes, 999 methods; osr:  0.117 s, 649 bytes, 1 methods; nmethods_size: 1791576 bytes; nmethods_code_size: 1268448 bytes}
  Tier4 {speed: 806.522 bytes/s; standard: 13.667 s, 11249 bytes, 93 methods; osr:  0.363 s, 66 bytes, 2 methods; nmethods_size: 96704 bytes; nmethods_code_size: 61888 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  24.798 s
    Standard compilation   :  24.230 s, Average : 0.020 s
    Bailed out compilation :   0.089 s, Average : 0.089 s
    On stack replacement   :   0.479 s, Average : 0.160 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.740 s
       Setup time:            0.037 s
       Build HIR:             6.360 s
         Parse:                 5.350 s
         Optimize blocks:       0.004 s
         GVN:                   0.296 s
         Null checks elim:      0.252 s
         Range checks elim:     0.156 s
         Other:                 0.301 s
       Emit LIR:              2.711 s
         LIR Gen:               1.487 s
         Linear Scan:           1.173 s
         Other:                 0.051 s
       Code Emission:         0.936 s
       Code Installation:     0.447 s
       Other:                 0.248 s

    C2 Compile Time:       15.827 s
       Parse:                 4.098 s
       Optimize:              5.352 s
         Escape Analysis:       0.387 s
           Conn Graph:            0.366 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.806 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.010 s
         IdealLoop:             2.670 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.105 s
         GVN 2:                 0.016 s
         Macro Expand:          0.588 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.159 s
         Other:                 0.606 s
       Matcher:                    1.378 s
         Post Selection Cleanup:   0.099 s
       Scheduler:                  1.195 s
       Regalloc:              1.759 s
         Ctor Chaitin:          0.010 s
         Build IFG (virt):      0.061 s
         Build IFG (phys):      0.232 s
         Compute Liveness:      0.464 s
         Regalloc Split:        0.415 s
         Postalloc Copy Rem:    0.152 s
         Merge multidefs:       0.035 s
         Fixup Spills:          0.049 s
         Compact:               0.008 s
         Coalesce 1:            0.176 s
         Coalesce 2:            0.062 s
         Coalesce 3:            0.007 s
         Cache LRG:             0.001 s
         Simplify:              0.020 s
         Select:                0.045 s
         Other:                 0.020 s
       Block Ordering:        0.141 s
       Peephole:              0.031 s
       Code Emission:           1.552 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.606 s
         Build OOP maps:        0.198 s
         Fill buffer:           0.557 s
         Code Installation:     0.047 s
         Other:                 0.145 s
       Other:                 0.134 s

  Total compiled methods    :     1239 methods
    Standard compilation    :     1236 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   101277 bytes
    Standard compilation    :   100562 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     4084 bytes/s

  nmethod code size         :  1922904 bytes
  nmethod total size        :  1352256 bytes
