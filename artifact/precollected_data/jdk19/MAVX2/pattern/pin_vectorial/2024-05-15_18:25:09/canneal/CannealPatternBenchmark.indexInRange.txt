# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.023 s/op
# Warmup Iteration   2: 5.839 s/op
# Warmup Iteration   3: 5.857 s/op
# Warmup Iteration   4: 5.766 s/op
# Warmup Iteration   5: 5.832 s/op
# Warmup Iteration   6: 5.771 s/op
# Warmup Iteration   7: 5.842 s/op
# Warmup Iteration   8: 5.803 s/op
# Warmup Iteration   9: 5.850 s/op
# Warmup Iteration  10: 5.884 s/op
Iteration   1: 5.777 s/op
                 ·gc.alloc.rate:                   732.503 MB/sec
                 ·gc.alloc.rate.norm:              4849840328.000 B/op
                 ·gc.churn.G1_Eden_Space:          477.020 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3158310912.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 299136.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         23.000 ms

Iteration   2: 5.818 s/op
                 ·gc.alloc.rate:                   730.323 MB/sec
                 ·gc.alloc.rate.norm:              4847256080.000 B/op
                 ·gc.churn.G1_Eden_Space:          951.708 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     6316621824.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.048 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 319848.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         43.000 ms

Iteration   3: 5.772 s/op
                 ·gc.alloc.rate:               736.659 MB/sec
                 ·gc.alloc.rate.norm:          4849108672.000 B/op
                 ·gc.churn.G1_Eden_Space:      479.799 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 3158310912.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     22.000 ms

Iteration   4: 5.792 s/op
                 ·gc.alloc.rate:                   733.966 MB/sec
                 ·gc.alloc.rate.norm:              4848408168.000 B/op
                 ·gc.churn.G1_Eden_Space:          956.229 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     6316621824.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 9680.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         41.000 ms

Iteration   5: 5.772 s/op
                 ·gc.alloc.rate:                   736.263 MB/sec
                 ·gc.alloc.rate.norm:              4846418480.000 B/op
                 ·gc.churn.G1_Eden_Space:          479.808 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3158310912.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1424.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         20.000 ms

Iteration   6: 5.793 s/op
                 ·gc.alloc.rate:                   732.927 MB/sec
                 ·gc.alloc.rate.norm:              4847686512.000 B/op
                 ·gc.churn.G1_Eden_Space:          955.017 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     6316621824.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4128.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         38.000 ms

Iteration   7: 5.766 s/op
                 ·gc.alloc.rate:               736.769 MB/sec
                 ·gc.alloc.rate.norm:          4847382048.000 B/op
                 ·gc.churn.G1_Eden_Space:      480.042 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 3158310912.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     19.000 ms

Iteration   8: 5.793 s/op
                 ·gc.alloc.rate:                   734.074 MB/sec
                 ·gc.alloc.rate.norm:              4848400680.000 B/op
                 ·gc.churn.G1_Eden_Space:          956.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     6316621824.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4128.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         36.000 ms

Iteration   9: 5.769 s/op
                 ·gc.alloc.rate:               737.018 MB/sec
                 ·gc.alloc.rate.norm:          4848622128.000 B/op
                 ·gc.churn.G1_Eden_Space:      480.081 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 3158310912.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     18.000 ms

Iteration  10: 5.787 s/op
                 ·gc.alloc.rate:                   734.372 MB/sec
                 ·gc.alloc.rate.norm:              4848170136.000 B/op
                 ·gc.churn.G1_Eden_Space:          956.804 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     6316621824.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2064.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         35.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6931.055 bytes/s; standard: 15.658 s, 106031 bytes, 1416 methods; osr:  0.296 s, 4550 bytes, 9 methods; nmethods_size: 2842272 bytes; nmethods_code_size: 2043808 bytes}
  C2 {speed: 2210.277 bytes/s; standard: 29.616 s, 57861 bytes, 278 methods; osr:  4.831 s, 18275 bytes, 22 methods; nmethods_size: 577856 bytes; nmethods_code_size: 356672 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5497.207 bytes/s; standard:  0.158 s, 869 bytes, 177 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 42392 bytes; nmethods_code_size: 26816 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6945.404 bytes/s; standard: 15.500 s, 105162 bytes, 1239 methods; osr:  0.296 s, 4550 bytes, 9 methods; nmethods_size: 2799880 bytes; nmethods_code_size: 2016992 bytes}
  Tier4 {speed: 2210.277 bytes/s; standard: 29.616 s, 57861 bytes, 278 methods; osr:  4.831 s, 18275 bytes, 22 methods; nmethods_size: 577856 bytes; nmethods_code_size: 356672 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  50.401 s
    Standard compilation   :  45.274 s, Average : 0.027 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   5.127 s, Average : 0.165 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       15.929 s
       Setup time:            0.048 s
       Build HIR:            11.053 s
         Parse:                10.006 s
         Optimize blocks:       0.005 s
         GVN:                   0.395 s
         Null checks elim:      0.229 s
         Range checks elim:     0.183 s
         Other:                 0.234 s
       Emit LIR:              2.879 s
         LIR Gen:               1.679 s
         Linear Scan:           1.167 s
         Other:                 0.034 s
       Code Emission:         1.072 s
       Code Installation:     0.717 s
       Other:                 0.160 s

    C2 Compile Time:       36.152 s
       Parse:                12.426 s
       Optimize:             11.703 s
         Escape Analysis:       1.067 s
           Conn Graph:            0.791 s
           Macro Eliminate:       0.304 s
         GVN 1:                 1.356 s
         Incremental Inline:    0.202 s
           IdealLoop:             0.000 s
          (IGVN:                  0.031 s)
          (Inline:                0.159 s)
          (Prune Useless:         0.011 s)
           Other:                 0.202 s
         Vector:                0.272 s
           Box elimination:     0.271 s
             IGVN:              0.026 s
             Prune Useless:     0.005 s
         Renumber Live:         0.074 s
         IdealLoop:             5.958 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.183 s
         GVN 2:                 0.050 s
         Macro Expand:          0.889 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.242 s
         Other:                 1.410 s
       Matcher:                    2.718 s
         Post Selection Cleanup:   0.267 s
       Scheduler:                  2.248 s
       Regalloc:              3.736 s
         Ctor Chaitin:          0.014 s
         Build IFG (virt):      0.095 s
         Build IFG (phys):      0.633 s
         Compute Liveness:      1.102 s
         Regalloc Split:        0.778 s
         Postalloc Copy Rem:    0.479 s
         Merge multidefs:       0.095 s
         Fixup Spills:          0.068 s
         Compact:               0.004 s
         Coalesce 1:            0.277 s
         Coalesce 2:            0.079 s
         Coalesce 3:            0.055 s
         Cache LRG:             0.002 s
         Simplify:              0.060 s
         Select:                0.073 s
       Block Ordering:        0.208 s
       Peephole:              0.054 s
       Code Emission:           2.447 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.084 s
         Build OOP maps:        0.247 s
         Fill buffer:           0.789 s
         Code Installation:     0.179 s
         Other:                 0.148 s
       Other:                 0.433 s

  Total compiled methods    :     1725 methods
    Standard compilation    :     1694 methods
    On stack replacement    :       31 methods
  Total compiled bytecodes  :   186717 bytes
    Standard compilation    :   163892 bytes
    On stack replacement    :    22825 bytes
  Average compilation speed :     3704 bytes/s

  nmethod code size         :  3420128 bytes
  nmethod total size        :  2400480 bytes


Result "jvbench.canneal.CannealPatternBenchmark.indexInRange":
  N = 10
  mean =      5.784 ±(99.9%) 0.024 s/op

  Histogram, s/op:
    [5.760, 5.765) = 0 
    [5.765, 5.770) = 2 
    [5.770, 5.775) = 2 
    [5.775, 5.780) = 1 
    [5.780, 5.785) = 0 
    [5.785, 5.790) = 1 
    [5.790, 5.795) = 3 
    [5.795, 5.800) = 0 
    [5.800, 5.805) = 0 
    [5.805, 5.810) = 0 
    [5.810, 5.815) = 0 
    [5.815, 5.820) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.766 s/op
     p(50.0000) =      5.782 s/op
     p(90.0000) =      5.815 s/op
     p(95.0000) =      5.818 s/op
     p(99.0000) =      5.818 s/op
     p(99.9000) =      5.818 s/op
     p(99.9900) =      5.818 s/op
     p(99.9990) =      5.818 s/op
     p(99.9999) =      5.818 s/op
    p(100.0000) =      5.818 s/op

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate":
  734.487 ±(99.9%) 3.330 MB/sec [Average]
  (min, avg, max) = (730.323, 734.487, 737.018), stdev = 2.202
  CI (99.9%): [731.158, 737.817] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  4848129323.200 ±(99.9%) 1488717.872 B/op [Average]
  (min, avg, max) = (4846418480.000, 4848129323.200, 4849840328.000), stdev = 984694.697
  CI (99.9%): [4846640605.328, 4849618041.072] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  717.288 ±(99.9%) 379.195 MB/sec [Average]
  (min, avg, max) = (477.020, 717.288, 956.804), stdev = 250.814
  CI (99.9%): [338.093, 1096.483] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  4737466368.000 ±(99.9%) 2516601398.244 B/op [Average]
  (min, avg, max) = (3158310912.000, 4737466368.000, 6316621824.000), stdev = 1664576006.814
  CI (99.9%): [2220864969.756, 7254067766.244] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  0.010 ±(99.9%) 0.030 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.020
  CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  64040.800 ±(99.9%) 195769.092 B/op [Average]
  (min, avg, max) = (≈ 0, 64040.800, 319848.000), stdev = 129489.133
  CI (99.9%): [≈ 0, 259809.892] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.count":
  15.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.500, 2.000), stdev = 0.527
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.time":
  295.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 29.500, 43.000), stdev = 9.947
  CI (99.9%): [295.000, 295.000] (assumes normal distribution)


# Run complete. Total time: 00:02:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt           Score            Error   Units
CannealPatternBenchmark.indexInRange                                     ss   10           5.784 ±          0.024    s/op
CannealPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10         734.487 ±          3.330  MB/sec
CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  4848129323.200 ±    1488717.872    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10         717.288 ±        379.195  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  4737466368.000 ± 2516601398.244    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           0.010 ±          0.030  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10       64040.800 ±     195769.092    B/op
CannealPatternBenchmark.indexInRange:·gc.count                           ss   10          15.000                   counts
CannealPatternBenchmark.indexInRange:·gc.time                            ss   10         295.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_18:25:09/canneal/CannealPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 8005.029 bytes/s; standard: 10.667 s, 85613 bytes, 1104 methods; osr:  0.109 s, 649 bytes, 1 methods; nmethods_size: 1718848 bytes; nmethods_code_size: 1216896 bytes}
  C2 {speed: 815.494 bytes/s; standard: 12.253 s, 11744 bytes, 95 methods; osr:  2.341 s, 157 bytes, 3 methods; nmethods_size: 102248 bytes; nmethods_code_size: 65536 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2018.603 bytes/s; standard:  0.336 s, 678 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34408 bytes; nmethods_code_size: 21792 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 8197.622 bytes/s; standard: 10.332 s, 84935 bytes, 961 methods; osr:  0.109 s, 649 bytes, 1 methods; nmethods_size: 1684440 bytes; nmethods_code_size: 1195104 bytes}
  Tier4 {speed: 815.494 bytes/s; standard: 12.253 s, 11744 bytes, 95 methods; osr:  2.341 s, 157 bytes, 3 methods; nmethods_size: 102248 bytes; nmethods_code_size: 65536 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  25.370 s
    Standard compilation   :  22.920 s, Average : 0.019 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.449 s, Average : 0.612 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.734 s
       Setup time:            0.030 s
       Build HIR:             6.397 s
         Parse:                 5.470 s
         Optimize blocks:       0.005 s
         GVN:                   0.293 s
         Null checks elim:      0.233 s
         Range checks elim:     0.182 s
         Other:                 0.214 s
       Emit LIR:              2.492 s
         LIR Gen:               1.242 s
         Linear Scan:           1.213 s
         Other:                 0.037 s
       Code Emission:         1.059 s
       Code Installation:     0.590 s
       Other:                 0.166 s

    C2 Compile Time:       16.498 s
       Parse:                 4.268 s
       Optimize:              5.610 s
         Escape Analysis:       0.361 s
           Conn Graph:            0.351 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.935 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.010 s
         IdealLoop:             2.802 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.114 s
         GVN 2:                 0.023 s
         Macro Expand:          0.606 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.155 s
         Other:                 0.564 s
       Matcher:                    1.421 s
         Post Selection Cleanup:   0.120 s
       Scheduler:                  1.403 s
       Regalloc:              2.139 s
         Ctor Chaitin:          0.005 s
         Build IFG (virt):      0.090 s
         Build IFG (phys):      0.333 s
         Compute Liveness:      0.777 s
         Regalloc Split:        0.457 s
         Postalloc Copy Rem:    0.215 s
         Merge multidefs:       0.037 s
         Fixup Spills:          0.042 s
         Compact:               0.002 s
         Coalesce 1:            0.158 s
         Coalesce 2:            0.081 s
         Coalesce 3:            0.012 s
         Cache LRG:             0.001 s
         Simplify:              0.043 s
         Select:                0.033 s
       Block Ordering:        0.133 s
       Peephole:              0.034 s
       Code Emission:           1.212 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.536 s
         Build OOP maps:        0.123 s
         Fill buffer:           0.451 s
         Code Installation:     0.048 s
         Other:                 0.054 s
       Other:                 0.156 s

  Total compiled methods    :     1203 methods
    Standard compilation    :     1199 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    98163 bytes
    Standard compilation    :    97357 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     3869 bytes/s

  nmethod code size         :  1821096 bytes
  nmethod total size        :  1282432 bytes
