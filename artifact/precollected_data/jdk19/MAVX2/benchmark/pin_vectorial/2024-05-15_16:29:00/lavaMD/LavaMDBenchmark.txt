# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.546 s/op
# Warmup Iteration   2: 10.383 s/op
# Warmup Iteration   3: 9.047 s/op
# Warmup Iteration   4: 10.369 s/op
# Warmup Iteration   5: 10.414 s/op
# Warmup Iteration   6: 10.380 s/op
# Warmup Iteration   7: 10.381 s/op
# Warmup Iteration   8: 10.377 s/op
# Warmup Iteration   9: 10.383 s/op
# Warmup Iteration  10: 8.963 s/op
Iteration   1: 8.952 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.955 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.957 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.953 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.954 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.959 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.958 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.954 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.959 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.957 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6437.739 bytes/s; standard: 10.927 s, 72729 bytes, 926 methods; osr:  1.090 s, 4635 bytes, 5 methods; nmethods_size: 1547184 bytes; nmethods_code_size: 1091296 bytes}
  C2 {speed: 797.073 bytes/s; standard: 21.429 s, 17029 bytes, 95 methods; osr:  3.519 s, 2856 bytes, 7 methods; nmethods_size: 136952 bytes; nmethods_code_size: 84960 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4077.655 bytes/s; standard:  0.169 s, 689 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34096 bytes; nmethods_code_size: 21600 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6471.397 bytes/s; standard: 10.758 s, 72040 bytes, 784 methods; osr:  1.090 s, 4635 bytes, 5 methods; nmethods_size: 1513088 bytes; nmethods_code_size: 1069696 bytes}
  Tier4 {speed: 797.073 bytes/s; standard: 21.429 s, 17029 bytes, 95 methods; osr:  3.519 s, 2856 bytes, 7 methods; nmethods_size: 136952 bytes; nmethods_code_size: 84960 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  36.965 s
    Standard compilation   :  32.355 s, Average : 0.032 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.609 s, Average : 0.384 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       11.995 s
       Setup time:            0.018 s
       Build HIR:             6.997 s
         Parse:                 6.089 s
         Optimize blocks:       0.005 s
         GVN:                   0.282 s
         Null checks elim:      0.247 s
         Range checks elim:     0.156 s
         Other:                 0.218 s
       Emit LIR:              3.142 s
         LIR Gen:               1.834 s
         Linear Scan:           1.271 s
         Other:                 0.036 s
       Code Emission:         1.055 s
       Code Installation:     0.574 s
       Other:                 0.209 s

    C2 Compile Time:       26.858 s
       Parse:                 8.623 s
       Optimize:              8.982 s
         Escape Analysis:       1.697 s
           Conn Graph:            1.506 s
           Macro Eliminate:       0.201 s
         GVN 1:                 1.210 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.026 s
         IdealLoop:             3.926 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.129 s
         GVN 2:                 0.023 s
         Macro Expand:          0.744 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.187 s
         Other:                 1.038 s
       Matcher:                    1.867 s
         Post Selection Cleanup:   0.166 s
       Scheduler:                  1.750 s
       Regalloc:              2.896 s
         Ctor Chaitin:          0.011 s
         Build IFG (virt):      0.052 s
         Build IFG (phys):      0.459 s
         Compute Liveness:      1.026 s
         Regalloc Split:        0.608 s
         Postalloc Copy Rem:    0.278 s
         Merge multidefs:       0.039 s
         Fixup Spills:          0.053 s
         Compact:               0.002 s
         Coalesce 1:            0.211 s
         Coalesce 2:            0.077 s
         Coalesce 3:            0.032 s
         Cache LRG:             0.002 s
         Simplify:              0.024 s
         Select:                0.057 s
       Block Ordering:        0.169 s
       Peephole:              0.023 s
       Code Emission:           2.129 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.757 s
         Build OOP maps:        0.157 s
         Fill buffer:           0.556 s
         Code Installation:     0.095 s
         Other:                 0.564 s
       Other:                 0.323 s

  Total compiled methods    :     1033 methods
    Standard compilation    :     1021 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    97249 bytes
    Standard compilation    :    89758 bytes
    On stack replacement    :     7491 bytes
  Average compilation speed :     2630 bytes/s

  nmethod code size         :  1684136 bytes
  nmethod total size        :  1176256 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.autoVec":
  N = 10
  mean =      8.956 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [8.951, 8.952) = 0 
    [8.952, 8.952) = 1 
    [8.952, 8.953) = 0 
    [8.953, 8.953) = 1 
    [8.953, 8.954) = 0 
    [8.954, 8.954) = 2 
    [8.954, 8.955) = 0 
    [8.955, 8.955) = 1 
    [8.955, 8.956) = 0 
    [8.956, 8.956) = 0 
    [8.956, 8.957) = 0 
    [8.957, 8.957) = 2 
    [8.957, 8.958) = 0 
    [8.958, 8.958) = 0 
    [8.958, 8.959) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.952 s/op
     p(50.0000) =      8.956 s/op
     p(90.0000) =      8.959 s/op
     p(95.0000) =      8.959 s/op
     p(99.0000) =      8.959 s/op
     p(99.9000) =      8.959 s/op
     p(99.9900) =      8.959 s/op
     p(99.9990) =      8.959 s/op
     p(99.9999) =      8.959 s/op
    p(100.0000) =      8.959 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm":
  1716.000 ±(99.9%) 3159.716 B/op [Average]
  (min, avg, max) = (1048.000, 1716.000, 7664.000), stdev = 2089.957
  CI (99.9%): [≈ 0, 4875.716] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:11:18
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.339 s/op
# Warmup Iteration   2: 1.053 s/op
# Warmup Iteration   3: 1.043 s/op
# Warmup Iteration   4: 1.034 s/op
# Warmup Iteration   5: 1.033 s/op
# Warmup Iteration   6: 1.034 s/op
# Warmup Iteration   7: 1.024 s/op
# Warmup Iteration   8: 1.034 s/op
# Warmup Iteration   9: 1.028 s/op
# Warmup Iteration  10: 1.023 s/op
Iteration   1: 1.020 s/op
                 ·gc.alloc.rate:      29.249 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.027 s/op
                 ·gc.alloc.rate:      29.195 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.031 s/op
                 ·gc.alloc.rate:      29.398 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.037 s/op
                 ·gc.alloc.rate:      29.491 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.038 s/op
                 ·gc.alloc.rate:      29.429 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.031 s/op
                 ·gc.alloc.rate:      29.461 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.041 s/op
                 ·gc.alloc.rate:               29.438 MB/sec
                 ·gc.alloc.rate.norm:          47693224.000 B/op
                 ·gc.churn.G1_Eden_Space:      481.524 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 780140544.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     5.000 ms

Iteration   8: 1.037 s/op
                 ·gc.alloc.rate:      29.445 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.031 s/op
                 ·gc.alloc.rate:      29.516 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.032 s/op
                 ·gc.alloc.rate:      29.442 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 7155.338 bytes/s; standard: 12.953 s, 90375 bytes, 1195 methods; osr:  0.449 s, 5524 bytes, 5 methods; nmethods_size: 2273720 bytes; nmethods_code_size: 1601440 bytes}
  C2 {speed: 972.074 bytes/s; standard: 26.703 s, 21983 bytes, 150 methods; osr:  2.176 s, 6089 bytes, 11 methods; nmethods_size: 227352 bytes; nmethods_code_size: 139808 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5345.813 bytes/s; standard:  0.142 s, 759 bytes, 156 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37280 bytes; nmethods_code_size: 23552 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 7174.712 bytes/s; standard: 12.811 s, 89616 bytes, 1039 methods; osr:  0.449 s, 5524 bytes, 5 methods; nmethods_size: 2236440 bytes; nmethods_code_size: 1577888 bytes}
  Tier4 {speed: 972.074 bytes/s; standard: 26.703 s, 21983 bytes, 150 methods; osr:  2.176 s, 6089 bytes, 11 methods; nmethods_size: 227352 bytes; nmethods_code_size: 139808 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  42.281 s
    Standard compilation   :  39.656 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.625 s, Average : 0.164 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.383 s
       Setup time:            0.011 s
       Build HIR:             9.000 s
         Parse:                 8.079 s
         Optimize blocks:       0.004 s
         GVN:                   0.258 s
         Null checks elim:      0.264 s
         Range checks elim:     0.154 s
         Other:                 0.240 s
       Emit LIR:              2.573 s
         LIR Gen:               1.370 s
         Linear Scan:           1.146 s
         Other:                 0.057 s
       Code Emission:         1.021 s
       Code Installation:     0.588 s
       Other:                 0.190 s

    C2 Compile Time:       30.666 s
       Parse:                10.485 s
       Optimize:              9.159 s
         Escape Analysis:       0.909 s
           Conn Graph:            0.744 s
           Macro Eliminate:       0.095 s
         GVN 1:                 1.252 s
         Incremental Inline:    0.156 s
           IdealLoop:             0.000 s
          (IGVN:                  0.040 s)
          (Inline:                0.105 s)
          (Prune Useless:         0.009 s)
           Other:                 0.156 s
         Vector:                0.247 s
           Box elimination:     0.246 s
             IGVN:              0.037 s
             Prune Useless:     0.005 s
         Renumber Live:         0.027 s
         IdealLoop:             4.243 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.161 s
         GVN 2:                 0.027 s
         Macro Expand:          0.809 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.250 s
         Other:                 1.076 s
       Matcher:                    2.158 s
         Post Selection Cleanup:   0.185 s
       Scheduler:                  2.027 s
       Regalloc:              3.012 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.104 s
         Build IFG (phys):      0.489 s
         Compute Liveness:      0.985 s
         Regalloc Split:        0.524 s
         Postalloc Copy Rem:    0.434 s
         Merge multidefs:       0.054 s
         Fixup Spills:          0.064 s
         Compact:               0.009 s
         Coalesce 1:            0.227 s
         Coalesce 2:            0.105 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.002 s
         Simplify:              0.043 s
         Select:                0.062 s
       Block Ordering:        0.209 s
       Peephole:              0.039 s
       Code Emission:           3.123 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.906 s
         Build OOP maps:        0.169 s
         Fill buffer:           0.712 s
         Code Installation:     0.132 s
         Other:                 1.205 s
       Other:                 0.323 s

  Total compiled methods    :     1361 methods
    Standard compilation    :     1345 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   123971 bytes
    Standard compilation    :   112358 bytes
    On stack replacement    :    11613 bytes
  Average compilation speed :     2932 bytes/s

  nmethod code size         :  2501072 bytes
  nmethod total size        :  1741248 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.explicitVec":
  N = 10
  mean =      1.032 ±(99.9%) 0.009 s/op

  Histogram, s/op:
    [1.020, 1.023) = 1 
    [1.023, 1.025) = 0 
    [1.025, 1.028) = 1 
    [1.028, 1.030) = 0 
    [1.030, 1.033) = 4 
    [1.033, 1.035) = 0 
    [1.035, 1.038) = 2 
    [1.038, 1.040) = 1 
    [1.040, 1.043) = 1 
    [1.043, 1.045) = 0 
    [1.045, 1.048) = 0 
    [1.048, 1.050) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.020 s/op
     p(50.0000) =      1.031 s/op
     p(90.0000) =      1.041 s/op
     p(95.0000) =      1.041 s/op
     p(99.0000) =      1.041 s/op
     p(99.9000) =      1.041 s/op
     p(99.9900) =      1.041 s/op
     p(99.9990) =      1.041 s/op
     p(99.9999) =      1.041 s/op
    p(100.0000) =      1.041 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate":
  29.406 ±(99.9%) 0.156 MB/sec [Average]
  (min, avg, max) = (29.195, 29.406, 29.516), stdev = 0.103
  CI (99.9%): [29.250, 29.563] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm":
  47669967.200 ±(99.9%) 12747.948 B/op [Average]
  (min, avg, max) = (47666648.000, 47669967.200, 47693224.000), stdev = 8431.978
  CI (99.9%): [47657219.252, 47682715.148] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space":
  48.152 ±(99.9%) 230.212 MB/sec [Average]
  (min, avg, max) = (≈ 0, 48.152, 481.524), stdev = 152.271
  CI (99.9%): [≈ 0, 278.365] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm":
  78014054.400 ±(99.9%) 372978374.560 B/op [Average]
  (min, avg, max) = (≈ 0, 78014054.400, 780140544.000), stdev = 246702101.408
  CI (99.9%): [≈ 0, 450992428.960] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.500, 5.000), stdev = 1.581
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:04:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.338 s/op
# Warmup Iteration   2: 3.646 s/op
# Warmup Iteration   3: 1.057 s/op
# Warmup Iteration   4: 1.029 s/op
# Warmup Iteration   5: 1.031 s/op
# Warmup Iteration   6: 1.036 s/op
# Warmup Iteration   7: 1.036 s/op
# Warmup Iteration   8: 1.030 s/op
# Warmup Iteration   9: 1.033 s/op
# Warmup Iteration  10: 1.035 s/op
Iteration   1: 1.035 s/op
                 ·gc.alloc.rate:      29.025 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.028 s/op
                 ·gc.alloc.rate:      29.606 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.030 s/op
                 ·gc.alloc.rate:               29.604 MB/sec
                 ·gc.alloc.rate.norm:          47693224.000 B/op
                 ·gc.churn.G1_Eden_Space:      304.604 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 490733568.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     3.000 ms

Iteration   4: 1.035 s/op
                 ·gc.alloc.rate:      29.524 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.034 s/op
                 ·gc.alloc.rate:      29.551 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.029 s/op
                 ·gc.alloc.rate:      29.474 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.029 s/op
                 ·gc.alloc.rate:      29.551 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.036 s/op
                 ·gc.alloc.rate:      29.394 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.036 s/op
                 ·gc.alloc.rate:      29.449 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.029 s/op
                 ·gc.alloc.rate:      29.594 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 7415.566 bytes/s; standard: 13.238 s, 95536 bytes, 1235 methods; osr:  0.371 s, 5384 bytes, 5 methods; nmethods_size: 2390888 bytes; nmethods_code_size: 1686240 bytes}
  C2 {speed: 975.864 bytes/s; standard: 28.415 s, 26960 bytes, 164 methods; osr:  5.545 s, 6180 bytes, 12 methods; nmethods_size: 257696 bytes; nmethods_code_size: 158528 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3576.675 bytes/s; standard:  0.218 s, 779 bytes, 160 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 38272 bytes; nmethods_code_size: 24192 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 7478.002 bytes/s; standard: 13.021 s, 94757 bytes, 1075 methods; osr:  0.371 s, 5384 bytes, 5 methods; nmethods_size: 2352616 bytes; nmethods_code_size: 1662048 bytes}
  Tier4 {speed: 975.864 bytes/s; standard: 28.415 s, 26960 bytes, 164 methods; osr:  5.545 s, 6180 bytes, 12 methods; nmethods_size: 257696 bytes; nmethods_code_size: 158528 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  47.613 s
    Standard compilation   :  41.653 s, Average : 0.030 s
    Bailed out compilation :   0.044 s, Average : 0.044 s
    On stack replacement   :   5.915 s, Average : 0.348 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.624 s
       Setup time:            0.047 s
       Build HIR:             9.337 s
         Parse:                 8.310 s
         Optimize blocks:       0.004 s
         GVN:                   0.324 s
         Null checks elim:      0.240 s
         Range checks elim:     0.202 s
         Other:                 0.257 s
       Emit LIR:              2.401 s
         LIR Gen:               1.315 s
         Linear Scan:           1.059 s
         Other:                 0.028 s
       Code Emission:         0.954 s
       Code Installation:     0.667 s
       Other:                 0.219 s

    C2 Compile Time:       35.708 s
       Parse:                11.912 s
       Optimize:             11.005 s
         Escape Analysis:       1.009 s
           Conn Graph:            0.779 s
           Macro Eliminate:       0.176 s
         GVN 1:                 1.864 s
         Incremental Inline:    0.233 s
           IdealLoop:             0.000 s
          (IGVN:                  0.032 s)
          (Inline:                0.156 s)
          (Prune Useless:         0.042 s)
           Other:                 0.233 s
         Vector:                0.319 s
           Box elimination:     0.319 s
             IGVN:              0.034 s
             Prune Useless:     0.008 s
         Renumber Live:         0.048 s
         IdealLoop:             5.071 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.158 s
         GVN 2:                 0.021 s
         Macro Expand:          0.924 s
         Barrier Expand:        0.005 s
         Graph Reshape:         0.254 s
         Other:                 1.099 s
       Matcher:                    2.242 s
         Post Selection Cleanup:   0.227 s
       Scheduler:                  2.249 s
       Regalloc:              3.084 s
         Ctor Chaitin:          0.013 s
         Build IFG (virt):      0.085 s
         Build IFG (phys):      0.482 s
         Compute Liveness:      1.062 s
         Regalloc Split:        0.614 s
         Postalloc Copy Rem:    0.317 s
         Merge multidefs:       0.044 s
         Fixup Spills:          0.081 s
         Compact:               0.005 s
         Coalesce 1:            0.245 s
         Coalesce 2:            0.133 s
         Coalesce 3:            0.018 s
         Cache LRG:             0.002 s
         Simplify:              0.037 s
         Select:                0.077 s
       Block Ordering:        0.177 s
       Peephole:              0.030 s
       Code Emission:           4.589 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.132 s
         Build OOP maps:        0.262 s
         Fill buffer:           0.808 s
         Code Installation:     0.107 s
         Other:                 2.278 s
       Other:                 0.312 s

  Total compiled methods    :     1416 methods
    Standard compilation    :     1399 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   134060 bytes
    Standard compilation    :   122496 bytes
    On stack replacement    :    11564 bytes
  Average compilation speed :     2815 bytes/s

  nmethod code size         :  2648584 bytes
  nmethod total size        :  1844768 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.fullVec":
  N = 10
  mean =      1.032 ±(99.9%) 0.005 s/op

  Histogram, s/op:
    [1.027, 1.028) = 1 
    [1.028, 1.029) = 1 
    [1.029, 1.030) = 2 
    [1.030, 1.031) = 1 
    [1.031, 1.032) = 0 
    [1.032, 1.033) = 0 
    [1.033, 1.034) = 0 
    [1.034, 1.035) = 2 
    [1.035, 1.036) = 2 
    [1.036, 1.037) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.028 s/op
     p(50.0000) =      1.032 s/op
     p(90.0000) =      1.036 s/op
     p(95.0000) =      1.036 s/op
     p(99.0000) =      1.036 s/op
     p(99.9000) =      1.036 s/op
     p(99.9900) =      1.036 s/op
     p(99.9990) =      1.036 s/op
     p(99.9999) =      1.036 s/op
    p(100.0000) =      1.036 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate":
  29.477 ±(99.9%) 0.262 MB/sec [Average]
  (min, avg, max) = (29.025, 29.477, 29.606), stdev = 0.174
  CI (99.9%): [29.215, 29.740] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm":
  47669967.200 ±(99.9%) 12747.948 B/op [Average]
  (min, avg, max) = (47666648.000, 47669967.200, 47693224.000), stdev = 8431.978
  CI (99.9%): [47657219.252, 47682715.148] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space":
  30.460 ±(99.9%) 145.629 MB/sec [Average]
  (min, avg, max) = (≈ 0, 30.460, 304.604), stdev = 96.324
  CI (99.9%): [≈ 0, 176.089] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm":
  49073356.800 ±(99.9%) 234615429.159 B/op [Average]
  (min, avg, max) = (≈ 0, 49073356.800, 490733568.000), stdev = 155183579.918
  CI (99.9%): [≈ 0, 283688785.959] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.300, 3.000), stdev = 0.949
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.397 s/op
# Warmup Iteration   2: 10.268 s/op
# Warmup Iteration   3: 9.057 s/op
# Warmup Iteration   4: 10.254 s/op
# Warmup Iteration   5: 10.260 s/op
# Warmup Iteration   6: 10.252 s/op
# Warmup Iteration   7: 10.255 s/op
# Warmup Iteration   8: 10.257 s/op
# Warmup Iteration   9: 10.250 s/op
# Warmup Iteration  10: 9.013 s/op
Iteration   1: 9.012 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.007 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.011 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.016 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.009 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.008 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.006 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.011 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.009 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.005 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6718.142 bytes/s; standard: 11.276 s, 74022 bytes, 947 methods; osr:  0.268 s, 3532 bytes, 4 methods; nmethods_size: 1557480 bytes; nmethods_code_size: 1099232 bytes}
  C2 {speed: 765.579 bytes/s; standard: 20.978 s, 13960 bytes, 92 methods; osr:  1.298 s, 3094 bytes, 6 methods; nmethods_size: 115064 bytes; nmethods_code_size: 71328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3734.450 bytes/s; standard:  0.187 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6767.317 bytes/s; standard: 11.089 s, 73323 bytes, 803 methods; osr:  0.268 s, 3532 bytes, 4 methods; nmethods_size: 1522920 bytes; nmethods_code_size: 1077344 bytes}
  Tier4 {speed: 765.579 bytes/s; standard: 20.978 s, 13960 bytes, 92 methods; osr:  1.298 s, 3094 bytes, 6 methods; nmethods_size: 115064 bytes; nmethods_code_size: 71328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  33.820 s
    Standard compilation   :  32.254 s, Average : 0.031 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   1.566 s, Average : 0.157 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       11.527 s
       Setup time:            0.007 s
       Build HIR:             7.086 s
         Parse:                 6.011 s
         Optimize blocks:       0.004 s
         GVN:                   0.445 s
         Null checks elim:      0.231 s
         Range checks elim:     0.196 s
         Other:                 0.200 s
       Emit LIR:              2.258 s
         LIR Gen:               1.175 s
         Linear Scan:           1.028 s
         Other:                 0.054 s
       Code Emission:         0.931 s
       Code Installation:     0.516 s
       Other:                 0.729 s

    C2 Compile Time:       24.052 s
       Parse:                 7.450 s
       Optimize:              7.802 s
         Escape Analysis:       0.633 s
           Conn Graph:            0.493 s
           Macro Eliminate:       0.168 s
         GVN 1:                 1.146 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.019 s
         IdealLoop:             3.325 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.686 s
         GVN 2:                 0.020 s
         Macro Expand:          0.753 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.252 s
         Other:                 0.968 s
       Matcher:                    1.837 s
         Post Selection Cleanup:   0.132 s
       Scheduler:                  1.602 s
       Regalloc:              2.409 s
         Ctor Chaitin:          0.015 s
         Build IFG (virt):      0.074 s
         Build IFG (phys):      0.399 s
         Compute Liveness:      0.768 s
         Regalloc Split:        0.587 s
         Postalloc Copy Rem:    0.219 s
         Merge multidefs:       0.025 s
         Fixup Spills:          0.067 s
         Compact:               0.041 s
         Coalesce 1:            0.171 s
         Coalesce 2:            0.081 s
         Coalesce 3:            0.024 s
         Cache LRG:             0.001 s
         Simplify:              0.025 s
         Select:                0.050 s
       Block Ordering:        0.177 s
       Peephole:              0.019 s
       Code Emission:           2.253 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.762 s
         Build OOP maps:        0.198 s
         Fill buffer:           0.490 s
         Code Installation:     0.668 s
         Other:                 0.136 s

  Total compiled methods    :     1049 methods
    Standard compilation    :     1039 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    94608 bytes
    Standard compilation    :    87982 bytes
    On stack replacement    :     6626 bytes
  Average compilation speed :     2797 bytes/s

  nmethod code size         :  1672544 bytes
  nmethod total size        :  1170560 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.serial":
  N = 10
  mean =      9.009 ±(99.9%) 0.005 s/op

  Histogram, s/op:
    [9.000, 9.001) = 0 
    [9.001, 9.003) = 0 
    [9.003, 9.004) = 0 
    [9.004, 9.005) = 1 
    [9.005, 9.006) = 0 
    [9.006, 9.008) = 2 
    [9.008, 9.009) = 3 
    [9.009, 9.010) = 0 
    [9.010, 9.011) = 2 
    [9.011, 9.013) = 1 
    [9.013, 9.014) = 0 
    [9.014, 9.015) = 0 
    [9.015, 9.016) = 1 
    [9.016, 9.018) = 0 
    [9.018, 9.019) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.005 s/op
     p(50.0000) =      9.009 s/op
     p(90.0000) =      9.015 s/op
     p(95.0000) =      9.016 s/op
     p(99.0000) =      9.016 s/op
     p(99.9000) =      9.016 s/op
     p(99.9900) =      9.016 s/op
     p(99.9990) =      9.016 s/op
     p(99.9999) =      9.016 s/op
    p(100.0000) =      9.016 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm":
  1716.000 ±(99.9%) 3159.716 B/op [Average]
  (min, avg, max) = (1048.000, 1716.000, 7664.000), stdev = 2089.957
  CI (99.9%): [≈ 0, 4875.716] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:09:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt         Score           Error   Units
lavaMD.LavaMDBenchmark.autoVec                                     ss   10         8.956 ±         0.004    s/op
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate                      ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm                 ss   10      1716.000 ±      3159.716    B/op
lavaMD.LavaMDBenchmark.autoVec:·gc.count                           ss   10           ≈ 0                  counts
lavaMD.LavaMDBenchmark.explicitVec                                 ss   10         1.032 ±         0.009    s/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate                  ss   10        29.406 ±         0.156  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm             ss   10  47669967.200 ±     12747.948    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space         ss   10        48.152 ±       230.212  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm    ss   10  78014054.400 ± 372978374.560    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.count                       ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.explicitVec:·gc.time                        ss   10         5.000                      ms
lavaMD.LavaMDBenchmark.fullVec                                     ss   10         1.032 ±         0.005    s/op
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate                      ss   10        29.477 ±         0.262  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm                 ss   10  47669967.200 ±     12747.948    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space             ss   10        30.460 ±       145.629  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm        ss   10  49073356.800 ± 234615429.159    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.count                           ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.fullVec:·gc.time                            ss   10         3.000                      ms
lavaMD.LavaMDBenchmark.serial                                      ss   10         9.009 ±         0.005    s/op
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate                       ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm                  ss   10      1716.000 ±      3159.716    B/op
lavaMD.LavaMDBenchmark.serial:·gc.count                            ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_vectorial/2024-05-15_16:29:00/lavaMD/LavaMDBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 9143.587 bytes/s; standard: 11.923 s, 109327 bytes, 1298 methods; osr:  0.104 s, 649 bytes, 1 methods; nmethods_size: 2220752 bytes; nmethods_code_size: 1569248 bytes}
  C2 {speed: 1302.052 bytes/s; standard: 14.229 s, 21119 bytes, 131 methods; osr:  2.111 s, 157 bytes, 3 methods; nmethods_size: 209776 bytes; nmethods_code_size: 131424 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3624.274 bytes/s; standard:  0.200 s, 725 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23264 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 9236.935 bytes/s; standard: 11.723 s, 108602 bytes, 1145 methods; osr:  0.104 s, 649 bytes, 1 methods; nmethods_size: 2183872 bytes; nmethods_code_size: 1545984 bytes}
  Tier4 {speed: 1302.052 bytes/s; standard: 14.229 s, 21119 bytes, 131 methods; osr:  2.111 s, 157 bytes, 3 methods; nmethods_size: 209776 bytes; nmethods_code_size: 131424 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  28.403 s
    Standard compilation   :  26.153 s, Average : 0.018 s
    Bailed out compilation :   0.035 s, Average : 0.035 s
    On stack replacement   :   2.215 s, Average : 0.554 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.044 s
       Setup time:            0.067 s
       Build HIR:             7.565 s
         Parse:                 6.633 s
         Optimize blocks:       0.005 s
         GVN:                   0.294 s
         Null checks elim:      0.205 s
         Range checks elim:     0.220 s
         Other:                 0.207 s
       Emit LIR:              2.721 s
         LIR Gen:               1.363 s
         Linear Scan:           1.301 s
         Other:                 0.057 s
       Code Emission:         0.937 s
       Code Installation:     0.518 s
       Other:                 0.236 s

    C2 Compile Time:       18.227 s
       Parse:                 4.516 s
       Optimize:              6.173 s
         Escape Analysis:       0.435 s
           Conn Graph:            0.405 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.857 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.012 s
         IdealLoop:             3.234 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.120 s
         GVN 2:                 0.019 s
         Macro Expand:          0.629 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.185 s
         Other:                 0.678 s
       Matcher:                    1.593 s
         Post Selection Cleanup:   0.117 s
       Scheduler:                  1.392 s
       Regalloc:              2.395 s
         Ctor Chaitin:          0.007 s
         Build IFG (virt):      0.058 s
         Build IFG (phys):      0.354 s
         Compute Liveness:      0.769 s
         Regalloc Split:        0.419 s
         Postalloc Copy Rem:    0.335 s
         Merge multidefs:       0.090 s
         Fixup Spills:          0.075 s
         Compact:               0.002 s
         Coalesce 1:            0.154 s
         Coalesce 2:            0.085 s
         Coalesce 3:            0.011 s
         Cache LRG:             0.002 s
         Simplify:              0.044 s
         Select:                0.042 s
       Block Ordering:        0.198 s
       Peephole:              0.019 s
       Code Emission:           1.521 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.726 s
         Build OOP maps:        0.202 s
         Fill buffer:           0.470 s
         Code Installation:     0.040 s
         Other:                 0.083 s
       Other:                 0.380 s

  Total compiled methods    :     1433 methods
    Standard compilation    :     1429 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   131252 bytes
    Standard compilation    :   130446 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     4621 bytes/s

  nmethod code size         :  2430528 bytes
  nmethod total size        :  1700672 bytes
