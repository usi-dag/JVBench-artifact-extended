# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 20.729 s/op
# Warmup Iteration   2: 20.571 s/op
# Warmup Iteration   3: 12.647 s/op
# Warmup Iteration   4: 20.121 s/op
# Warmup Iteration   5: 20.161 s/op
# Warmup Iteration   6: 20.087 s/op
# Warmup Iteration   7: 20.103 s/op
# Warmup Iteration   8: 20.152 s/op
# Warmup Iteration   9: 20.366 s/op
# Warmup Iteration  10: 12.591 s/op
Iteration   1: 12.585 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.590 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.614 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.752 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.691 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 12.613 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 12.613 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 12.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 12.679 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 12.607 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4605.805 bytes/s; standard: 16.634 s, 75150 bytes, 939 methods; osr:  0.449 s, 3532 bytes, 4 methods; nmethods_size: 1573896 bytes; nmethods_code_size: 1111648 bytes}
  C2 {speed: 594.501 bytes/s; standard: 32.450 s, 17972 bytes, 101 methods; osr:  3.011 s, 3110 bytes, 6 methods; nmethods_size: 143064 bytes; nmethods_code_size: 88288 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2597.739 bytes/s; standard:  0.271 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34776 bytes; nmethods_code_size: 22016 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4638.174 bytes/s; standard: 16.363 s, 74446 bytes, 794 methods; osr:  0.449 s, 3532 bytes, 4 methods; nmethods_size: 1539120 bytes; nmethods_code_size: 1089632 bytes}
  Tier4 {speed: 594.501 bytes/s; standard: 32.450 s, 17972 bytes, 101 methods; osr:  3.011 s, 3110 bytes, 6 methods; nmethods_size: 143064 bytes; nmethods_code_size: 88288 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  52.545 s
    Standard compilation   :  49.084 s, Average : 0.047 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.461 s, Average : 0.346 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       17.022 s
       Setup time:            0.087 s
       Build HIR:             9.057 s
         Parse:                 7.607 s
         Optimize blocks:       0.011 s
         GVN:                   0.515 s
         Null checks elim:      0.298 s
         Range checks elim:     0.281 s
         Other:                 0.344 s
       Emit LIR:              5.260 s
         LIR Gen:               1.957 s
         Linear Scan:           3.208 s
         Other:                 0.095 s
       Code Emission:         1.480 s
       Code Installation:     0.798 s
       Other:                 0.341 s

    C2 Compile Time:       37.850 s
       Parse:                 7.573 s
       Optimize:             13.047 s
         Escape Analysis:       0.929 s
           Conn Graph:            0.684 s
           Macro Eliminate:       0.191 s
         GVN 1:                 1.689 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.069 s
         IdealLoop:             7.336 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.185 s
         GVN 2:                 0.070 s
         Macro Expand:          0.926 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.278 s
         Other:                 1.562 s
       Matcher:                    3.252 s
         Post Selection Cleanup:   0.261 s
       Scheduler:                  2.818 s
       Regalloc:              6.496 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.115 s
         Build IFG (phys):      0.958 s
         Compute Liveness:      2.152 s
         Regalloc Split:        0.881 s
         Postalloc Copy Rem:    1.546 s
         Merge multidefs:       0.151 s
         Fixup Spills:          0.063 s
         Compact:               0.019 s
         Coalesce 1:            0.287 s
         Coalesce 2:            0.130 s
         Coalesce 3:            0.048 s
         Cache LRG:             0.012 s
         Simplify:              0.136 s
         Select:                0.231 s
       Block Ordering:        0.216 s
       Peephole:              0.066 s
       Code Emission:           3.543 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.830 s
         Build OOP maps:        0.631 s
         Fill buffer:           0.684 s
         Code Installation:     0.675 s
         Other:                 0.724 s
       Other:                 0.164 s

  Total compiled methods    :     1050 methods
    Standard compilation    :     1040 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    99764 bytes
    Standard compilation    :    93122 bytes
    On stack replacement    :     6642 bytes
  Average compilation speed :     1898 bytes/s

  nmethod code size         :  1716960 bytes
  nmethod total size        :  1199936 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.autoVec":
  N = 10
  mean =     12.633 ±(99.9%) 0.084 s/op

  Histogram, s/op:
    [12.500, 12.525) = 0 
    [12.525, 12.550) = 0 
    [12.550, 12.575) = 0 
    [12.575, 12.600) = 3 
    [12.600, 12.625) = 4 
    [12.625, 12.650) = 0 
    [12.650, 12.675) = 0 
    [12.675, 12.700) = 2 
    [12.700, 12.725) = 0 
    [12.725, 12.750) = 0 
    [12.750, 12.775) = 1 
    [12.775, 12.800) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.585 s/op
     p(50.0000) =     12.613 s/op
     p(90.0000) =     12.745 s/op
     p(95.0000) =     12.752 s/op
     p(99.0000) =     12.752 s/op
     p(99.9000) =     12.752 s/op
     p(99.9900) =     12.752 s/op
     p(99.9990) =     12.752 s/op
     p(99.9999) =     12.752 s/op
    p(100.0000) =     12.752 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm":
  1716.000 ±(99.9%) 3159.716 B/op [Average]
  (min, avg, max) = (1048.000, 1716.000, 7664.000), stdev = 2089.957
  CI (99.9%): [≈ 0, 4875.716] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:17:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 20.819 s/op
# Warmup Iteration   2: 10.150 s/op
# Warmup Iteration   3: 1.723 s/op
# Warmup Iteration   4: 1.493 s/op
# Warmup Iteration   5: 1.522 s/op
# Warmup Iteration   6: 1.482 s/op
# Warmup Iteration   7: 1.566 s/op
# Warmup Iteration   8: 1.527 s/op
# Warmup Iteration   9: 1.489 s/op
# Warmup Iteration  10: 1.489 s/op
Iteration   1: 1.482 s/op
                 ·gc.alloc.rate:      22.501 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.760 s/op
                 ·gc.alloc.rate:      19.988 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.548 s/op
                 ·gc.alloc.rate:      21.881 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.608 s/op
                 ·gc.alloc.rate:      21.534 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.492 s/op
                 ·gc.alloc.rate:      22.772 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.488 s/op
                 ·gc.alloc.rate:      22.728 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.633 s/op
                 ·gc.alloc.rate:                   21.287 MB/sec
                 ·gc.alloc.rate.norm:              47693280.000 B/op
                 ·gc.churn.G1_Eden_Space:          1156.922 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2592079872.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.612 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1370520.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         123.000 ms

Iteration   8: 1.507 s/op
                 ·gc.alloc.rate:      22.532 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.576 s/op
                 ·gc.alloc.rate:      21.846 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.508 s/op
                 ·gc.alloc.rate:      22.507 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4610.960 bytes/s; standard: 19.684 s, 90542 bytes, 1162 methods; osr:  0.881 s, 4281 bytes, 4 methods; nmethods_size: 2217800 bytes; nmethods_code_size: 1562752 bytes}
  C2 {speed: 666.054 bytes/s; standard: 38.917 s, 22699 bytes, 150 methods; osr:  9.867 s, 9794 bytes, 12 methods; nmethods_size: 245616 bytes; nmethods_code_size: 150144 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2489.041 bytes/s; standard:  0.301 s, 749 bytes, 154 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23328 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4642.471 bytes/s; standard: 19.383 s, 89793 bytes, 1008 methods; osr:  0.881 s, 4281 bytes, 4 methods; nmethods_size: 2180920 bytes; nmethods_code_size: 1539424 bytes}
  Tier4 {speed: 666.054 bytes/s; standard: 38.917 s, 22699 bytes, 150 methods; osr:  9.867 s, 9794 bytes, 12 methods; nmethods_size: 245616 bytes; nmethods_code_size: 150144 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  72.399 s
    Standard compilation   :  58.601 s, Average : 0.045 s
    Bailed out compilation :   3.050 s, Average : 1.525 s
    On stack replacement   :  10.748 s, Average : 0.672 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.509 s
       Setup time:            0.109 s
       Build HIR:            11.343 s
         Parse:                 9.646 s
         Optimize blocks:       0.011 s
         GVN:                   0.591 s
         Null checks elim:      0.384 s
         Range checks elim:     0.256 s
         Other:                 0.455 s
       Emit LIR:              5.919 s
         LIR Gen:               2.054 s
         Linear Scan:           3.816 s
         Other:                 0.049 s
       Code Emission:         1.913 s
       Code Installation:     0.893 s
       Other:                 0.331 s

    C2 Compile Time:       54.102 s
       Parse:                10.919 s
       Optimize:             18.701 s
         Escape Analysis:       1.240 s
           Conn Graph:            0.910 s
           Macro Eliminate:       0.198 s
         GVN 1:                 1.790 s
         Incremental Inline:    0.510 s
           IdealLoop:             0.000 s
          (IGVN:                  0.262 s)
          (Inline:                0.197 s)
          (Prune Useless:         0.042 s)
           Other:                 0.510 s
         Vector:                0.458 s
           Box elimination:     0.457 s
             IGVN:              0.093 s
             Prune Useless:     0.074 s
         Renumber Live:         0.141 s
         IdealLoop:            10.126 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.261 s
         GVN 2:                 0.069 s
         Macro Expand:          1.177 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.329 s
         Other:                 2.598 s
       Matcher:                    4.014 s
         Post Selection Cleanup:   0.324 s
       Scheduler:                  3.721 s
       Regalloc:             11.650 s
         Ctor Chaitin:          0.018 s
         Build IFG (virt):      0.176 s
         Build IFG (phys):      2.026 s
         Compute Liveness:      3.519 s
         Regalloc Split:        1.214 s
         Postalloc Copy Rem:    3.183 s
         Merge multidefs:       0.202 s
         Fixup Spills:          0.075 s
         Compact:               0.024 s
         Coalesce 1:            0.354 s
         Coalesce 2:            0.126 s
         Coalesce 3:            0.092 s
         Cache LRG:             0.022 s
         Simplify:              0.381 s
         Select:                0.536 s
       Block Ordering:        0.288 s
       Peephole:              0.061 s
       Code Emission:           3.924 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.940 s
         Build OOP maps:        0.955 s
         Fill buffer:           0.829 s
         Code Installation:     0.126 s
         Other:                 1.075 s
       Other:                 0.699 s

  Total compiled methods    :     1328 methods
    Standard compilation    :     1312 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   127316 bytes
    Standard compilation    :   113241 bytes
    On stack replacement    :    14075 bytes
  Average compilation speed :     1758 bytes/s

  nmethod code size         :  2463416 bytes
  nmethod total size        :  1712896 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.explicitVec":
  N = 10
  mean =      1.560 ±(99.9%) 0.133 s/op

  Histogram, s/op:
    [1.400, 1.425) = 0 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 3 
    [1.500, 1.525) = 2 
    [1.525, 1.550) = 1 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 1 
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.482 s/op
     p(50.0000) =      1.528 s/op
     p(90.0000) =      1.747 s/op
     p(95.0000) =      1.760 s/op
     p(99.0000) =      1.760 s/op
     p(99.9000) =      1.760 s/op
     p(99.9900) =      1.760 s/op
     p(99.9990) =      1.760 s/op
     p(99.9999) =      1.760 s/op
    p(100.0000) =      1.760 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate":
  21.958 ±(99.9%) 1.306 MB/sec [Average]
  (min, avg, max) = (19.988, 21.958, 22.772), stdev = 0.864
  CI (99.9%): [20.652, 23.263] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm":
  47669972.800 ±(99.9%) 12773.896 B/op [Average]
  (min, avg, max) = (47666648.000, 47669972.800, 47693280.000), stdev = 8449.142
  CI (99.9%): [47657198.904, 47682746.696] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space":
  115.692 ±(99.9%) 553.114 MB/sec [Average]
  (min, avg, max) = (≈ 0, 115.692, 1156.922), stdev = 365.851
  CI (99.9%): [≈ 0, 668.806] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm":
  259207987.200 ±(99.9%) 1239250728.378 B/op [Average]
  (min, avg, max) = (≈ 0, 259207987.200, 2592079872.000), stdev = 819687627.260
  CI (99.9%): [≈ 0, 1498458715.578] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Survivor_Space":
  0.061 ±(99.9%) 0.292 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.061, 0.612), stdev = 0.193
  CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Survivor_Space.norm":
  137052.000 ±(99.9%) 655233.632 B/op [Average]
  (min, avg, max) = (≈ 0, 137052.000, 1370520.000), stdev = 433396.478
  CI (99.9%): [≈ 0, 792285.632] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.time":
  123.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 12.300, 123.000), stdev = 38.896
  CI (99.9%): [123.000, 123.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:07:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 18.752 s/op
# Warmup Iteration   2: 10.111 s/op
# Warmup Iteration   3: 1.792 s/op
# Warmup Iteration   4: 1.599 s/op
# Warmup Iteration   5: 1.771 s/op
# Warmup Iteration   6: 1.552 s/op
# Warmup Iteration   7: 1.551 s/op
# Warmup Iteration   8: 1.547 s/op
# Warmup Iteration   9: 1.556 s/op
# Warmup Iteration  10: 1.559 s/op
Iteration   1: 1.544 s/op
                 ·gc.alloc.rate:      21.840 MB/sec
                 ·gc.alloc.rate.norm: 47673264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.656 s/op
                 ·gc.alloc.rate:      20.664 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.607 s/op
                 ·gc.alloc.rate:      21.518 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.559 s/op
                 ·gc.alloc.rate:      21.990 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.577 s/op
                 ·gc.alloc.rate:      21.842 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.551 s/op
                 ·gc.alloc.rate:      22.011 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.592 s/op
                 ·gc.alloc.rate:      21.651 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.588 s/op
                 ·gc.alloc.rate:      21.688 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.598 s/op
                 ·gc.alloc.rate:      21.573 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.647 s/op
                 ·gc.alloc.rate:      21.029 MB/sec
                 ·gc.alloc.rate.norm: 47666648.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4200.782 bytes/s; standard: 21.893 s, 90667 bytes, 1193 methods; osr:  0.709 s, 4281 bytes, 4 methods; nmethods_size: 2265920 bytes; nmethods_code_size: 1598720 bytes}
  C2 {speed: 576.510 bytes/s; standard: 39.768 s, 23276 bytes, 157 methods; osr: 11.896 s, 6509 bytes, 12 methods; nmethods_size: 237448 bytes; nmethods_code_size: 145152 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3219.314 bytes/s; standard:  0.237 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4211.196 bytes/s; standard: 21.656 s, 89903 bytes, 1036 methods; osr:  0.709 s, 4281 bytes, 4 methods; nmethods_size: 2228392 bytes; nmethods_code_size: 1575008 bytes}
  Tier4 {speed: 576.510 bytes/s; standard: 39.768 s, 23276 bytes, 157 methods; osr: 11.896 s, 6509 bytes, 12 methods; nmethods_size: 237448 bytes; nmethods_code_size: 145152 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  77.172 s
    Standard compilation   :  61.661 s, Average : 0.046 s
    Bailed out compilation :   2.905 s, Average : 1.453 s
    On stack replacement   :  12.606 s, Average : 0.788 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.533 s
       Setup time:            0.123 s
       Build HIR:            12.856 s
         Parse:                10.972 s
         Optimize blocks:       0.008 s
         GVN:                   0.731 s
         Null checks elim:      0.361 s
         Range checks elim:     0.304 s
         Other:                 0.480 s
       Emit LIR:              6.299 s
         LIR Gen:               2.289 s
         Linear Scan:           3.931 s
         Other:                 0.080 s
       Code Emission:         1.810 s
       Code Installation:     0.972 s
       Other:                 0.471 s

    C2 Compile Time:       56.940 s
       Parse:                11.223 s
       Optimize:             20.059 s
         Escape Analysis:       1.046 s
           Conn Graph:            0.737 s
           Macro Eliminate:       0.799 s
         GVN 1:                 1.857 s
         Incremental Inline:    0.415 s
           IdealLoop:             0.000 s
          (IGVN:                  0.191 s)
          (Inline:                0.172 s)
          (Prune Useless:         0.044 s)
           Other:                 0.415 s
         Vector:                0.393 s
           Box elimination:     0.393 s
             IGVN:              0.080 s
             Prune Useless:     0.060 s
         Renumber Live:         0.154 s
         IdealLoop:            11.284 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.291 s
         GVN 2:                 0.072 s
         Macro Expand:          1.287 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.390 s
         Other:                 2.868 s
       Matcher:                    4.469 s
         Post Selection Cleanup:   0.293 s
       Scheduler:                  3.855 s
       Regalloc:             11.516 s
         Ctor Chaitin:          0.013 s
         Build IFG (virt):      0.180 s
         Build IFG (phys):      1.801 s
         Compute Liveness:      3.578 s
         Regalloc Split:        1.227 s
         Postalloc Copy Rem:    3.201 s
         Merge multidefs:       0.205 s
         Fixup Spills:          0.078 s
         Compact:               0.027 s
         Coalesce 1:            0.398 s
         Coalesce 2:            0.144 s
         Coalesce 3:            0.079 s
         Cache LRG:             0.022 s
         Simplify:              0.371 s
         Select:                0.467 s
       Block Ordering:        0.324 s
       Peephole:              0.072 s
       Code Emission:           4.451 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.080 s
         Build OOP maps:        1.018 s
         Fill buffer:           0.889 s
         Code Installation:     0.146 s
         Other:                 1.319 s
       Other:                 0.825 s

  Total compiled methods    :     1366 methods
    Standard compilation    :     1350 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   124733 bytes
    Standard compilation    :   113943 bytes
    On stack replacement    :    10790 bytes
  Average compilation speed :     1616 bytes/s

  nmethod code size         :  2503368 bytes
  nmethod total size        :  1743872 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.fullVec":
  N = 10
  mean =      1.592 ±(99.9%) 0.057 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 0 
    [1.538, 1.550) = 1 
    [1.550, 1.563) = 2 
    [1.563, 1.575) = 0 
    [1.575, 1.588) = 1 
    [1.588, 1.600) = 3 
    [1.600, 1.613) = 1 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 1 
    [1.650, 1.663) = 1 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.544 s/op
     p(50.0000) =      1.590 s/op
     p(90.0000) =      1.655 s/op
     p(95.0000) =      1.656 s/op
     p(99.0000) =      1.656 s/op
     p(99.9000) =      1.656 s/op
     p(99.9900) =      1.656 s/op
     p(99.9990) =      1.656 s/op
     p(99.9999) =      1.656 s/op
    p(100.0000) =      1.656 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate":
  21.581 ±(99.9%) 0.648 MB/sec [Average]
  (min, avg, max) = (20.664, 21.581, 22.011), stdev = 0.428
  CI (99.9%): [20.933, 22.228] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm":
  47667309.600 ±(99.9%) 3163.052 B/op [Average]
  (min, avg, max) = (47666648.000, 47667309.600, 47673264.000), stdev = 2092.163
  CI (99.9%): [47664146.548, 47670472.652] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.serial

# Run progress: 75.00% complete, ETA 00:03:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 19.970 s/op
# Warmup Iteration   2: 19.492 s/op
# Warmup Iteration   3: 12.596 s/op
# Warmup Iteration   4: 19.234 s/op
# Warmup Iteration   5: 19.274 s/op
# Warmup Iteration   6: 19.208 s/op
# Warmup Iteration   7: 19.211 s/op
# Warmup Iteration   8: 19.217 s/op
# Warmup Iteration   9: 19.522 s/op
# Warmup Iteration  10: 12.591 s/op
Iteration   1: 12.583 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.583 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.720 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.587 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.635 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 12.588 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 12.881 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 12.593 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 12.624 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 12.592 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4743.176 bytes/s; standard: 16.230 s, 75966 bytes, 948 methods; osr:  0.400 s, 2910 bytes, 3 methods; nmethods_size: 1555656 bytes; nmethods_code_size: 1101184 bytes}
  C2 {speed: 564.313 bytes/s; standard: 30.063 s, 15830 bytes, 94 methods; osr:  3.472 s, 3094 bytes, 6 methods; nmethods_size: 128384 bytes; nmethods_code_size: 79360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3264.905 bytes/s; standard:  0.213 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34280 bytes; nmethods_code_size: 21696 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4762.317 bytes/s; standard: 16.017 s, 75272 bytes, 805 methods; osr:  0.400 s, 2910 bytes, 3 methods; nmethods_size: 1521376 bytes; nmethods_code_size: 1079488 bytes}
  Tier4 {speed: 564.313 bytes/s; standard: 30.063 s, 15830 bytes, 94 methods; osr:  3.472 s, 3094 bytes, 6 methods; nmethods_size: 128384 bytes; nmethods_code_size: 79360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  53.012 s
    Standard compilation   :  46.292 s, Average : 0.044 s
    Bailed out compilation :   2.848 s, Average : 1.424 s
    On stack replacement   :   3.871 s, Average : 0.430 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       16.581 s
       Setup time:            0.081 s
       Build HIR:             9.489 s
         Parse:                 7.821 s
         Optimize blocks:       0.007 s
         GVN:                   0.660 s
         Null checks elim:      0.299 s
         Range checks elim:     0.285 s
         Other:                 0.418 s
       Emit LIR:              4.685 s
         LIR Gen:               1.876 s
         Linear Scan:           2.716 s
         Other:                 0.092 s
       Code Emission:         1.314 s
       Code Installation:     0.707 s
       Other:                 0.305 s

    C2 Compile Time:       38.730 s
       Parse:                 7.402 s
       Optimize:             13.250 s
         Escape Analysis:       0.963 s
           Conn Graph:            0.673 s
           Macro Eliminate:       0.776 s
         GVN 1:                 1.672 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.077 s
         IdealLoop:             6.773 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.202 s
         GVN 2:                 0.046 s
         Macro Expand:          0.960 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.251 s
         Other:                 2.306 s
       Matcher:                    3.344 s
         Post Selection Cleanup:   0.313 s
       Scheduler:                  2.812 s
       Regalloc:              7.330 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.137 s
         Build IFG (phys):      1.116 s
         Compute Liveness:      2.391 s
         Regalloc Split:        0.915 s
         Postalloc Copy Rem:    1.847 s
         Merge multidefs:       0.152 s
         Fixup Spills:          0.062 s
         Compact:               0.019 s
         Coalesce 1:            0.305 s
         Coalesce 2:            0.106 s
         Coalesce 3:            0.067 s
         Cache LRG:             0.014 s
         Simplify:              0.206 s
         Select:                0.254 s
       Block Ordering:        0.245 s
       Peephole:              0.048 s
       Code Emission:           3.534 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.841 s
         Build OOP maps:        0.603 s
         Fill buffer:           0.744 s
         Code Installation:     0.148 s
         Other:                 1.198 s
       Other:                 0.617 s

  Total compiled methods    :     1051 methods
    Standard compilation    :     1042 methods
    On stack replacement    :        9 methods
  Total compiled bytecodes  :    97800 bytes
    Standard compilation    :    91796 bytes
    On stack replacement    :     6004 bytes
  Average compilation speed :     1844 bytes/s

  nmethod code size         :  1684040 bytes
  nmethod total size        :  1180544 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.serial":
  N = 10
  mean =     12.639 ±(99.9%) 0.144 s/op

  Histogram, s/op:
    [12.500, 12.525) = 0 
    [12.525, 12.550) = 0 
    [12.550, 12.575) = 0 
    [12.575, 12.600) = 6 
    [12.600, 12.625) = 1 
    [12.625, 12.650) = 1 
    [12.650, 12.675) = 0 
    [12.675, 12.700) = 0 
    [12.700, 12.725) = 1 
    [12.725, 12.750) = 0 
    [12.750, 12.775) = 0 
    [12.775, 12.800) = 0 
    [12.800, 12.825) = 0 
    [12.825, 12.850) = 0 
    [12.850, 12.875) = 0 
    [12.875, 12.900) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.583 s/op
     p(50.0000) =     12.593 s/op
     p(90.0000) =     12.865 s/op
     p(95.0000) =     12.881 s/op
     p(99.0000) =     12.881 s/op
     p(99.9000) =     12.881 s/op
     p(99.9900) =     12.881 s/op
     p(99.9990) =     12.881 s/op
     p(99.9999) =     12.881 s/op
    p(100.0000) =     12.881 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm":
  1716.000 ±(99.9%) 3159.716 B/op [Average]
  (min, avg, max) = (1048.000, 1716.000, 7664.000), stdev = 2089.957
  CI (99.9%): [≈ 0, 4875.716] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:15:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                            Mode  Cnt          Score            Error   Units
lavaMD.LavaMDBenchmark.autoVec                                         ss   10         12.633 ±          0.084    s/op
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate                          ss   10         ≈ 10⁻⁴                   MB/sec
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm                     ss   10       1716.000 ±       3159.716    B/op
lavaMD.LavaMDBenchmark.autoVec:·gc.count                               ss   10            ≈ 0                   counts
lavaMD.LavaMDBenchmark.explicitVec                                     ss   10          1.560 ±          0.133    s/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate                      ss   10         21.958 ±          1.306  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm                 ss   10   47669972.800 ±      12773.896    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space             ss   10        115.692 ±        553.114  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm        ss   10  259207987.200 ± 1239250728.378    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Survivor_Space         ss   10          0.061 ±          0.292  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Survivor_Space.norm    ss   10     137052.000 ±     655233.632    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.count                           ss   10          1.000                   counts
lavaMD.LavaMDBenchmark.explicitVec:·gc.time                            ss   10        123.000                       ms
lavaMD.LavaMDBenchmark.fullVec                                         ss   10          1.592 ±          0.057    s/op
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate                          ss   10         21.581 ±          0.648  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm                     ss   10   47667309.600 ±       3163.052    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.count                               ss   10            ≈ 0                   counts
lavaMD.LavaMDBenchmark.serial                                          ss   10         12.639 ±          0.144    s/op
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate                           ss   10         ≈ 10⁻⁴                   MB/sec
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm                      ss   10       1716.000 ±       3159.716    B/op
lavaMD.LavaMDBenchmark.serial:·gc.count                                ss   10            ≈ 0                   counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_total/2024-05-15_07:32:09/lavaMD/LavaMDBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5675.961 bytes/s; standard: 18.897 s, 107478 bytes, 1278 methods; osr:  0.152 s, 649 bytes, 1 methods; nmethods_size: 2187904 bytes; nmethods_code_size: 1544352 bytes}
  C2 {speed: 728.079 bytes/s; standard: 21.603 s, 17642 bytes, 121 methods; osr:  2.844 s, 157 bytes, 3 methods; nmethods_size: 161192 bytes; nmethods_code_size: 100640 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2194.113 bytes/s; standard:  0.330 s, 725 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23264 bytes}
  Tier2 {speed: 2093.547 bytes/s; standard:  0.059 s, 124 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1160 bytes; nmethods_code_size: 800 bytes}
  Tier3 {speed: 5748.987 bytes/s; standard: 18.508 s, 106629 bytes, 1124 methods; osr:  0.152 s, 649 bytes, 1 methods; nmethods_size: 2149864 bytes; nmethods_code_size: 1520288 bytes}
  Tier4 {speed: 728.079 bytes/s; standard: 21.603 s, 17642 bytes, 121 methods; osr:  2.844 s, 157 bytes, 3 methods; nmethods_size: 161192 bytes; nmethods_code_size: 100640 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  43.496 s
    Standard compilation   :  40.500 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.996 s, Average : 0.749 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       19.002 s
       Setup time:            0.117 s
       Build HIR:             9.935 s
         Parse:                 8.140 s
         Optimize blocks:       0.047 s
         GVN:                   0.654 s
         Null checks elim:      0.354 s
         Range checks elim:     0.281 s
         Other:                 0.459 s
       Emit LIR:              6.051 s
         LIR Gen:               2.153 s
         Linear Scan:           3.776 s
         Other:                 0.122 s
       Code Emission:         1.729 s
       Code Installation:     0.753 s
       Other:                 0.417 s

    C2 Compile Time:       27.004 s
       Parse:                 6.066 s
       Optimize:              8.501 s
         Escape Analysis:       0.521 s
           Conn Graph:            0.495 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.157 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.020 s
         IdealLoop:             4.602 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.170 s
         GVN 2:                 0.037 s
         Macro Expand:          0.766 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.224 s
         Other:                 1.003 s
       Matcher:                    2.888 s
         Post Selection Cleanup:   0.151 s
       Scheduler:                  2.050 s
       Regalloc:              4.857 s
         Ctor Chaitin:          0.007 s
         Build IFG (virt):      0.101 s
         Build IFG (phys):      0.672 s
         Compute Liveness:      1.396 s
         Regalloc Split:        0.690 s
         Postalloc Copy Rem:    1.242 s
         Merge multidefs:       0.088 s
         Fixup Spills:          0.064 s
         Compact:               0.010 s
         Coalesce 1:            0.252 s
         Coalesce 2:            0.101 s
         Coalesce 3:            0.040 s
         Cache LRG:             0.007 s
         Simplify:              0.100 s
         Select:                0.152 s
       Block Ordering:        0.278 s
       Peephole:              0.066 s
       Code Emission:           2.037 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.778 s
         Build OOP maps:        0.423 s
         Fill buffer:           0.614 s
         Code Installation:     0.064 s
         Other:                 0.158 s
       Other:                 0.197 s

  Total compiled methods    :     1403 methods
    Standard compilation    :     1399 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   125926 bytes
    Standard compilation    :   125120 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     2895 bytes/s

  nmethod code size         :  2349096 bytes
  nmethod total size        :  1644992 bytes
