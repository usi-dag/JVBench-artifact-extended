# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.463 s/op
# Warmup Iteration   2: 2.142 s/op
# Warmup Iteration   3: 2.142 s/op
# Warmup Iteration   4: 2.141 s/op
# Warmup Iteration   5: 2.143 s/op
# Warmup Iteration   6: 2.144 s/op
# Warmup Iteration   7: 2.143 s/op
# Warmup Iteration   8: 2.143 s/op
# Warmup Iteration   9: 2.143 s/op
# Warmup Iteration  10: 2.142 s/op
Iteration   1: 2.142 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.142 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.142 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.143 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.143 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.143 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.142 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.143 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.143 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.142 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 418697.398 bytes/s; standard:  0.154 s, 64288 bytes, 884 methods; osr:  0.003 s, 1569 bytes, 8 methods; nmethods_size: 1365880 bytes; nmethods_code_size: 963232 bytes}
  C2 {speed: 45392.579 bytes/s; standard:  0.131 s, 6624 bytes, 68 methods; osr:  0.037 s, 980 bytes, 8 methods; nmethods_size: 87480 bytes; nmethods_code_size: 56992 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 133687.424 bytes/s; standard:  0.005 s, 688 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34160 bytes; nmethods_code_size: 21632 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 428337.985 bytes/s; standard:  0.149 s, 63600 bytes, 742 methods; osr:  0.003 s, 1569 bytes, 8 methods; nmethods_size: 1331720 bytes; nmethods_code_size: 941600 bytes}
  Tier4 {speed: 45392.579 bytes/s; standard:  0.131 s, 6624 bytes, 68 methods; osr:  0.037 s, 980 bytes, 8 methods; nmethods_size: 87480 bytes; nmethods_code_size: 56992 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.325 s
    Standard compilation   :   0.285 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.040 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.155 s
       Setup time:            0.001 s
       Build HIR:             0.067 s
         Parse:                 0.054 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.051 s
         LIR Gen:               0.011 s
         Linear Scan:           0.040 s
         Other:                 0.001 s
       Code Emission:         0.016 s
       Code Installation:     0.013 s
       Other:                 0.007 s

    C2 Compile Time:        0.169 s
       Parse:                 0.014 s
       Optimize:              0.084 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.069 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.009 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.012 s
       Regalloc:              0.040 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.009 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
         Other:                 0.000 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      968 methods
    Standard compilation    :      952 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :    73461 bytes
    Standard compilation    :    70912 bytes
    On stack replacement    :     2549 bytes
  Average compilation speed :   226168 bytes/s

  nmethod code size         :  1453360 bytes
  nmethod total size        :  1020224 bytes


Result "jvbench.somier.SomierBenchmark.autoVec":
  N = 10
  mean =      2.143 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [2.141, 2.141) = 0 
    [2.141, 2.142) = 0 
    [2.142, 2.142) = 1 
    [2.142, 2.142) = 2 
    [2.142, 2.142) = 0 
    [2.142, 2.143) = 2 
    [2.143, 2.143) = 1 
    [2.143, 2.143) = 2 
    [2.143, 2.143) = 1 
    [2.143, 2.144) = 1 
    [2.144, 2.144) = 0 
    [2.144, 2.144) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.142 s/op
     p(50.0000) =      2.143 s/op
     p(90.0000) =      2.143 s/op
     p(95.0000) =      2.143 s/op
     p(99.0000) =      2.143 s/op
     p(99.9000) =      2.143 s/op
     p(99.9900) =      2.143 s/op
     p(99.9990) =      2.143 s/op
     p(99.9999) =      2.143 s/op
    p(100.0000) =      2.143 s/op

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:02:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.983 s/op
# Warmup Iteration   2: 0.623 s/op
# Warmup Iteration   3: 0.623 s/op
# Warmup Iteration   4: 0.623 s/op
# Warmup Iteration   5: 0.623 s/op
# Warmup Iteration   6: 0.622 s/op
# Warmup Iteration   7: 0.623 s/op
# Warmup Iteration   8: 0.623 s/op
# Warmup Iteration   9: 0.622 s/op
# Warmup Iteration  10: 0.624 s/op
Iteration   1: 0.622 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.622 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.624 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.623 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 377571.376 bytes/s; standard:  0.204 s, 77858 bytes, 1077 methods; osr:  0.009 s, 2631 bytes, 8 methods; nmethods_size: 1994216 bytes; nmethods_code_size: 1418272 bytes}
  C2 {speed: 63497.784 bytes/s; standard:  0.237 s, 15356 bytes, 108 methods; osr:  0.108 s, 6578 bytes, 11 methods; nmethods_size: 137056 bytes; nmethods_code_size: 86464 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 147880.648 bytes/s; standard:  0.005 s, 738 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23008 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 383077.410 bytes/s; standard:  0.199 s, 77120 bytes, 925 methods; osr:  0.009 s, 2631 bytes, 8 methods; nmethods_size: 1957800 bytes; nmethods_code_size: 1395264 bytes}
  Tier4 {speed: 63497.784 bytes/s; standard:  0.237 s, 15356 bytes, 108 methods; osr:  0.108 s, 6578 bytes, 11 methods; nmethods_size: 137056 bytes; nmethods_code_size: 86464 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.559 s
    Standard compilation   :   0.441 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.118 s, Average : 0.006 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.211 s
       Setup time:            0.001 s
       Build HIR:             0.091 s
         Parse:                 0.076 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.066 s
         LIR Gen:               0.014 s
         Linear Scan:           0.051 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.023 s
       Other:                 0.005 s

    C2 Compile Time:        0.346 s
       Parse:                 0.080 s
       Optimize:              0.141 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.006 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.001 s)
           Other:                 0.006 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.003 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.096 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.011 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.021 s
       Regalloc:              0.071 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.024 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.016 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.004 s

  Total compiled methods    :     1204 methods
    Standard compilation    :     1185 methods
    On stack replacement    :       19 methods
  Total compiled bytecodes  :   102423 bytes
    Standard compilation    :    93214 bytes
    On stack replacement    :     9209 bytes
  Average compilation speed :   183354 bytes/s

  nmethod code size         :  2131272 bytes
  nmethod total size        :  1504736 bytes


Result "jvbench.somier.SomierBenchmark.explicitVec":
  N = 10
  mean =      0.623 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.622, 0.622) = 0 
    [0.622, 0.622) = 0 
    [0.622, 0.622) = 2 
    [0.622, 0.622) = 0 
    [0.622, 0.623) = 0 
    [0.623, 0.623) = 1 
    [0.623, 0.623) = 1 
    [0.623, 0.623) = 3 
    [0.623, 0.623) = 0 
    [0.623, 0.623) = 1 
    [0.623, 0.623) = 1 
    [0.623, 0.623) = 0 
    [0.623, 0.624) = 1 
    [0.624, 0.624) = 0 
    [0.624, 0.624) = 0 
    [0.624, 0.624) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.622 s/op
     p(50.0000) =      0.623 s/op
     p(90.0000) =      0.624 s/op
     p(95.0000) =      0.624 s/op
     p(99.0000) =      0.624 s/op
     p(99.9000) =      0.624 s/op
     p(99.9900) =      0.624 s/op
     p(99.9990) =      0.624 s/op
     p(99.9999) =      0.624 s/op
    p(100.0000) =      0.624 s/op

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻³ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:01:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.921 s/op
# Warmup Iteration   2: 0.623 s/op
# Warmup Iteration   3: 0.622 s/op
# Warmup Iteration   4: 0.631 s/op
# Warmup Iteration   5: 0.633 s/op
# Warmup Iteration   6: 0.618 s/op
# Warmup Iteration   7: 0.617 s/op
# Warmup Iteration   8: 0.617 s/op
# Warmup Iteration   9: 0.617 s/op
# Warmup Iteration  10: 0.617 s/op
Iteration   1: 0.617 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.618 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.617 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.618 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.620 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.619 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.619 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.618 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.618 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.618 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 368829.741 bytes/s; standard:  0.208 s, 77470 bytes, 1078 methods; osr:  0.009 s, 2631 bytes, 8 methods; nmethods_size: 1963144 bytes; nmethods_code_size: 1396096 bytes}
  C2 {speed: 72126.478 bytes/s; standard:  0.215 s, 15418 bytes, 108 methods; osr:  0.073 s, 5372 bytes, 13 methods; nmethods_size: 140976 bytes; nmethods_code_size: 89216 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 131183.512 bytes/s; standard:  0.006 s, 738 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23008 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 375149.409 bytes/s; standard:  0.202 s, 76732 bytes, 926 methods; osr:  0.009 s, 2631 bytes, 8 methods; nmethods_size: 1926728 bytes; nmethods_code_size: 1373088 bytes}
  Tier4 {speed: 72126.478 bytes/s; standard:  0.215 s, 15418 bytes, 108 methods; osr:  0.073 s, 5372 bytes, 13 methods; nmethods_size: 140976 bytes; nmethods_code_size: 89216 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.505 s
    Standard compilation   :   0.423 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.082 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.215 s
       Setup time:            0.001 s
       Build HIR:             0.097 s
         Parse:                 0.081 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.070 s
         LIR Gen:               0.017 s
         Linear Scan:           0.053 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.019 s
       Other:                 0.005 s

    C2 Compile Time:        0.289 s
       Parse:                 0.061 s
       Optimize:              0.114 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.004 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.004 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.002 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.080 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.015 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.059 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.013 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.009 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.021 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.006 s
         Other:                 0.005 s

  Total compiled methods    :     1207 methods
    Standard compilation    :     1186 methods
    On stack replacement    :       21 methods
  Total compiled bytecodes  :   100891 bytes
    Standard compilation    :    92888 bytes
    On stack replacement    :     8003 bytes
  Average compilation speed :   199618 bytes/s

  nmethod code size         :  2104120 bytes
  nmethod total size        :  1485312 bytes


Result "jvbench.somier.SomierBenchmark.fullVec":
  N = 10
  mean =      0.618 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.616, 0.616) = 0 
    [0.616, 0.616) = 0 
    [0.616, 0.617) = 0 
    [0.617, 0.617) = 1 
    [0.617, 0.617) = 0 
    [0.617, 0.617) = 1 
    [0.617, 0.618) = 2 
    [0.618, 0.618) = 2 
    [0.618, 0.618) = 1 
    [0.618, 0.618) = 0 
    [0.618, 0.619) = 0 
    [0.619, 0.619) = 1 
    [0.619, 0.619) = 0 
    [0.619, 0.619) = 1 
    [0.619, 0.620) = 1 
    [0.620, 0.620) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.617 s/op
     p(50.0000) =      0.618 s/op
     p(90.0000) =      0.620 s/op
     p(95.0000) =      0.620 s/op
     p(99.0000) =      0.620 s/op
     p(99.9000) =      0.620 s/op
     p(99.9900) =      0.620 s/op
     p(99.9990) =      0.620 s/op
     p(99.9999) =      0.620 s/op
    p(100.0000) =      0.620 s/op

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻³ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.472 s/op
# Warmup Iteration   2: 2.193 s/op
# Warmup Iteration   3: 2.187 s/op
# Warmup Iteration   4: 2.187 s/op
# Warmup Iteration   5: 2.190 s/op
# Warmup Iteration   6: 2.181 s/op
# Warmup Iteration   7: 2.186 s/op
# Warmup Iteration   8: 2.193 s/op
# Warmup Iteration   9: 2.185 s/op
# Warmup Iteration  10: 2.187 s/op
Iteration   1: 2.194 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.195 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.195 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.194 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.187 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.189 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.196 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.191 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.187 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 403470.964 bytes/s; standard:  0.161 s, 64454 bytes, 885 methods; osr:  0.003 s, 1569 bytes, 8 methods; nmethods_size: 1360520 bytes; nmethods_code_size: 960096 bytes}
  C2 {speed: 48789.219 bytes/s; standard:  0.126 s, 6957 bytes, 68 methods; osr:  0.037 s, 980 bytes, 8 methods; nmethods_size: 89120 bytes; nmethods_code_size: 58048 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 135252.105 bytes/s; standard:  0.005 s, 688 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34160 bytes; nmethods_code_size: 21632 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 412076.252 bytes/s; standard:  0.156 s, 63766 bytes, 743 methods; osr:  0.003 s, 1569 bytes, 8 methods; nmethods_size: 1326360 bytes; nmethods_code_size: 938464 bytes}
  Tier4 {speed: 48789.219 bytes/s; standard:  0.126 s, 6957 bytes, 68 methods; osr:  0.037 s, 980 bytes, 8 methods; nmethods_size: 89120 bytes; nmethods_code_size: 58048 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.326 s
    Standard compilation   :   0.287 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.039 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.162 s
       Setup time:            0.001 s
       Build HIR:             0.062 s
         Parse:                 0.050 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.049 s
         LIR Gen:               0.010 s
         Linear Scan:           0.038 s
         Other:                 0.001 s
       Code Emission:         0.016 s
       Code Installation:     0.028 s
       Other:                 0.007 s

    C2 Compile Time:        0.164 s
       Parse:                 0.014 s
       Optimize:              0.076 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.060 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.009 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.012 s
       Regalloc:              0.039 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.005 s
       Other:                 0.000 s

  Total compiled methods    :      969 methods
    Standard compilation    :      953 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :    73960 bytes
    Standard compilation    :    71411 bytes
    On stack replacement    :     2549 bytes
  Average compilation speed :   226650 bytes/s

  nmethod code size         :  1449640 bytes
  nmethod total size        :  1018144 bytes


Result "jvbench.somier.SomierBenchmark.serial":
  N = 10
  mean =      2.191 ±(99.9%) 0.006 s/op

  Histogram, s/op:
    [2.180, 2.181) = 0 
    [2.181, 2.183) = 0 
    [2.183, 2.184) = 0 
    [2.184, 2.185) = 1 
    [2.185, 2.186) = 0 
    [2.186, 2.188) = 2 
    [2.188, 2.189) = 0 
    [2.189, 2.190) = 1 
    [2.190, 2.191) = 1 
    [2.191, 2.193) = 0 
    [2.193, 2.194) = 1 
    [2.194, 2.195) = 2 
    [2.195, 2.196) = 2 
    [2.196, 2.198) = 0 
    [2.198, 2.199) = 0 
    [2.199, 2.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.185 s/op
     p(50.0000) =      2.192 s/op
     p(90.0000) =      2.196 s/op
     p(95.0000) =      2.196 s/op
     p(99.0000) =      2.196 s/op
     p(99.9000) =      2.196 s/op
     p(99.9900) =      2.196 s/op
     p(99.9990) =      2.196 s/op
     p(99.9999) =      2.196 s/op
    p(100.0000) =      2.196 s/op

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:02:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                        Mode  Cnt    Score    Error   Units
SomierBenchmark.autoVec                            ss   10    2.143 ±  0.001    s/op
SomierBenchmark.autoVec:·gc.alloc.rate             ss   10   ≈ 10⁻⁴           MB/sec
SomierBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
SomierBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
SomierBenchmark.explicitVec                        ss   10    0.623 ±  0.001    s/op
SomierBenchmark.explicitVec:·gc.alloc.rate         ss   10   ≈ 10⁻³           MB/sec
SomierBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
SomierBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
SomierBenchmark.fullVec                            ss   10    0.618 ±  0.001    s/op
SomierBenchmark.fullVec:·gc.alloc.rate             ss   10   ≈ 10⁻³           MB/sec
SomierBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
SomierBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
SomierBenchmark.serial                             ss   10    2.191 ±  0.006    s/op
SomierBenchmark.serial:·gc.alloc.rate              ss   10   ≈ 10⁻⁴           MB/sec
SomierBenchmark.serial:·gc.alloc.rate.norm         ss   10  504.000 ±  0.001    B/op
SomierBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-16_06:35:58/somier/SomierBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 462198.576 bytes/s; standard:  0.237 s, 109445 bytes, 1287 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2227520 bytes; nmethods_code_size: 1576224 bytes}
  C2 {speed: 69646.771 bytes/s; standard:  0.239 s, 16866 bytes, 120 methods; osr:  0.005 s, 157 bytes, 3 methods; nmethods_size: 154088 bytes; nmethods_code_size: 96000 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 135298.545 bytes/s; standard:  0.005 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 469668.771 bytes/s; standard:  0.232 s, 108725 bytes, 1135 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2190888 bytes; nmethods_code_size: 1553120 bytes}
  Tier4 {speed: 69646.771 bytes/s; standard:  0.239 s, 16866 bytes, 120 methods; osr:  0.005 s, 157 bytes, 3 methods; nmethods_size: 154088 bytes; nmethods_code_size: 96000 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.483 s
    Standard compilation   :   0.476 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.007 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.235 s
       Setup time:            0.001 s
       Build HIR:             0.092 s
         Parse:                 0.071 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.086 s
         LIR Gen:               0.017 s
         Linear Scan:           0.068 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.024 s
       Other:                 0.005 s

    C2 Compile Time:        0.245 s
       Parse:                 0.037 s
       Optimize:              0.077 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.008 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.051 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.081 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.027 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.012 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1411 methods
    Standard compilation    :     1407 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   127117 bytes
    Standard compilation    :   126311 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :   263391 bytes/s

  nmethod code size         :  2381608 bytes
  nmethod total size        :  1672224 bytes
