# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.262 s/op
# Warmup Iteration   2: 4.274 s/op
# Warmup Iteration   3: 3.831 s/op
# Warmup Iteration   4: 3.816 s/op
# Warmup Iteration   5: 3.826 s/op
# Warmup Iteration   6: 3.824 s/op
# Warmup Iteration   7: 3.825 s/op
# Warmup Iteration   8: 3.811 s/op
# Warmup Iteration   9: 3.817 s/op
# Warmup Iteration  10: 3.826 s/op
Iteration   1: 3.820 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.821 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.820 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.819 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.811 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.819 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.811 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.822 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.828 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.825 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 425915.528 bytes/s; standard:  0.178 s, 74388 bytes, 939 methods; osr:  0.005 s, 3532 bytes, 4 methods; nmethods_size: 1572712 bytes; nmethods_code_size: 1110816 bytes}
  C2 {speed: 90832.594 bytes/s; standard:  0.172 s, 15694 bytes, 93 methods; osr:  0.035 s, 3110 bytes, 6 methods; nmethods_size: 125792 bytes; nmethods_code_size: 77024 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 129993.025 bytes/s; standard:  0.005 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 434810.694 bytes/s; standard:  0.172 s, 73694 bytes, 796 methods; osr:  0.005 s, 3532 bytes, 4 methods; nmethods_size: 1538400 bytes; nmethods_code_size: 1089088 bytes}
  Tier4 {speed: 90832.594 bytes/s; standard:  0.172 s, 15694 bytes, 93 methods; osr:  0.035 s, 3110 bytes, 6 methods; nmethods_size: 125792 bytes; nmethods_code_size: 77024 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.390 s
    Standard compilation   :   0.350 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.040 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.181 s
       Setup time:            0.001 s
       Build HIR:             0.079 s
         Parse:                 0.064 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.061 s
         LIR Gen:               0.013 s
         Linear Scan:           0.048 s
         Other:                 0.001 s
       Code Emission:         0.018 s
       Code Installation:     0.017 s
       Other:                 0.005 s

    C2 Compile Time:        0.208 s
       Parse:                 0.029 s
       Optimize:              0.076 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.008 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.045 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.013 s
       Matcher:                    0.013 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.016 s
       Regalloc:              0.060 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.013 s
         Compute Liveness:      0.021 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.011 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1042 methods
    Standard compilation    :     1032 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    96724 bytes
    Standard compilation    :    90082 bytes
    On stack replacement    :     6642 bytes
  Average compilation speed :   248032 bytes/s

  nmethod code size         :  1698504 bytes
  nmethod total size        :  1187840 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.autoVec":
  N = 10
  mean =      3.820 ±(99.9%) 0.008 s/op

  Histogram, s/op:
    [3.810, 3.811) = 1 
    [3.811, 3.813) = 1 
    [3.813, 3.814) = 0 
    [3.814, 3.815) = 0 
    [3.815, 3.816) = 0 
    [3.816, 3.818) = 0 
    [3.818, 3.819) = 1 
    [3.819, 3.820) = 2 
    [3.820, 3.821) = 1 
    [3.821, 3.823) = 2 
    [3.823, 3.824) = 0 
    [3.824, 3.825) = 0 
    [3.825, 3.826) = 1 
    [3.826, 3.828) = 0 
    [3.828, 3.829) = 1 
    [3.829, 3.830) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.811 s/op
     p(50.0000) =      3.820 s/op
     p(90.0000) =      3.828 s/op
     p(95.0000) =      3.828 s/op
     p(99.0000) =      3.828 s/op
     p(99.9000) =      3.828 s/op
     p(99.9900) =      3.828 s/op
     p(99.9990) =      3.828 s/op
     p(99.9999) =      3.828 s/op
    p(100.0000) =      3.828 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:04:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.643 s/op
# Warmup Iteration   2: 1.252 s/op
# Warmup Iteration   3: 0.437 s/op
# Warmup Iteration   4: 0.435 s/op
# Warmup Iteration   5: 0.433 s/op
# Warmup Iteration   6: 0.438 s/op
# Warmup Iteration   7: 0.436 s/op
# Warmup Iteration   8: 0.435 s/op
# Warmup Iteration   9: 0.435 s/op
# Warmup Iteration  10: 0.438 s/op
Iteration   1: 0.438 s/op
                 ·gc.alloc.rate:      48.415 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.438 s/op
                 ·gc.alloc.rate:      48.427 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.435 s/op
                 ·gc.alloc.rate:      48.577 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.435 s/op
                 ·gc.alloc.rate:      48.596 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.438 s/op
                 ·gc.alloc.rate:      48.441 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.438 s/op
                 ·gc.alloc.rate:      48.427 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.435 s/op
                 ·gc.alloc.rate:      48.588 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.435 s/op
                 ·gc.alloc.rate:      48.599 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.436 s/op
                 ·gc.alloc.rate:      48.524 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.438 s/op
                 ·gc.alloc.rate:               48.442 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      788.132 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 775946240.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 390785.887 bytes/s; standard:  0.242 s, 93692 bytes, 1218 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2341728 bytes; nmethods_code_size: 1652256 bytes}
  C2 {speed: 68486.369 bytes/s; standard:  0.339 s, 24176 bytes, 161 methods; osr:  0.108 s, 6393 bytes, 10 methods; nmethods_size: 242880 bytes; nmethods_code_size: 148128 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 128810.612 bytes/s; standard:  0.006 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 397176.378 bytes/s; standard:  0.236 s, 92923 bytes, 1060 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2303952 bytes; nmethods_code_size: 1628384 bytes}
  Tier4 {speed: 68486.369 bytes/s; standard:  0.339 s, 24176 bytes, 161 methods; osr:  0.108 s, 6393 bytes, 10 methods; nmethods_size: 242880 bytes; nmethods_code_size: 148128 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.697 s
    Standard compilation   :   0.581 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.116 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.248 s
       Setup time:            0.001 s
       Build HIR:             0.110 s
         Parse:                 0.090 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.082 s
         LIR Gen:               0.017 s
         Linear Scan:           0.064 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.024 s
       Other:                 0.006 s

    C2 Compile Time:        0.447 s
       Parse:                 0.080 s
       Optimize:              0.160 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.003 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.004 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.004 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.096 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.013 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.020 s
       Matcher:                    0.026 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.125 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.028 s
         Compute Liveness:      0.039 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.008 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.022 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.006 s
         Code Installation:     0.002 s
         Other:                 0.005 s
       Other:                 0.000 s

  Total compiled methods    :     1393 methods
    Standard compilation    :     1379 methods
    On stack replacement    :       14 methods
  Total compiled bytecodes  :   128542 bytes
    Standard compilation    :   117868 bytes
    On stack replacement    :    10674 bytes
  Average compilation speed :   184406 bytes/s

  nmethod code size         :  2584608 bytes
  nmethod total size        :  1800384 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.explicitVec":
  N = 10
  mean =      0.437 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.434, 0.435) = 0 
    [0.435, 0.435) = 2 
    [0.435, 0.436) = 2 
    [0.436, 0.436) = 0 
    [0.436, 0.437) = 1 
    [0.437, 0.437) = 0 
    [0.437, 0.438) = 0 
    [0.438, 0.438) = 1 
    [0.438, 0.439) = 4 
    [0.439, 0.439) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.435 s/op
     p(50.0000) =      0.437 s/op
     p(90.0000) =      0.438 s/op
     p(95.0000) =      0.438 s/op
     p(99.0000) =      0.438 s/op
     p(99.9000) =      0.438 s/op
     p(99.9900) =      0.438 s/op
     p(99.9990) =      0.438 s/op
     p(99.9999) =      0.438 s/op
    p(100.0000) =      0.438 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate":
  48.503 ±(99.9%) 0.121 MB/sec [Average]
  (min, avg, max) = (48.415, 48.503, 48.599), stdev = 0.080
  CI (99.9%): [48.382, 48.625] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space":
  78.813 ±(99.9%) 376.799 MB/sec [Average]
  (min, avg, max) = (≈ 0, 78.813, 788.132), stdev = 249.229
  CI (99.9%): [≈ 0, 455.612] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm":
  77594624.000 ±(99.9%) 370973114.482 B/op [Average]
  (min, avg, max) = (≈ 0, 77594624.000, 775946240.000), stdev = 245375746.024
  CI (99.9%): [≈ 0, 448567738.482] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:01:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.694 s/op
# Warmup Iteration   2: 1.253 s/op
# Warmup Iteration   3: 0.437 s/op
# Warmup Iteration   4: 0.435 s/op
# Warmup Iteration   5: 0.438 s/op
# Warmup Iteration   6: 0.438 s/op
# Warmup Iteration   7: 0.431 s/op
# Warmup Iteration   8: 0.432 s/op
# Warmup Iteration   9: 0.434 s/op
# Warmup Iteration  10: 0.435 s/op
Iteration   1: 0.434 s/op
                 ·gc.alloc.rate:      48.635 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.435 s/op
                 ·gc.alloc.rate:      48.578 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.435 s/op
                 ·gc.alloc.rate:      48.558 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.438 s/op
                 ·gc.alloc.rate:      48.421 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.438 s/op
                 ·gc.alloc.rate:      48.448 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.435 s/op
                 ·gc.alloc.rate:      48.587 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.435 s/op
                 ·gc.alloc.rate:      48.600 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.438 s/op
                 ·gc.alloc.rate:      48.429 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.438 s/op
                 ·gc.alloc.rate:      48.410 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.439 s/op
                 ·gc.alloc.rate:               48.416 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      787.719 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 775946240.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 419041.460 bytes/s; standard:  0.225 s, 93594 bytes, 1215 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2324120 bytes; nmethods_code_size: 1639968 bytes}
  C2 {speed: 67342.797 bytes/s; standard:  0.314 s, 24330 bytes, 160 methods; osr:  0.142 s, 6393 bytes, 10 methods; nmethods_size: 242512 bytes; nmethods_code_size: 147712 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 141270.182 bytes/s; standard:  0.005 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 425669.570 bytes/s; standard:  0.219 s, 92825 bytes, 1057 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2286344 bytes; nmethods_code_size: 1616096 bytes}
  Tier4 {speed: 67342.797 bytes/s; standard:  0.314 s, 24330 bytes, 160 methods; osr:  0.142 s, 6393 bytes, 10 methods; nmethods_size: 242512 bytes; nmethods_code_size: 147712 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.690 s
    Standard compilation   :   0.539 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.151 s, Average : 0.011 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.231 s
       Setup time:            0.001 s
       Build HIR:             0.100 s
         Parse:                 0.082 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.078 s
         LIR Gen:               0.016 s
         Linear Scan:           0.061 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.022 s
       Other:                 0.006 s

    C2 Compile Time:        0.457 s
       Parse:                 0.080 s
       Optimize:              0.157 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.005 s
         Vector:                0.005 s
           Box elimination:     0.005 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.097 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.010 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.017 s
       Matcher:                    0.026 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.030 s
       Regalloc:              0.140 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.032 s
         Compute Liveness:      0.041 s
         Regalloc Split:        0.013 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.008 s
         Select:                0.010 s
         Other:                 0.003 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.006 s
         Code Installation:     0.002 s
         Other:                 0.002 s
       Other:                 0.000 s

  Total compiled methods    :     1389 methods
    Standard compilation    :     1375 methods
    On stack replacement    :       14 methods
  Total compiled bytecodes  :   128598 bytes
    Standard compilation    :   117924 bytes
    On stack replacement    :    10674 bytes
  Average compilation speed :   186431 bytes/s

  nmethod code size         :  2566632 bytes
  nmethod total size        :  1787680 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.fullVec":
  N = 10
  mean =      0.437 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [0.433, 0.434) = 0 
    [0.434, 0.434) = 1 
    [0.434, 0.435) = 0 
    [0.435, 0.435) = 1 
    [0.435, 0.436) = 3 
    [0.436, 0.436) = 0 
    [0.436, 0.437) = 0 
    [0.437, 0.437) = 0 
    [0.437, 0.438) = 0 
    [0.438, 0.438) = 1 
    [0.438, 0.439) = 3 
    [0.439, 0.439) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.434 s/op
     p(50.0000) =      0.437 s/op
     p(90.0000) =      0.439 s/op
     p(95.0000) =      0.439 s/op
     p(99.0000) =      0.439 s/op
     p(99.9000) =      0.439 s/op
     p(99.9900) =      0.439 s/op
     p(99.9990) =      0.439 s/op
     p(99.9999) =      0.439 s/op
    p(100.0000) =      0.439 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate":
  48.508 ±(99.9%) 0.137 MB/sec [Average]
  (min, avg, max) = (48.410, 48.508, 48.635), stdev = 0.091
  CI (99.9%): [48.371, 48.645] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space":
  78.772 ±(99.9%) 376.602 MB/sec [Average]
  (min, avg, max) = (≈ 0, 78.772, 787.719), stdev = 249.099
  CI (99.9%): [≈ 0, 455.373] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm":
  77594624.000 ±(99.9%) 370973114.482 B/op [Average]
  (min, avg, max) = (≈ 0, 77594624.000, 775946240.000), stdev = 245375746.024
  CI (99.9%): [≈ 0, 448567738.482] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.175 s/op
# Warmup Iteration   2: 4.212 s/op
# Warmup Iteration   3: 3.799 s/op
# Warmup Iteration   4: 3.799 s/op
# Warmup Iteration   5: 3.799 s/op
# Warmup Iteration   6: 3.800 s/op
# Warmup Iteration   7: 3.800 s/op
# Warmup Iteration   8: 3.799 s/op
# Warmup Iteration   9: 3.799 s/op
# Warmup Iteration  10: 3.774 s/op
Iteration   1: 3.787 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.792 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.800 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.798 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 449463.780 bytes/s; standard:  0.169 s, 74812 bytes, 937 methods; osr:  0.005 s, 3532 bytes, 4 methods; nmethods_size: 1580944 bytes; nmethods_code_size: 1117344 bytes}
  C2 {speed: 91713.618 bytes/s; standard:  0.174 s, 15584 bytes, 95 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 125880 bytes; nmethods_code_size: 77408 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 138069.859 bytes/s; standard:  0.005 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 458710.071 bytes/s; standard:  0.164 s, 74118 bytes, 794 methods; osr:  0.005 s, 3532 bytes, 4 methods; nmethods_size: 1546632 bytes; nmethods_code_size: 1095616 bytes}
  Tier4 {speed: 91713.618 bytes/s; standard:  0.174 s, 15584 bytes, 95 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 125880 bytes; nmethods_code_size: 77408 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.378 s
    Standard compilation   :   0.343 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.035 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.172 s
       Setup time:            0.001 s
       Build HIR:             0.074 s
         Parse:                 0.060 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.057 s
         LIR Gen:               0.012 s
         Linear Scan:           0.044 s
         Other:                 0.001 s
       Code Emission:         0.018 s
       Code Installation:     0.018 s
       Other:                 0.005 s

    C2 Compile Time:        0.205 s
       Parse:                 0.029 s
       Optimize:              0.076 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.045 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.013 s
       Matcher:                    0.013 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.015 s
       Regalloc:              0.058 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.013 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.010 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1042 methods
    Standard compilation    :     1032 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    97038 bytes
    Standard compilation    :    90396 bytes
    On stack replacement    :     6642 bytes
  Average compilation speed :   256520 bytes/s

  nmethod code size         :  1706824 bytes
  nmethod total size        :  1194752 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.serial":
  N = 10
  mean =      3.797 ±(99.9%) 0.006 s/op

  Histogram, s/op:
    [3.780, 3.781) = 0 
    [3.781, 3.783) = 0 
    [3.783, 3.784) = 0 
    [3.784, 3.785) = 0 
    [3.785, 3.786) = 0 
    [3.786, 3.788) = 1 
    [3.788, 3.789) = 0 
    [3.789, 3.790) = 0 
    [3.790, 3.791) = 0 
    [3.791, 3.793) = 1 
    [3.793, 3.794) = 0 
    [3.794, 3.795) = 0 
    [3.795, 3.796) = 0 
    [3.796, 3.798) = 0 
    [3.798, 3.799) = 3 
    [3.799, 3.800) = 5 

  Percentiles, s/op:
      p(0.0000) =      3.787 s/op
     p(50.0000) =      3.799 s/op
     p(90.0000) =      3.799 s/op
     p(95.0000) =      3.800 s/op
     p(99.0000) =      3.800 s/op
     p(99.9000) =      3.800 s/op
     p(99.9900) =      3.800 s/op
     p(99.9990) =      3.800 s/op
     p(99.9999) =      3.800 s/op
    p(100.0000) =      3.800 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:03:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt         Score           Error   Units
lavaMD.LavaMDBenchmark.autoVec                                     ss   10         3.820 ±         0.008    s/op
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate                      ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm                 ss   10       507.200 ±        15.299    B/op
lavaMD.LavaMDBenchmark.autoVec:·gc.count                           ss   10           ≈ 0                  counts
lavaMD.LavaMDBenchmark.explicitVec                                 ss   10         0.437 ±         0.002    s/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate                  ss   10        48.503 ±         0.121  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm             ss   10  47668758.400 ±     12690.454    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space         ss   10        78.813 ±       376.799  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm    ss   10  77594624.000 ± 370973114.482    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.count                       ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.explicitVec:·gc.time                        ss   10         1.000                      ms
lavaMD.LavaMDBenchmark.fullVec                                     ss   10         0.437 ±         0.003    s/op
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate                      ss   10        48.508 ±         0.137  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm                 ss   10  47668758.400 ±     12690.454    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space             ss   10        78.772 ±       376.602  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm        ss   10  77594624.000 ± 370973114.482    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.count                           ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.fullVec:·gc.time                            ss   10         1.000                      ms
lavaMD.LavaMDBenchmark.serial                                      ss   10         3.797 ±         0.006    s/op
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate                       ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm                  ss   10       507.200 ±        15.299    B/op
lavaMD.LavaMDBenchmark.serial:·gc.count                            ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-16_06:35:58/lavaMD/LavaMDBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 457829.283 bytes/s; standard:  0.232 s, 106178 bytes, 1269 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2160992 bytes; nmethods_code_size: 1524416 bytes}
  C2 {speed: 75804.354 bytes/s; standard:  0.230 s, 17663 bytes, 126 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 155496 bytes; nmethods_code_size: 98144 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 138291.559 bytes/s; standard:  0.005 s, 725 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23264 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 465173.678 bytes/s; standard:  0.227 s, 105453 bytes, 1116 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2124112 bytes; nmethods_code_size: 1501152 bytes}
  Tier4 {speed: 75804.354 bytes/s; standard:  0.230 s, 17663 bytes, 126 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 155496 bytes; nmethods_code_size: 98144 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.468 s
    Standard compilation   :   0.462 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.007 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.231 s
       Setup time:            0.001 s
       Build HIR:             0.092 s
         Parse:                 0.071 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.085 s
         LIR Gen:               0.017 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.021 s
       Other:                 0.006 s

    C2 Compile Time:        0.236 s
       Parse:                 0.044 s
       Optimize:              0.069 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.008 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.047 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.004 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.077 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.025 s
         Regalloc Split:        0.009 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1399 methods
    Standard compilation    :     1395 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   124647 bytes
    Standard compilation    :   123841 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :   266105 bytes/s

  nmethod code size         :  2316488 bytes
  nmethod total size        :  1622560 bytes
