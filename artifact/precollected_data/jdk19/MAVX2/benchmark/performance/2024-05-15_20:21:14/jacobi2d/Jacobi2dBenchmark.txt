# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3.920 s/op
# Warmup Iteration   2: 3.912 s/op
# Warmup Iteration   3: 3.638 s/op
# Warmup Iteration   4: 3.860 s/op
# Warmup Iteration   5: 3.924 s/op
# Warmup Iteration   6: 3.917 s/op
# Warmup Iteration   7: 3.921 s/op
# Warmup Iteration   8: 3.920 s/op
# Warmup Iteration   9: 3.905 s/op
# Warmup Iteration  10: 3.009 s/op
Iteration   1: 3.017 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.018 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.011 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.012 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.013 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.014 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 403377.662 bytes/s; standard:  0.162 s, 64974 bytes, 912 methods; osr:  0.002 s, 1099 bytes, 4 methods; nmethods_size: 1389824 bytes; nmethods_code_size: 989696 bytes}
  C2 {speed: 48009.858 bytes/s; standard:  0.102 s, 5885 bytes, 65 methods; osr:  0.031 s, 510 bytes, 4 methods; nmethods_size: 62704 bytes; nmethods_code_size: 42592 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 143813.825 bytes/s; standard:  0.005 s, 709 bytes, 146 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35056 bytes; nmethods_code_size: 22208 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 411432.366 bytes/s; standard:  0.157 s, 64265 bytes, 766 methods; osr:  0.002 s, 1099 bytes, 4 methods; nmethods_size: 1354768 bytes; nmethods_code_size: 967488 bytes}
  Tier4 {speed: 48009.858 bytes/s; standard:  0.102 s, 5885 bytes, 65 methods; osr:  0.031 s, 510 bytes, 4 methods; nmethods_size: 62704 bytes; nmethods_code_size: 42592 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.297 s
    Standard compilation   :   0.264 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.033 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.162 s
       Setup time:            0.001 s
       Build HIR:             0.073 s
         Parse:                 0.060 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.052 s
         LIR Gen:               0.011 s
         Linear Scan:           0.040 s
         Other:                 0.001 s
       Code Emission:         0.017 s
       Code Installation:     0.015 s
       Other:                 0.004 s

    C2 Compile Time:        0.134 s
       Parse:                 0.011 s
       Optimize:              0.063 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.050 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.008 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.008 s
       Regalloc:              0.030 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.007 s
         Compute Liveness:      0.011 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.004 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.007 s
         Other:                 0.001 s

  Total compiled methods    :      985 methods
    Standard compilation    :      977 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72468 bytes
    Standard compilation    :    70859 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :   243999 bytes/s

  nmethod code size         :  1452528 bytes
  nmethod total size        :  1032288 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =      3.013 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [3.010, 3.011) = 4 
    [3.011, 3.011) = 0 
    [3.011, 3.012) = 1 
    [3.012, 3.012) = 1 
    [3.012, 3.013) = 0 
    [3.013, 3.013) = 1 
    [3.013, 3.014) = 0 
    [3.014, 3.014) = 1 
    [3.014, 3.015) = 0 
    [3.015, 3.015) = 0 
    [3.015, 3.016) = 0 
    [3.016, 3.016) = 0 
    [3.016, 3.017) = 0 
    [3.017, 3.017) = 0 
    [3.017, 3.018) = 1 
    [3.018, 3.018) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.010 s/op
     p(50.0000) =      3.011 s/op
     p(90.0000) =      3.018 s/op
     p(95.0000) =      3.018 s/op
     p(99.0000) =      3.018 s/op
     p(99.9000) =      3.018 s/op
     p(99.9900) =      3.018 s/op
     p(99.9990) =      3.018 s/op
     p(99.9999) =      3.018 s/op
    p(100.0000) =      3.018 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:03:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.516 s/op
# Warmup Iteration   2: 2.418 s/op
# Warmup Iteration   3: 2.416 s/op
# Warmup Iteration   4: 2.419 s/op
# Warmup Iteration   5: 2.418 s/op
# Warmup Iteration   6: 2.417 s/op
# Warmup Iteration   7: 2.415 s/op
# Warmup Iteration   8: 2.411 s/op
# Warmup Iteration   9: 2.418 s/op
# Warmup Iteration  10: 2.415 s/op
Iteration   1: 2.398 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.435 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.438 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.444 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.428 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.417 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.418 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.416 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.419 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.414 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 379516.527 bytes/s; standard:  0.192 s, 73309 bytes, 1044 methods; osr:  0.005 s, 1463 bytes, 4 methods; nmethods_size: 1715592 bytes; nmethods_code_size: 1230144 bytes}
  C2 {speed: 61485.965 bytes/s; standard:  0.142 s, 9197 bytes, 91 methods; osr:  0.029 s, 1304 bytes, 5 methods; nmethods_size: 86968 bytes; nmethods_code_size: 56672 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 142397.606 bytes/s; standard:  0.005 s, 739 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23040 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 385931.470 bytes/s; standard:  0.187 s, 72570 bytes, 892 methods; osr:  0.005 s, 1463 bytes, 4 methods; nmethods_size: 1679176 bytes; nmethods_code_size: 1207104 bytes}
  Tier4 {speed: 61485.965 bytes/s; standard:  0.142 s, 9197 bytes, 91 methods; osr:  0.029 s, 1304 bytes, 5 methods; nmethods_size: 86968 bytes; nmethods_code_size: 56672 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.368 s
    Standard compilation   :   0.334 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.034 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.195 s
       Setup time:            0.001 s
       Build HIR:             0.083 s
         Parse:                 0.069 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.060 s
         LIR Gen:               0.012 s
         Linear Scan:           0.047 s
         Other:                 0.001 s
       Code Emission:         0.020 s
       Code Installation:     0.026 s
       Other:                 0.005 s

    C2 Compile Time:        0.172 s
       Parse:                 0.029 s
       Optimize:              0.068 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.004 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.001 s
           Box elimination:     0.001 s
             IGVN:              0.001 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.049 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.010 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.011 s
       Regalloc:              0.037 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.013 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.015 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.007 s
       Other:                 0.000 s

  Total compiled methods    :     1144 methods
    Standard compilation    :     1135 methods
    On stack replacement    :        9 methods
  Total compiled bytecodes  :    85273 bytes
    Standard compilation    :    82506 bytes
    On stack replacement    :     2767 bytes
  Average compilation speed :   231842 bytes/s

  nmethod code size         :  1802560 bytes
  nmethod total size        :  1286816 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =      2.423 ±(99.9%) 0.020 s/op

  Histogram, s/op:
    [2.390, 2.395) = 0 
    [2.395, 2.400) = 1 
    [2.400, 2.405) = 0 
    [2.405, 2.410) = 0 
    [2.410, 2.415) = 1 
    [2.415, 2.420) = 4 
    [2.420, 2.425) = 0 
    [2.425, 2.430) = 1 
    [2.430, 2.435) = 1 
    [2.435, 2.440) = 1 
    [2.440, 2.445) = 1 
    [2.445, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.398 s/op
     p(50.0000) =      2.419 s/op
     p(90.0000) =      2.443 s/op
     p(95.0000) =      2.444 s/op
     p(99.0000) =      2.444 s/op
     p(99.9000) =      2.444 s/op
     p(99.9900) =      2.444 s/op
     p(99.9990) =      2.444 s/op
     p(99.9999) =      2.444 s/op
    p(100.0000) =      2.444 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:02:18
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.498 s/op
# Warmup Iteration   2: 2.400 s/op
# Warmup Iteration   3: 2.402 s/op
# Warmup Iteration   4: 2.409 s/op
# Warmup Iteration   5: 2.409 s/op
# Warmup Iteration   6: 2.409 s/op
# Warmup Iteration   7: 2.407 s/op
# Warmup Iteration   8: 2.405 s/op
# Warmup Iteration   9: 2.405 s/op
# Warmup Iteration  10: 2.407 s/op
Iteration   1: 2.401 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.399 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.408 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.412 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.410 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.411 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.412 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.412 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.405 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.401 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 403900.206 bytes/s; standard:  0.180 s, 73078 bytes, 1050 methods; osr:  0.005 s, 1463 bytes, 4 methods; nmethods_size: 1713224 bytes; nmethods_code_size: 1228544 bytes}
  C2 {speed: 60246.577 bytes/s; standard:  0.146 s, 9363 bytes, 97 methods; osr:  0.033 s, 1399 bytes, 6 methods; nmethods_size: 89920 bytes; nmethods_code_size: 58176 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 140795.991 bytes/s; standard:  0.005 s, 739 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23040 bytes}
  Tier2 {speed: 147877.289 bytes/s; standard:  0.000 s, 11 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 400 bytes; nmethods_code_size: 288 bytes}
  Tier3 {speed: 411711.443 bytes/s; standard:  0.174 s, 72328 bytes, 897 methods; osr:  0.005 s, 1463 bytes, 4 methods; nmethods_size: 1676408 bytes; nmethods_code_size: 1205216 bytes}
  Tier4 {speed: 60246.577 bytes/s; standard:  0.146 s, 9363 bytes, 97 methods; osr:  0.033 s, 1399 bytes, 6 methods; nmethods_size: 89920 bytes; nmethods_code_size: 58176 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.364 s
    Standard compilation   :   0.326 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.038 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.183 s
       Setup time:            0.001 s
       Build HIR:             0.083 s
         Parse:                 0.069 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.059 s
         LIR Gen:               0.012 s
         Linear Scan:           0.046 s
         Other:                 0.001 s
       Code Emission:         0.019 s
       Code Installation:     0.017 s
       Other:                 0.005 s

    C2 Compile Time:        0.180 s
       Parse:                 0.030 s
       Optimize:              0.071 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.004 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.001 s
           Box elimination:     0.001 s
             IGVN:              0.001 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.051 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.012 s
       Regalloc:              0.039 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.015 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.008 s
       Other:                 0.000 s

  Total compiled methods    :     1158 methods
    Standard compilation    :     1148 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    85402 bytes
    Standard compilation    :    82540 bytes
    On stack replacement    :     2862 bytes
  Average compilation speed :   234898 bytes/s

  nmethod code size         :  1805488 bytes
  nmethod total size        :  1288448 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =      2.407 ±(99.9%) 0.008 s/op

  Histogram, s/op:
    [2.390, 2.393) = 0 
    [2.393, 2.395) = 0 
    [2.395, 2.398) = 0 
    [2.398, 2.400) = 1 
    [2.400, 2.403) = 2 
    [2.403, 2.405) = 0 
    [2.405, 2.408) = 1 
    [2.408, 2.410) = 1 
    [2.410, 2.413) = 5 
    [2.413, 2.415) = 0 
    [2.415, 2.418) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.399 s/op
     p(50.0000) =      2.409 s/op
     p(90.0000) =      2.412 s/op
     p(95.0000) =      2.412 s/op
     p(99.0000) =      2.412 s/op
     p(99.9000) =      2.412 s/op
     p(99.9900) =      2.412 s/op
     p(99.9990) =      2.412 s/op
     p(99.9999) =      2.412 s/op
    p(100.0000) =      2.412 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3.958 s/op
# Warmup Iteration   2: 3.917 s/op
# Warmup Iteration   3: 3.627 s/op
# Warmup Iteration   4: 3.854 s/op
# Warmup Iteration   5: 3.902 s/op
# Warmup Iteration   6: 3.912 s/op
# Warmup Iteration   7: 3.906 s/op
# Warmup Iteration   8: 3.907 s/op
# Warmup Iteration   9: 3.908 s/op
# Warmup Iteration  10: 3.021 s/op
Iteration   1: 3.081 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.026 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.022 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.023 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.020 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.022 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.015 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.019 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.030 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.052 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 438251.196 bytes/s; standard:  0.149 s, 64867 bytes, 912 methods; osr:  0.002 s, 1099 bytes, 4 methods; nmethods_size: 1387976 bytes; nmethods_code_size: 988736 bytes}
  C2 {speed: 50333.158 bytes/s; standard:  0.095 s, 5758 bytes, 64 methods; osr:  0.029 s, 510 bytes, 4 methods; nmethods_size: 62264 bytes; nmethods_code_size: 42528 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 153843.550 bytes/s; standard:  0.005 s, 709 bytes, 146 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35056 bytes; nmethods_code_size: 22208 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 447234.085 bytes/s; standard:  0.144 s, 64158 bytes, 766 methods; osr:  0.002 s, 1099 bytes, 4 methods; nmethods_size: 1352920 bytes; nmethods_code_size: 966528 bytes}
  Tier4 {speed: 50333.158 bytes/s; standard:  0.095 s, 5758 bytes, 64 methods; osr:  0.029 s, 510 bytes, 4 methods; nmethods_size: 62264 bytes; nmethods_code_size: 42528 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.275 s
    Standard compilation   :   0.244 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.031 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.149 s
       Setup time:            0.001 s
       Build HIR:             0.066 s
         Parse:                 0.054 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.002 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.048 s
         LIR Gen:               0.010 s
         Linear Scan:           0.038 s
         Other:                 0.001 s
       Code Emission:         0.016 s
       Code Installation:     0.014 s
       Other:                 0.004 s

    C2 Compile Time:        0.126 s
       Parse:                 0.011 s
       Optimize:              0.057 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.045 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.008 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.009 s
       Regalloc:              0.029 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.006 s
         Compute Liveness:      0.011 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.004 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.001 s
         Code Installation:     0.001 s
         Other:                 0.007 s
       Other:                 0.000 s

  Total compiled methods    :      984 methods
    Standard compilation    :      976 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72234 bytes
    Standard compilation    :    70625 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :   262620 bytes/s

  nmethod code size         :  1450240 bytes
  nmethod total size        :  1031264 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =      3.031 ±(99.9%) 0.031 s/op

  Histogram, s/op:
    [3.010, 3.015) = 0 
    [3.015, 3.020) = 3 
    [3.020, 3.025) = 3 
    [3.025, 3.030) = 1 
    [3.030, 3.035) = 1 
    [3.035, 3.040) = 0 
    [3.040, 3.045) = 0 
    [3.045, 3.050) = 0 
    [3.050, 3.055) = 1 
    [3.055, 3.060) = 0 
    [3.060, 3.065) = 0 
    [3.065, 3.070) = 0 
    [3.070, 3.075) = 0 
    [3.075, 3.080) = 0 
    [3.080, 3.085) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.015 s/op
     p(50.0000) =      3.022 s/op
     p(90.0000) =      3.078 s/op
     p(95.0000) =      3.081 s/op
     p(99.0000) =      3.081 s/op
     p(99.9000) =      3.081 s/op
     p(99.9900) =      3.081 s/op
     p(99.9990) =      3.081 s/op
     p(99.9999) =      3.081 s/op
    p(100.0000) =      3.081 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:04:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt    Score    Error   Units
Jacobi2dBenchmark.autoVec                            ss   10    3.013 ±  0.004    s/op
Jacobi2dBenchmark.autoVec:·gc.alloc.rate             ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
Jacobi2dBenchmark.explicitVec                        ss   10    2.423 ±  0.020    s/op
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate         ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
Jacobi2dBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
Jacobi2dBenchmark.fullVec                            ss   10    2.407 ±  0.008    s/op
Jacobi2dBenchmark.fullVec:·gc.alloc.rate             ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
Jacobi2dBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
Jacobi2dBenchmark.serial                             ss   10    3.031 ±  0.031    s/op
Jacobi2dBenchmark.serial:·gc.alloc.rate              ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.serial:·gc.alloc.rate.norm         ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_20:21:14/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 470530.161 bytes/s; standard:  0.229 s, 107745 bytes, 1264 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2177624 bytes; nmethods_code_size: 1540096 bytes}
  C2 {speed: 77293.486 bytes/s; standard:  0.217 s, 17003 bytes, 114 methods; osr:  0.003 s, 66 bytes, 2 methods; nmethods_size: 141688 bytes; nmethods_code_size: 89696 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 142159.798 bytes/s; standard:  0.005 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 477911.865 bytes/s; standard:  0.224 s, 107025 bytes, 1112 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2140992 bytes; nmethods_code_size: 1516992 bytes}
  Tier4 {speed: 77293.486 bytes/s; standard:  0.217 s, 17003 bytes, 114 methods; osr:  0.003 s, 66 bytes, 2 methods; nmethods_size: 141688 bytes; nmethods_code_size: 89696 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.451 s
    Standard compilation   :   0.446 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.228 s
       Setup time:            0.001 s
       Build HIR:             0.091 s
         Parse:                 0.071 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.083 s
         LIR Gen:               0.017 s
         Linear Scan:           0.065 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.222 s
       Parse:                 0.035 s
       Optimize:              0.065 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.040 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.008 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.019 s
       Regalloc:              0.071 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.015 s
         Compute Liveness:      0.025 s
         Regalloc Split:        0.009 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.003 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.002 s

  Total compiled methods    :     1381 methods
    Standard compilation    :     1378 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   125463 bytes
    Standard compilation    :   124748 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   278065 bytes/s

  nmethod code size         :  2319312 bytes
  nmethod total size        :  1629792 bytes
