# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.224 s/op
# Warmup Iteration   2: 4.215 s/op
# Warmup Iteration   3: 3.802 s/op
# Warmup Iteration   4: 3.802 s/op
# Warmup Iteration   5: 3.801 s/op
# Warmup Iteration   6: 3.814 s/op
# Warmup Iteration   7: 3.825 s/op
# Warmup Iteration   8: 3.813 s/op
# Warmup Iteration   9: 3.802 s/op
# Warmup Iteration  10: 3.807 s/op
Iteration   1: 3.800 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.801 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.801 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.800 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.809 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.811 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.806 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.764 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.770 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 455001.428 bytes/s; standard:  0.166 s, 74743 bytes, 940 methods; osr:  0.006 s, 3532 bytes, 4 methods; nmethods_size: 1581880 bytes; nmethods_code_size: 1118176 bytes}
  C2 {speed: 91588.982 bytes/s; standard:  0.175 s, 15636 bytes, 94 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 125320 bytes; nmethods_code_size: 76800 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 118675.547 bytes/s; standard:  0.006 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 466836.418 bytes/s; standard:  0.160 s, 74049 bytes, 797 methods; osr:  0.006 s, 3532 bytes, 4 methods; nmethods_size: 1547568 bytes; nmethods_code_size: 1096448 bytes}
  Tier4 {speed: 91588.982 bytes/s; standard:  0.175 s, 15636 bytes, 94 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 125320 bytes; nmethods_code_size: 76800 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.377 s
    Standard compilation   :   0.341 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.036 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.170 s
       Setup time:            0.001 s
       Build HIR:             0.075 s
         Parse:                 0.061 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.056 s
         LIR Gen:               0.011 s
         Linear Scan:           0.044 s
         Other:                 0.001 s
       Code Emission:         0.017 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.206 s
       Parse:                 0.030 s
       Optimize:              0.074 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.045 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.011 s
       Matcher:                    0.014 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.058 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.013 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.011 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1044 methods
    Standard compilation    :     1034 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    97021 bytes
    Standard compilation    :    90379 bytes
    On stack replacement    :     6642 bytes
  Average compilation speed :   257549 bytes/s

  nmethod code size         :  1707200 bytes
  nmethod total size        :  1194976 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.autoVec":
  N = 10
  mean =      3.796 ±(99.9%) 0.024 s/op

  Histogram, s/op:
    [3.760, 3.765) = 1 
    [3.765, 3.770) = 0 
    [3.770, 3.775) = 1 
    [3.775, 3.780) = 0 
    [3.780, 3.785) = 0 
    [3.785, 3.790) = 0 
    [3.790, 3.795) = 0 
    [3.795, 3.800) = 3 
    [3.800, 3.805) = 2 
    [3.805, 3.810) = 2 
    [3.810, 3.815) = 1 
    [3.815, 3.820) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.764 s/op
     p(50.0000) =      3.800 s/op
     p(90.0000) =      3.811 s/op
     p(95.0000) =      3.811 s/op
     p(99.0000) =      3.811 s/op
     p(99.9000) =      3.811 s/op
     p(99.9900) =      3.811 s/op
     p(99.9990) =      3.811 s/op
     p(99.9999) =      3.811 s/op
    p(100.0000) =      3.811 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:04:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.648 s/op
# Warmup Iteration   2: 1.253 s/op
# Warmup Iteration   3: 0.439 s/op
# Warmup Iteration   4: 0.436 s/op
# Warmup Iteration   5: 0.439 s/op
# Warmup Iteration   6: 0.438 s/op
# Warmup Iteration   7: 0.435 s/op
# Warmup Iteration   8: 0.435 s/op
# Warmup Iteration   9: 0.438 s/op
# Warmup Iteration  10: 0.438 s/op
Iteration   1: 0.435 s/op
                 ·gc.alloc.rate:      48.570 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.435 s/op
                 ·gc.alloc.rate:      48.580 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.439 s/op
                 ·gc.alloc.rate:      48.400 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.438 s/op
                 ·gc.alloc.rate:      48.429 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.435 s/op
                 ·gc.alloc.rate:      48.569 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.436 s/op
                 ·gc.alloc.rate:      48.515 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.438 s/op
                 ·gc.alloc.rate:      48.415 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.439 s/op
                 ·gc.alloc.rate:      48.396 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.438 s/op
                 ·gc.alloc.rate:               48.477 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      788.709 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 775946240.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration  10: 0.439 s/op
                 ·gc.alloc.rate:      48.371 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 392768.721 bytes/s; standard:  0.241 s, 93903 bytes, 1221 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2341304 bytes; nmethods_code_size: 1651744 bytes}
  C2 {speed: 73908.470 bytes/s; standard:  0.308 s, 23887 bytes, 159 methods; osr:  0.101 s, 6393 bytes, 10 methods; nmethods_size: 239424 bytes; nmethods_code_size: 145984 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 121402.772 bytes/s; standard:  0.006 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 399823.701 bytes/s; standard:  0.235 s, 93134 bytes, 1063 methods; osr:  0.009 s, 4281 bytes, 4 methods; nmethods_size: 2303528 bytes; nmethods_code_size: 1627872 bytes}
  Tier4 {speed: 73908.470 bytes/s; standard:  0.308 s, 23887 bytes, 159 methods; osr:  0.101 s, 6393 bytes, 10 methods; nmethods_size: 239424 bytes; nmethods_code_size: 145984 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.660 s
    Standard compilation   :   0.549 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.110 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.247 s
       Setup time:            0.001 s
       Build HIR:             0.109 s
         Parse:                 0.090 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.080 s
         LIR Gen:               0.017 s
         Linear Scan:           0.063 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.024 s
       Other:                 0.007 s

    C2 Compile Time:        0.410 s
       Parse:                 0.072 s
       Optimize:              0.144 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.011 s
         Incremental Inline:    0.004 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.004 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.092 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.007 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.016 s
       Matcher:                    0.024 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.116 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.026 s
         Compute Liveness:      0.036 s
         Regalloc Split:        0.011 s
         Postalloc Copy Rem:    0.015 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.008 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.021 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.004 s
       Other:                 0.000 s

  Total compiled methods    :     1394 methods
    Standard compilation    :     1380 methods
    On stack replacement    :       14 methods
  Total compiled bytecodes  :   128464 bytes
    Standard compilation    :   117790 bytes
    On stack replacement    :    10674 bytes
  Average compilation speed :   194738 bytes/s

  nmethod code size         :  2580728 bytes
  nmethod total size        :  1797728 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.explicitVec":
  N = 10
  mean =      0.437 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.435, 0.436) = 3 
    [0.436, 0.436) = 0 
    [0.436, 0.437) = 1 
    [0.437, 0.437) = 0 
    [0.437, 0.438) = 0 
    [0.438, 0.438) = 1 
    [0.438, 0.439) = 2 
    [0.439, 0.439) = 2 
    [0.439, 0.440) = 1 
    [0.440, 0.440) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.435 s/op
     p(50.0000) =      0.438 s/op
     p(90.0000) =      0.439 s/op
     p(95.0000) =      0.439 s/op
     p(99.0000) =      0.439 s/op
     p(99.9000) =      0.439 s/op
     p(99.9900) =      0.439 s/op
     p(99.9990) =      0.439 s/op
     p(99.9999) =      0.439 s/op
    p(100.0000) =      0.439 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate":
  48.472 ±(99.9%) 0.122 MB/sec [Average]
  (min, avg, max) = (48.371, 48.472, 48.580), stdev = 0.081
  CI (99.9%): [48.350, 48.594] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space":
  78.871 ±(99.9%) 377.075 MB/sec [Average]
  (min, avg, max) = (≈ 0, 78.871, 788.709), stdev = 249.412
  CI (99.9%): [≈ 0, 455.946] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm":
  77594624.000 ±(99.9%) 370973114.482 B/op [Average]
  (min, avg, max) = (≈ 0, 77594624.000, 775946240.000), stdev = 245375746.024
  CI (99.9%): [≈ 0, 448567738.482] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:01:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.661 s/op
# Warmup Iteration   2: 1.232 s/op
# Warmup Iteration   3: 0.437 s/op
# Warmup Iteration   4: 0.437 s/op
# Warmup Iteration   5: 0.438 s/op
# Warmup Iteration   6: 0.439 s/op
# Warmup Iteration   7: 0.437 s/op
# Warmup Iteration   8: 0.437 s/op
# Warmup Iteration   9: 0.439 s/op
# Warmup Iteration  10: 0.438 s/op
Iteration   1: 0.437 s/op
                 ·gc.alloc.rate:      48.496 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.437 s/op
                 ·gc.alloc.rate:      48.487 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.438 s/op
                 ·gc.alloc.rate:      48.417 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.439 s/op
                 ·gc.alloc.rate:      48.399 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.437 s/op
                 ·gc.alloc.rate:      48.490 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.438 s/op
                 ·gc.alloc.rate:      48.441 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.439 s/op
                 ·gc.alloc.rate:      48.374 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.441 s/op
                 ·gc.alloc.rate:               48.297 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      790.033 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 780140544.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   9: 0.440 s/op
                 ·gc.alloc.rate:      48.336 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.439 s/op
                 ·gc.alloc.rate:      48.386 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 375627.537 bytes/s; standard:  0.251 s, 93680 bytes, 1218 methods; osr:  0.013 s, 5524 bytes, 5 methods; nmethods_size: 2394656 bytes; nmethods_code_size: 1680448 bytes}
  C2 {speed: 75348.034 bytes/s; standard:  0.325 s, 25016 bytes, 171 methods; osr:  0.137 s, 9769 bytes, 11 methods; nmethods_size: 262288 bytes; nmethods_code_size: 159744 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 125509.997 bytes/s; standard:  0.006 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 381567.921 bytes/s; standard:  0.245 s, 92911 bytes, 1060 methods; osr:  0.013 s, 5524 bytes, 5 methods; nmethods_size: 2356880 bytes; nmethods_code_size: 1656576 bytes}
  Tier4 {speed: 75348.034 bytes/s; standard:  0.325 s, 25016 bytes, 171 methods; osr:  0.137 s, 9769 bytes, 11 methods; nmethods_size: 262288 bytes; nmethods_code_size: 159744 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.726 s
    Standard compilation   :   0.576 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.149 s, Average : 0.009 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.261 s
       Setup time:            0.001 s
       Build HIR:             0.114 s
         Parse:                 0.094 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.088 s
         LIR Gen:               0.018 s
         Linear Scan:           0.069 s
         Other:                 0.001 s
       Code Emission:         0.028 s
       Code Installation:     0.023 s
       Other:                 0.008 s

    C2 Compile Time:        0.462 s
       Parse:                 0.087 s
       Optimize:              0.161 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.014 s
         Incremental Inline:    0.006 s
           IdealLoop:             0.000 s
          (IGVN:                  0.004 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.006 s
         Vector:                0.005 s
           Box elimination:     0.005 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.096 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.008 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.020 s
       Matcher:                    0.026 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.030 s
       Regalloc:              0.133 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.031 s
         Compute Liveness:      0.041 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.017 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.007 s
         Select:                0.009 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.006 s
         Code Installation:     0.003 s
         Other:                 0.002 s

  Total compiled methods    :     1405 methods
    Standard compilation    :     1389 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   133989 bytes
    Standard compilation    :   118696 bytes
    On stack replacement    :    15293 bytes
  Average compilation speed :   184618 bytes/s

  nmethod code size         :  2656944 bytes
  nmethod total size        :  1840192 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.fullVec":
  N = 10
  mean =      0.438 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.436, 0.437) = 0 
    [0.437, 0.437) = 3 
    [0.437, 0.438) = 0 
    [0.438, 0.438) = 1 
    [0.438, 0.439) = 1 
    [0.439, 0.439) = 2 
    [0.439, 0.440) = 1 
    [0.440, 0.440) = 1 
    [0.440, 0.441) = 0 
    [0.441, 0.441) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.437 s/op
     p(50.0000) =      0.438 s/op
     p(90.0000) =      0.441 s/op
     p(95.0000) =      0.441 s/op
     p(99.0000) =      0.441 s/op
     p(99.9000) =      0.441 s/op
     p(99.9900) =      0.441 s/op
     p(99.9990) =      0.441 s/op
     p(99.9999) =      0.441 s/op
    p(100.0000) =      0.441 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate":
  48.412 ±(99.9%) 0.102 MB/sec [Average]
  (min, avg, max) = (48.297, 48.412, 48.496), stdev = 0.067
  CI (99.9%): [48.310, 48.514] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space":
  79.003 ±(99.9%) 377.708 MB/sec [Average]
  (min, avg, max) = (≈ 0, 79.003, 790.033), stdev = 249.830
  CI (99.9%): [≈ 0, 456.711] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm":
  78014054.400 ±(99.9%) 372978374.560 B/op [Average]
  (min, avg, max) = (≈ 0, 78014054.400, 780140544.000), stdev = 246702101.408
  CI (99.9%): [≈ 0, 450992428.960] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.229 s/op
# Warmup Iteration   2: 4.216 s/op
# Warmup Iteration   3: 3.803 s/op
# Warmup Iteration   4: 3.803 s/op
# Warmup Iteration   5: 3.811 s/op
# Warmup Iteration   6: 3.819 s/op
# Warmup Iteration   7: 3.818 s/op
# Warmup Iteration   8: 3.816 s/op
# Warmup Iteration   9: 3.815 s/op
# Warmup Iteration  10: 3.812 s/op
Iteration   1: 3.802 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.802 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.801 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.801 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.807 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.801 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.815 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.818 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.820 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.818 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 455253.198 bytes/s; standard:  0.166 s, 74656 bytes, 938 methods; osr:  0.006 s, 3532 bytes, 4 methods; nmethods_size: 1576672 bytes; nmethods_code_size: 1114112 bytes}
  C2 {speed: 94885.379 bytes/s; standard:  0.164 s, 15275 bytes, 90 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 122896 bytes; nmethods_code_size: 75328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 141311.012 bytes/s; standard:  0.005 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 464494.771 bytes/s; standard:  0.161 s, 73962 bytes, 795 methods; osr:  0.006 s, 3532 bytes, 4 methods; nmethods_size: 1542360 bytes; nmethods_code_size: 1092384 bytes}
  Tier4 {speed: 94885.379 bytes/s; standard:  0.164 s, 15275 bytes, 90 methods; osr:  0.030 s, 3110 bytes, 6 methods; nmethods_size: 122896 bytes; nmethods_code_size: 75328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.366 s
    Standard compilation   :   0.330 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.036 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.170 s
       Setup time:            0.001 s
       Build HIR:             0.073 s
         Parse:                 0.059 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.058 s
         LIR Gen:               0.012 s
         Linear Scan:           0.045 s
         Other:                 0.001 s
       Code Emission:         0.018 s
       Code Installation:     0.016 s
       Other:                 0.004 s

    C2 Compile Time:        0.195 s
       Parse:                 0.027 s
       Optimize:              0.073 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.044 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.012 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.015 s
       Regalloc:              0.055 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.012 s
         Compute Liveness:      0.019 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.007 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.010 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1038 methods
    Standard compilation    :     1028 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    96573 bytes
    Standard compilation    :    89931 bytes
    On stack replacement    :     6642 bytes
  Average compilation speed :   264217 bytes/s

  nmethod code size         :  1699568 bytes
  nmethod total size        :  1189440 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.serial":
  N = 10
  mean =      3.808 ±(99.9%) 0.012 s/op

  Histogram, s/op:
    [3.800, 3.801) = 2 
    [3.801, 3.803) = 3 
    [3.803, 3.804) = 0 
    [3.804, 3.805) = 0 
    [3.805, 3.806) = 0 
    [3.806, 3.808) = 1 
    [3.808, 3.809) = 0 
    [3.809, 3.810) = 0 
    [3.810, 3.811) = 0 
    [3.811, 3.813) = 0 
    [3.813, 3.814) = 0 
    [3.814, 3.815) = 1 
    [3.815, 3.816) = 0 
    [3.816, 3.818) = 0 
    [3.818, 3.819) = 2 
    [3.819, 3.820) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.801 s/op
     p(50.0000) =      3.804 s/op
     p(90.0000) =      3.820 s/op
     p(95.0000) =      3.820 s/op
     p(99.0000) =      3.820 s/op
     p(99.9000) =      3.820 s/op
     p(99.9900) =      3.820 s/op
     p(99.9990) =      3.820 s/op
     p(99.9999) =      3.820 s/op
    p(100.0000) =      3.820 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:03:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt         Score           Error   Units
lavaMD.LavaMDBenchmark.autoVec                                     ss   10         3.796 ±         0.024    s/op
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate                      ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm                 ss   10       507.200 ±        15.299    B/op
lavaMD.LavaMDBenchmark.autoVec:·gc.count                           ss   10           ≈ 0                  counts
lavaMD.LavaMDBenchmark.explicitVec                                 ss   10         0.437 ±         0.002    s/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate                  ss   10        48.472 ±         0.122  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm             ss   10  47668758.400 ±     12690.454    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space         ss   10        78.871 ±       377.075  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm    ss   10  77594624.000 ± 370973114.482    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.count                       ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.explicitVec:·gc.time                        ss   10         1.000                      ms
lavaMD.LavaMDBenchmark.fullVec                                     ss   10         0.438 ±         0.002    s/op
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate                      ss   10        48.412 ±         0.102  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm                 ss   10  47668758.400 ±     12690.454    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space             ss   10        79.003 ±       377.708  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm        ss   10  78014054.400 ± 372978374.560    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.count                           ss   10         1.000                  counts
lavaMD.LavaMDBenchmark.fullVec:·gc.time                            ss   10         1.000                      ms
lavaMD.LavaMDBenchmark.serial                                      ss   10         3.808 ±         0.012    s/op
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate                       ss   10        ≈ 10⁻⁴                  MB/sec
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm                  ss   10       507.200 ±        15.299    B/op
lavaMD.LavaMDBenchmark.serial:·gc.count                            ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_20:21:14/lavaMD/LavaMDBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 478694.330 bytes/s; standard:  0.227 s, 108473 bytes, 1273 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2193872 bytes; nmethods_code_size: 1549408 bytes}
  C2 {speed: 75047.441 bytes/s; standard:  0.226 s, 17190 bytes, 117 methods; osr:  0.003 s, 66 bytes, 2 methods; nmethods_size: 147024 bytes; nmethods_code_size: 92512 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 143261.578 bytes/s; standard:  0.005 s, 725 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23264 bytes}
  Tier2 {speed: 364434.091 bytes/s; standard:  0.000 s, 51 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 768 bytes; nmethods_code_size: 480 bytes}
  Tier3 {speed: 486386.594 bytes/s; standard:  0.222 s, 107697 bytes, 1119 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2156224 bytes; nmethods_code_size: 1525664 bytes}
  Tier4 {speed: 75008.138 bytes/s; standard:  0.227 s, 17198 bytes, 118 methods; osr:  0.003 s, 66 bytes, 2 methods; nmethods_size: 147280 bytes; nmethods_code_size: 92640 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.458 s
    Standard compilation   :   0.453 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.225 s
       Setup time:            0.001 s
       Build HIR:             0.088 s
         Parse:                 0.068 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.083 s
         LIR Gen:               0.017 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.021 s
       Other:                 0.007 s

    C2 Compile Time:        0.231 s
       Parse:                 0.040 s
       Optimize:              0.067 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.046 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.003 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.075 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.015 s
         Compute Liveness:      0.025 s
         Regalloc Split:        0.009 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1394 methods
    Standard compilation    :     1391 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   126386 bytes
    Standard compilation    :   125671 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   275880 bytes/s

  nmethod code size         :  2341152 bytes
  nmethod total size        :  1642048 bytes
