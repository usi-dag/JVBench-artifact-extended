# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10.129 s/op
# Warmup Iteration   2: 5.260 s/op
# Warmup Iteration   3: 1.246 s/op
# Warmup Iteration   4: 1.225 s/op
# Warmup Iteration   5: 1.219 s/op
# Warmup Iteration   6: 1.219 s/op
# Warmup Iteration   7: 1.219 s/op
# Warmup Iteration   8: 1.218 s/op
# Warmup Iteration   9: 1.219 s/op
# Warmup Iteration  10: 1.219 s/op
Iteration   1: 1.218 s/op
                 ·gc.alloc.rate:      25.866 MB/sec
                 ·gc.alloc.rate.norm: 47673280.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.219 s/op
                 ·gc.alloc.rate:      26.138 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.220 s/op
                 ·gc.alloc.rate:      25.875 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.218 s/op
                 ·gc.alloc.rate:      26.202 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.219 s/op
                 ·gc.alloc.rate:      26.335 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.219 s/op
                 ·gc.alloc.rate:      26.070 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.218 s/op
                 ·gc.alloc.rate:      26.361 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.218 s/op
                 ·gc.alloc.rate:      26.255 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.220 s/op
                 ·gc.alloc.rate:      26.080 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.227 s/op
                 ·gc.alloc.rate:               26.194 MB/sec
                 ·gc.alloc.rate.norm:          47693240.000 B/op
                 ·gc.churn.G1_Eden_Space:      939.876 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1711276032.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     3.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5460.898 bytes/s; standard: 17.047 s, 91539 bytes, 1198 methods; osr:  0.496 s, 4261 bytes, 4 methods; nmethods_size: 2293056 bytes; nmethods_code_size: 1620064 bytes}
  C2 {speed: 1003.614 bytes/s; standard: 31.685 s, 25923 bytes, 172 methods; osr:  6.232 s, 12131 bytes, 15 methods; nmethods_size: 295920 bytes; nmethods_code_size: 181888 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5253.575 bytes/s; standard:  0.145 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed: 1052.713 bytes/s; standard:  0.341 s, 359 bytes, 6 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 4896 bytes; nmethods_code_size: 2624 bytes}
  Tier3 {speed: 5550.802 bytes/s; standard: 16.560 s, 90416 bytes, 1035 methods; osr:  0.496 s, 4261 bytes, 4 methods; nmethods_size: 2250632 bytes; nmethods_code_size: 1593728 bytes}
  Tier4 {speed: 1003.614 bytes/s; standard: 31.685 s, 25923 bytes, 172 methods; osr:  6.232 s, 12131 bytes, 15 methods; nmethods_size: 295920 bytes; nmethods_code_size: 181888 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  55.496 s
    Standard compilation   :  48.732 s, Average : 0.036 s
    Bailed out compilation :   0.036 s, Average : 0.036 s
    On stack replacement   :   6.728 s, Average : 0.354 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       17.545 s
       Setup time:            0.016 s
       Build HIR:            11.936 s
         Parse:                10.615 s
         Optimize blocks:       0.018 s
         GVN:                   0.399 s
         Null checks elim:      0.344 s
         Range checks elim:     0.264 s
         Other:                 0.296 s
       Emit LIR:              3.530 s
         LIR Gen:               2.123 s
         Linear Scan:           1.343 s
         Other:                 0.064 s
       Code Emission:         1.121 s
       Code Installation:     0.702 s
       Other:                 0.240 s

    C2 Compile Time:       40.091 s
       Parse:                12.672 s
       Optimize:             13.203 s
         Escape Analysis:       1.095 s
           Conn Graph:            0.849 s
           Macro Eliminate:       0.101 s
         GVN 1:                 1.631 s
         Incremental Inline:    0.305 s
           IdealLoop:             0.000 s
          (IGVN:                  0.051 s)
          (Inline:                0.203 s)
          (Prune Useless:         0.048 s)
           Other:                 0.305 s
         Vector:                0.363 s
           Box elimination:     0.361 s
             IGVN:              0.064 s
             Prune Useless:     0.009 s
         Renumber Live:         0.042 s
         IdealLoop:             6.604 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.175 s
         GVN 2:                 0.037 s
         Macro Expand:          1.083 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.331 s
         Other:                 1.534 s
       Matcher:                    3.474 s
         Post Selection Cleanup:   0.273 s
       Scheduler:                  3.112 s
       Regalloc:              3.760 s
         Ctor Chaitin:          0.011 s
         Build IFG (virt):      0.109 s
         Build IFG (phys):      0.648 s
         Compute Liveness:      1.362 s
         Regalloc Split:        0.746 s
         Postalloc Copy Rem:    0.393 s
         Merge multidefs:       0.095 s
         Fixup Spills:          0.133 s
         Compact:               0.004 s
         Coalesce 1:            0.271 s
         Coalesce 2:            0.109 s
         Coalesce 3:            0.020 s
         Cache LRG:             0.003 s
         Simplify:              0.047 s
         Select:                0.071 s
       Block Ordering:        0.270 s
       Peephole:              0.032 s
       Code Emission:           2.940 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.212 s
         Build OOP maps:        0.244 s
         Fill buffer:           1.013 s
         Code Installation:     0.175 s
         Other:                 0.296 s
       Other:                 0.454 s

  Total compiled methods    :     1389 methods
    Standard compilation    :     1370 methods
    On stack replacement    :       19 methods
  Total compiled bytecodes  :   133854 bytes
    Standard compilation    :   117462 bytes
    On stack replacement    :    16392 bytes
  Average compilation speed :     2411 bytes/s

  nmethod code size         :  2588976 bytes
  nmethod total size        :  1801952 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange":
  N = 10
  mean =      1.220 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [1.217, 1.218) = 2 
    [1.218, 1.219) = 3 
    [1.219, 1.220) = 3 
    [1.220, 1.221) = 1 
    [1.221, 1.222) = 0 
    [1.222, 1.223) = 0 
    [1.223, 1.224) = 0 
    [1.224, 1.225) = 0 
    [1.225, 1.226) = 0 
    [1.226, 1.227) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.218 s/op
     p(50.0000) =      1.219 s/op
     p(90.0000) =      1.227 s/op
     p(95.0000) =      1.227 s/op
     p(99.0000) =      1.227 s/op
     p(99.9000) =      1.227 s/op
     p(99.9900) =      1.227 s/op
     p(99.9990) =      1.227 s/op
     p(99.9999) =      1.227 s/op
    p(100.0000) =      1.227 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate":
  26.138 ±(99.9%) 0.257 MB/sec [Average]
  (min, avg, max) = (25.866, 26.138, 26.361), stdev = 0.170
  CI (99.9%): [25.880, 26.395] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  47669983.200 ±(99.9%) 12747.948 B/op [Average]
  (min, avg, max) = (47666664.000, 47669983.200, 47693240.000), stdev = 8431.978
  CI (99.9%): [47657235.252, 47682731.148] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  93.988 ±(99.9%) 449.346 MB/sec [Average]
  (min, avg, max) = (≈ 0, 93.988, 939.876), stdev = 297.215
  CI (99.9%): [≈ 0, 543.334] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  171127603.200 ±(99.9%) 818146111.939 B/op [Average]
  (min, avg, max) = (≈ 0, 171127603.200, 1711276032.000), stdev = 541152996.638
  CI (99.9%): [≈ 0, 989273715.139] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.300, 3.000), stdev = 0.949
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# Run complete. Total time: 00:01:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                Mode  Cnt          Score           Error   Units
lavaMD.LavaMDPatternBenchmark.indexInRange                                 ss   10          1.220 ±         0.004    s/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate                  ss   10         26.138 ±         0.257  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm             ss   10   47669983.200 ±     12747.948    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space         ss   10         93.988 ±       449.346  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm    ss   10  171127603.200 ± 818146111.939    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count                       ss   10          1.000                  counts
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time                        ss   10          3.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_11:59:53/lavaMD/LavaMDPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6225.665 bytes/s; standard: 12.677 s, 79240 bytes, 1054 methods; osr:  0.155 s, 649 bytes, 1 methods; nmethods_size: 1610368 bytes; nmethods_code_size: 1140320 bytes}
  C2 {speed: 578.863 bytes/s; standard: 17.981 s, 10622 bytes, 77 methods; osr:  0.483 s, 66 bytes, 2 methods; nmethods_size: 98856 bytes; nmethods_code_size: 62688 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2495.470 bytes/s; standard:  0.265 s, 661 bytes, 139 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33448 bytes; nmethods_code_size: 21184 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6304.286 bytes/s; standard: 12.412 s, 78579 bytes, 915 methods; osr:  0.155 s, 649 bytes, 1 methods; nmethods_size: 1576920 bytes; nmethods_code_size: 1119136 bytes}
  Tier4 {speed: 578.863 bytes/s; standard: 17.981 s, 10622 bytes, 77 methods; osr:  0.483 s, 66 bytes, 2 methods; nmethods_size: 98856 bytes; nmethods_code_size: 62688 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  31.296 s
    Standard compilation   :  30.658 s, Average : 0.027 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.638 s, Average : 0.213 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.780 s
       Setup time:            0.012 s
       Build HIR:             7.311 s
         Parse:                 6.040 s
         Optimize blocks:       0.006 s
         GVN:                   0.458 s
         Null checks elim:      0.271 s
         Range checks elim:     0.271 s
         Other:                 0.266 s
       Emit LIR:              3.222 s
         LIR Gen:               1.522 s
         Linear Scan:           1.644 s
         Other:                 0.057 s
       Code Emission:         1.309 s
       Code Installation:     0.685 s
       Other:                 0.241 s

    C2 Compile Time:       21.006 s
       Parse:                 4.944 s
       Optimize:              7.106 s
         Escape Analysis:       0.409 s
           Conn Graph:            0.380 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.064 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.013 s
         IdealLoop:             3.564 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.134 s
         GVN 2:                 0.021 s
         Macro Expand:          0.807 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.202 s
         Other:                 0.890 s
       Matcher:                    2.060 s
         Post Selection Cleanup:   0.154 s
       Scheduler:                  1.849 s
       Regalloc:              2.585 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.100 s
         Build IFG (phys):      0.378 s
         Compute Liveness:      0.851 s
         Regalloc Split:        0.600 s
         Postalloc Copy Rem:    0.263 s
         Merge multidefs:       0.042 s
         Fixup Spills:          0.055 s
         Compact:               0.004 s
         Coalesce 1:            0.236 s
         Coalesce 2:            0.084 s
         Coalesce 3:            0.009 s
         Cache LRG:             0.002 s
         Simplify:              0.025 s
         Select:                0.045 s
       Block Ordering:        0.202 s
       Peephole:              0.016 s
       Code Emission:           1.645 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.686 s
         Build OOP maps:        0.136 s
         Fill buffer:           0.618 s
         Code Installation:     0.038 s
         Other:                 0.167 s
       Other:                 0.561 s

  Total compiled methods    :     1134 methods
    Standard compilation    :     1131 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    90577 bytes
    Standard compilation    :    89862 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     2894 bytes/s

  nmethod code size         :  1709224 bytes
  nmethod total size        :  1203008 bytes
