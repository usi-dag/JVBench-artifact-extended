# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.pow

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 65.022 s/op
# Warmup Iteration   2: 48.029 s/op
# Warmup Iteration   3: 47.093 s/op
# Warmup Iteration   4: 47.222 s/op
# Warmup Iteration   5: 47.241 s/op
# Warmup Iteration   6: 47.104 s/op
# Warmup Iteration   7: 47.052 s/op
# Warmup Iteration   8: 47.168 s/op
# Warmup Iteration   9: 47.149 s/op
# Warmup Iteration  10: 47.117 s/op
Iteration   1: 47.109 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 47.551 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 47.081 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 47.171 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 47.130 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 47.126 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 47.148 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 47.120 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 47.306 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 47.091 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3037.050 bytes/s; standard: 25.068 s, 75655 bytes, 1048 methods; osr:  0.505 s, 2009 bytes, 7 methods; nmethods_size: 1982648 bytes; nmethods_code_size: 1405536 bytes}
  C2 {speed: 506.091 bytes/s; standard: 37.932 s, 19286 bytes, 108 methods; osr: 11.681 s, 5823 bytes, 16 methods; nmethods_size: 166752 bytes; nmethods_code_size: 104128 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2714.216 bytes/s; standard:  0.268 s, 728 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35952 bytes; nmethods_code_size: 22720 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3040.472 bytes/s; standard: 24.799 s, 74927 bytes, 898 methods; osr:  0.505 s, 2009 bytes, 7 methods; nmethods_size: 1946696 bytes; nmethods_code_size: 1382816 bytes}
  Tier4 {speed: 506.091 bytes/s; standard: 37.932 s, 19286 bytes, 108 methods; osr: 11.681 s, 5823 bytes, 16 methods; nmethods_size: 166752 bytes; nmethods_code_size: 104128 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  75.186 s
    Standard compilation   :  63.000 s, Average : 0.054 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :  12.186 s, Average : 0.530 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       25.478 s
       Setup time:            0.124 s
       Build HIR:            13.960 s
         Parse:                11.762 s
         Optimize blocks:       0.010 s
         GVN:                   0.917 s
         Null checks elim:      0.429 s
         Range checks elim:     0.305 s
         Other:                 0.537 s
       Emit LIR:              7.593 s
         LIR Gen:               2.781 s
         Linear Scan:           4.726 s
         Other:                 0.086 s
       Code Emission:         2.221 s
       Code Installation:     1.101 s
       Other:                 0.479 s

    C2 Compile Time:       52.777 s
       Parse:                11.020 s
       Optimize:             19.679 s
         Escape Analysis:       0.712 s
           Conn Graph:            0.577 s
           Macro Eliminate:       0.095 s
         GVN 1:                 1.900 s
         Incremental Inline:    0.557 s
           IdealLoop:             0.000 s
          (IGVN:                  0.182 s)
          (Inline:                0.277 s)
          (Prune Useless:         0.082 s)
           Other:                 0.557 s
         Vector:                0.734 s
           Box elimination:     0.733 s
             IGVN:              0.204 s
             Prune Useless:     0.085 s
         Renumber Live:         0.086 s
         IdealLoop:            11.676 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.314 s
         GVN 2:                 0.072 s
         Macro Expand:          1.155 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.410 s
         Other:                 2.061 s
       Matcher:                    4.288 s
         Post Selection Cleanup:   0.288 s
       Scheduler:                  3.623 s
       Regalloc:              9.455 s
         Ctor Chaitin:          0.013 s
         Build IFG (virt):      0.187 s
         Build IFG (phys):      1.339 s
         Compute Liveness:      3.045 s
         Regalloc Split:        0.943 s
         Postalloc Copy Rem:    2.720 s
         Merge multidefs:       0.164 s
         Fixup Spills:          0.103 s
         Compact:               0.019 s
         Coalesce 1:            0.398 s
         Coalesce 2:            0.126 s
         Coalesce 3:            0.066 s
         Cache LRG:             0.017 s
         Simplify:              0.199 s
         Select:                0.349 s
       Block Ordering:        0.296 s
       Peephole:              0.070 s
       Code Emission:           3.223 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.099 s
         Build OOP maps:        0.844 s
         Fill buffer:           0.974 s
         Code Installation:     0.105 s
         Other:                 0.201 s
       Other:                 1.018 s

  Total compiled methods    :     1179 methods
    Standard compilation    :     1156 methods
    On stack replacement    :       23 methods
  Total compiled bytecodes  :   102773 bytes
    Standard compilation    :    94941 bytes
    On stack replacement    :     7832 bytes
  Average compilation speed :     1366 bytes/s

  nmethod code size         :  2149400 bytes
  nmethod total size        :  1509664 bytes


Result "jvbench.somier.SomierPatternBenchmark.pow":
  N = 10
  mean =     47.183 ±(99.9%) 0.217 s/op

  Histogram, s/op:
    [47.000, 47.050) = 0 
    [47.050, 47.100) = 2 
    [47.100, 47.150) = 5 
    [47.150, 47.200) = 1 
    [47.200, 47.250) = 0 
    [47.250, 47.300) = 0 
    [47.300, 47.350) = 1 
    [47.350, 47.400) = 0 
    [47.400, 47.450) = 0 
    [47.450, 47.500) = 0 
    [47.500, 47.550) = 0 
    [47.550, 47.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     47.081 s/op
     p(50.0000) =     47.128 s/op
     p(90.0000) =     47.526 s/op
     p(95.0000) =     47.551 s/op
     p(99.0000) =     47.551 s/op
     p(99.9000) =     47.551 s/op
     p(99.9900) =     47.551 s/op
     p(99.9990) =     47.551 s/op
     p(99.9999) =     47.551 s/op
    p(100.0000) =     47.551 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate.norm":
  1764.800 ±(99.9%) 3291.003 B/op [Average]
  (min, avg, max) = (1048.000, 1764.800, 7960.000), stdev = 2176.795
  CI (99.9%): [≈ 0, 5055.803] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:16:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt     Score      Error   Units
SomierPatternBenchmark.pow                        ss   10    47.183 ±    0.217    s/op
SomierPatternBenchmark.pow:·gc.alloc.rate         ss   10    ≈ 10⁻⁴             MB/sec
SomierPatternBenchmark.pow:·gc.alloc.rate.norm    ss   10  1764.800 ± 3291.003    B/op
SomierPatternBenchmark.pow:·gc.count              ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_00:58:10/somier/SomierPatternBenchmark.pow.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3871.095 bytes/s; standard: 19.905 s, 77247 bytes, 1024 methods; osr:  0.217 s, 649 bytes, 1 methods; nmethods_size: 1561736 bytes; nmethods_code_size: 1106176 bytes}
  C2 {speed: 367.952 bytes/s; standard: 26.030 s, 9723 bytes, 77 methods; osr:  0.574 s, 66 bytes, 2 methods; nmethods_size: 91248 bytes; nmethods_code_size: 57760 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2453.960 bytes/s; standard:  0.257 s, 630 bytes, 133 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 31992 bytes; nmethods_code_size: 20256 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3889.409 bytes/s; standard: 19.648 s, 76617 bytes, 891 methods; osr:  0.217 s, 649 bytes, 1 methods; nmethods_size: 1529744 bytes; nmethods_code_size: 1085920 bytes}
  Tier4 {speed: 367.952 bytes/s; standard: 26.030 s, 9723 bytes, 77 methods; osr:  0.574 s, 66 bytes, 2 methods; nmethods_size: 91248 bytes; nmethods_code_size: 57760 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  46.726 s
    Standard compilation   :  45.935 s, Average : 0.042 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.791 s, Average : 0.264 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.059 s
       Setup time:            0.102 s
       Build HIR:            10.701 s
         Parse:                 8.292 s
         Optimize blocks:       0.010 s
         GVN:                   0.698 s
         Null checks elim:      0.565 s
         Range checks elim:     0.503 s
         Other:                 0.634 s
       Emit LIR:              5.957 s
         LIR Gen:               2.236 s
         Linear Scan:           3.607 s
         Other:                 0.114 s
       Code Emission:         1.986 s
       Code Installation:     0.850 s
       Other:                 0.462 s

    C2 Compile Time:       29.671 s
       Parse:                 6.250 s
       Optimize:              9.595 s
         Escape Analysis:       0.515 s
           Conn Graph:            0.483 s
           Macro Eliminate:       0.003 s
         GVN 1:                 1.195 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.019 s
         IdealLoop:             5.159 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.210 s
         GVN 2:                 0.052 s
         Macro Expand:          1.017 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.294 s
         Other:                 1.134 s
       Matcher:                    3.027 s
         Post Selection Cleanup:   0.192 s
       Scheduler:                  2.511 s
       Regalloc:              4.887 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.127 s
         Build IFG (phys):      0.667 s
         Compute Liveness:      1.508 s
         Regalloc Split:        0.767 s
         Postalloc Copy Rem:    1.072 s
         Merge multidefs:       0.095 s
         Fixup Spills:          0.094 s
         Compact:               0.015 s
         Coalesce 1:            0.302 s
         Coalesce 2:            0.130 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.007 s
         Simplify:              0.081 s
         Select:                0.109 s
       Block Ordering:        0.273 s
       Peephole:              0.055 s
       Code Emission:           2.226 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.868 s
         Build OOP maps:        0.384 s
         Fill buffer:           0.707 s
         Code Installation:     0.091 s
         Other:                 0.177 s
       Other:                 0.756 s

  Total compiled methods    :     1104 methods
    Standard compilation    :     1101 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    87685 bytes
    Standard compilation    :    86970 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     1876 bytes/s

  nmethod code size         :  1652984 bytes
  nmethod total size        :  1163936 bytes
