# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.pow

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5.400 s/op
# Warmup Iteration   2: 4.631 s/op
# Warmup Iteration   3: 4.666 s/op
# Warmup Iteration   4: 4.652 s/op
# Warmup Iteration   5: 4.657 s/op
# Warmup Iteration   6: 4.658 s/op
# Warmup Iteration   7: 4.658 s/op
# Warmup Iteration   8: 4.624 s/op
# Warmup Iteration   9: 4.655 s/op
# Warmup Iteration  10: 4.655 s/op
Iteration   1: 4.651 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4.640 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4.657 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4.653 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4.658 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4.660 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4.658 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 4.662 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4.628 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4.656 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 247877.972 bytes/s; standard:  0.319 s, 80400 bytes, 1101 methods; osr:  0.016 s, 2631 bytes, 8 methods; nmethods_size: 2106344 bytes; nmethods_code_size: 1494688 bytes}
  C2 {speed: 45806.010 bytes/s; standard:  0.428 s, 19890 bytes, 119 methods; osr:  0.153 s, 6734 bytes, 16 methods; nmethods_size: 175568 bytes; nmethods_code_size: 110208 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 104147.380 bytes/s; standard:  0.007 s, 738 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23008 bytes}
  Tier2 {speed: 138161.448 bytes/s; standard:  0.000 s, 11 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 400 bytes; nmethods_code_size: 288 bytes}
  Tier3 {speed: 251011.656 bytes/s; standard:  0.312 s, 79651 bytes, 948 methods; osr:  0.016 s, 2631 bytes, 8 methods; nmethods_size: 2069528 bytes; nmethods_code_size: 1471392 bytes}
  Tier4 {speed: 45806.010 bytes/s; standard:  0.428 s, 19890 bytes, 119 methods; osr:  0.153 s, 6734 bytes, 16 methods; nmethods_size: 175568 bytes; nmethods_code_size: 110208 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.917 s
    Standard compilation   :   0.747 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.169 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.333 s
       Setup time:            0.001 s
       Build HIR:             0.133 s
         Parse:                 0.106 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.005 s
         Range checks elim:     0.002 s
         Other:                 0.009 s
       Emit LIR:              0.120 s
         LIR Gen:               0.027 s
         Linear Scan:           0.092 s
         Other:                 0.001 s
       Code Emission:         0.046 s
       Code Installation:     0.028 s
       Other:                 0.006 s

    C2 Compile Time:        0.583 s
       Parse:                 0.113 s
       Optimize:              0.233 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.016 s
         Incremental Inline:    0.009 s
           IdealLoop:             0.000 s
          (IGVN:                  0.004 s)
          (Inline:                0.003 s)
          (Prune Useless:         0.002 s)
           Other:                 0.009 s
         Vector:                0.009 s
           Box elimination:     0.009 s
             IGVN:              0.004 s
             Prune Useless:     0.002 s
         Renumber Live:         0.002 s
         IdealLoop:             0.164 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.006 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.019 s
       Matcher:                    0.028 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.033 s
       Regalloc:              0.139 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.026 s
         Compute Liveness:      0.042 s
         Regalloc Split:        0.009 s
         Postalloc Copy Rem:    0.023 s
         Merge multidefs:       0.011 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.007 s
         Select:                0.009 s
         Other:                 0.002 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.032 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.008 s
         Fill buffer:           0.006 s
         Code Installation:     0.012 s
         Other:                 0.002 s

  Total compiled methods    :     1244 methods
    Standard compilation    :     1220 methods
    On stack replacement    :       24 methods
  Total compiled bytecodes  :   109655 bytes
    Standard compilation    :   100290 bytes
    On stack replacement    :     9365 bytes
  Average compilation speed :   119580 bytes/s

  nmethod code size         :  2281912 bytes
  nmethod total size        :  1604896 bytes


Result "jvbench.somier.SomierPatternBenchmark.pow":
  N = 10
  mean =      4.652 ±(99.9%) 0.016 s/op

  Histogram, s/op:
    [4.620, 4.623) = 0 
    [4.623, 4.625) = 0 
    [4.625, 4.628) = 0 
    [4.628, 4.630) = 1 
    [4.630, 4.633) = 0 
    [4.633, 4.635) = 0 
    [4.635, 4.638) = 0 
    [4.638, 4.640) = 0 
    [4.640, 4.643) = 1 
    [4.643, 4.645) = 0 
    [4.645, 4.648) = 0 
    [4.648, 4.650) = 0 
    [4.650, 4.653) = 1 
    [4.653, 4.655) = 1 
    [4.655, 4.658) = 2 
    [4.658, 4.660) = 2 
    [4.660, 4.663) = 2 
    [4.663, 4.665) = 0 
    [4.665, 4.668) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.628 s/op
     p(50.0000) =      4.657 s/op
     p(90.0000) =      4.662 s/op
     p(95.0000) =      4.662 s/op
     p(99.0000) =      4.662 s/op
     p(99.9000) =      4.662 s/op
     p(99.9900) =      4.662 s/op
     p(99.9990) =      4.662 s/op
     p(99.9999) =      4.662 s/op
    p(100.0000) =      4.662 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.pow:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt    Score    Error   Units
SomierPatternBenchmark.pow                        ss   10    4.652 ±  0.016    s/op
SomierPatternBenchmark.pow:·gc.alloc.rate         ss   10   ≈ 10⁻⁴           MB/sec
SomierPatternBenchmark.pow:·gc.alloc.rate.norm    ss   10  507.200 ± 15.299    B/op
SomierPatternBenchmark.pow:·gc.count              ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/somier/SomierPatternBenchmark.pow.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 337297.297 bytes/s; standard:  0.218 s, 73616 bytes, 997 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1474336 bytes; nmethods_code_size: 1045888 bytes}
  C2 {speed: 40419.170 bytes/s; standard:  0.156 s, 6452 bytes, 74 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 60176 bytes; nmethods_code_size: 38496 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 111465.167 bytes/s; standard:  0.006 s, 635 bytes, 134 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32208 bytes; nmethods_code_size: 20384 bytes}
  Tier2 {speed: 500577.279 bytes/s; standard:  0.000 s, 124 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1160 bytes; nmethods_code_size: 800 bytes}
  Tier3 {speed: 343166.527 bytes/s; standard:  0.212 s, 72857 bytes, 862 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1440968 bytes; nmethods_code_size: 1024704 bytes}
  Tier4 {speed: 40419.170 bytes/s; standard:  0.156 s, 6452 bytes, 74 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 60176 bytes; nmethods_code_size: 38496 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.380 s
    Standard compilation   :   0.374 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.216 s
       Setup time:            0.001 s
       Build HIR:             0.079 s
         Parse:                 0.059 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.087 s
         LIR Gen:               0.019 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.021 s
       Other:                 0.005 s

    C2 Compile Time:        0.163 s
       Parse:                 0.027 s
       Optimize:              0.073 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.049 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.008 s
       Matcher:                    0.016 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.051 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.028 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s

  Total compiled methods    :     1073 methods
    Standard compilation    :     1071 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    80134 bytes
    Standard compilation    :    80068 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   211149 bytes/s

  nmethod code size         :  1534512 bytes
  nmethod total size        :  1084384 bytes
