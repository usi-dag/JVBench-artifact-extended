# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/blackscholes/input/in_512K.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.530 s/op
# Warmup Iteration   2: 0.258 s/op
# Warmup Iteration   3: 0.216 s/op
# Warmup Iteration   4: 0.229 s/op
# Warmup Iteration   5: 0.318 s/op
# Warmup Iteration   6: 0.299 s/op
# Warmup Iteration   7: 0.191 s/op
# Warmup Iteration   8: 0.193 s/op
# Warmup Iteration   9: 0.191 s/op
# Warmup Iteration  10: 0.191 s/op
Iteration   1: 0.195 s/op
                 ·gc.alloc.rate:               538.307 MB/sec
                 ·gc.alloc.rate.norm:          393256080.000 B/op
                 ·gc.churn.G1_Eden_Space:      2342.475 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1711276032.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     4.000 ms

Iteration   2: 0.191 s/op
                 ·gc.alloc.rate:      541.555 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.191 s/op
                 ·gc.alloc.rate:      541.588 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.191 s/op
                 ·gc.alloc.rate:      541.656 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.195 s/op
                 ·gc.alloc.rate:               538.466 MB/sec
                 ·gc.alloc.rate.norm:          393243048.000 B/op
                 ·gc.churn.G1_Eden_Space:      2343.245 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1711276032.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     3.000 ms

Iteration   6: 0.191 s/op
                 ·gc.alloc.rate:      541.764 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.191 s/op
                 ·gc.alloc.rate:      541.548 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.192 s/op
                 ·gc.alloc.rate:      541.348 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.195 s/op
                 ·gc.alloc.rate:                   539.014 MB/sec
                 ·gc.alloc.rate.norm:              393243104.000 B/op
                 ·gc.churn.G1_Eden_Space:          2345.627 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1711276032.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.197 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 143816.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         4.000 ms

Iteration  10: 0.191 s/op
                 ·gc.alloc.rate:      541.992 MB/sec
                 ·gc.alloc.rate.norm: 393216504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 252831.386 bytes/s; standard:  0.405 s, 102628 bytes, 1367 methods; osr:  0.010 s, 2274 bytes, 4 methods; nmethods_size: 2662232 bytes; nmethods_code_size: 1924416 bytes}
  C2 {speed: 42090.983 bytes/s; standard:  0.933 s, 40538 bytes, 248 methods; osr:  0.102 s, 3003 bytes, 14 methods; nmethods_size: 337376 bytes; nmethods_code_size: 211648 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 82033.258 bytes/s; standard:  0.010 s, 799 bytes, 164 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 39264 bytes; nmethods_code_size: 24832 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 256937.243 bytes/s; standard:  0.395 s, 101829 bytes, 1203 methods; osr:  0.010 s, 2274 bytes, 4 methods; nmethods_size: 2622968 bytes; nmethods_code_size: 1899584 bytes}
  Tier4 {speed: 42090.983 bytes/s; standard:  0.933 s, 40538 bytes, 248 methods; osr:  0.102 s, 3003 bytes, 14 methods; nmethods_size: 337376 bytes; nmethods_code_size: 211648 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.450 s
    Standard compilation   :   1.337 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.112 s, Average : 0.006 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.412 s
       Setup time:            0.002 s
       Build HIR:             0.170 s
         Parse:                 0.136 s
         Optimize blocks:       0.000 s
         GVN:                   0.013 s
         Null checks elim:      0.007 s
         Range checks elim:     0.002 s
         Other:                 0.012 s
       Emit LIR:              0.150 s
         LIR Gen:               0.035 s
         Linear Scan:           0.114 s
         Other:                 0.001 s
       Code Emission:         0.045 s
       Code Installation:     0.037 s
       Other:                 0.008 s

    C2 Compile Time:        1.035 s
       Parse:                 0.155 s
       Optimize:              0.426 s
         Escape Analysis:       0.008 s
           Conn Graph:            0.007 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.024 s
         Incremental Inline:    0.015 s
           IdealLoop:             0.000 s
          (IGVN:                  0.004 s)
          (Inline:                0.010 s)
          (Prune Useless:         0.002 s)
           Other:                 0.015 s
         Vector:                0.011 s
           Box elimination:     0.011 s
             IGVN:              0.003 s
             Prune Useless:     0.003 s
         Renumber Live:         0.002 s
         IdealLoop:             0.289 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.005 s
         GVN 2:                 0.003 s
         Macro Expand:          0.019 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.006 s
         Other:                 0.044 s
       Matcher:                    0.056 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.066 s
       Regalloc:              0.277 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.005 s
         Build IFG (phys):      0.053 s
         Compute Liveness:      0.087 s
         Regalloc Split:        0.024 s
         Postalloc Copy Rem:    0.043 s
         Merge multidefs:       0.022 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.008 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.003 s
         Cache LRG:             0.001 s
         Simplify:              0.011 s
         Select:                0.014 s
         Other:                 0.000 s
       Block Ordering:        0.004 s
       Peephole:              0.001 s
       Code Emission:           0.044 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.008 s
         Build OOP maps:        0.015 s
         Fill buffer:           0.012 s
         Code Installation:     0.006 s
         Other:                 0.003 s

  Total compiled methods    :     1633 methods
    Standard compilation    :     1615 methods
    On stack replacement    :       18 methods
  Total compiled bytecodes  :   148443 bytes
    Standard compilation    :   143166 bytes
    On stack replacement    :     5277 bytes
  Average compilation speed :   102364 bytes/s

  nmethod code size         :  2999608 bytes
  nmethod total size        :  2136064 bytes


Result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange":
  N = 10
  mean =      0.192 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [0.190, 0.191) = 0 
    [0.191, 0.191) = 2 
    [0.191, 0.192) = 4 
    [0.192, 0.192) = 1 
    [0.192, 0.193) = 0 
    [0.193, 0.193) = 0 
    [0.193, 0.194) = 0 
    [0.194, 0.194) = 0 
    [0.194, 0.195) = 0 
    [0.195, 0.195) = 1 
    [0.195, 0.196) = 2 
    [0.196, 0.196) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.191 s/op
     p(50.0000) =      0.191 s/op
     p(90.0000) =      0.195 s/op
     p(95.0000) =      0.195 s/op
     p(99.0000) =      0.195 s/op
     p(99.9000) =      0.195 s/op
     p(99.9900) =      0.195 s/op
     p(99.9990) =      0.195 s/op
     p(99.9999) =      0.195 s/op
    p(100.0000) =      0.195 s/op

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.alloc.rate":
  540.724 ±(99.9%) 2.250 MB/sec [Average]
  (min, avg, max) = (538.307, 540.724, 541.992), stdev = 1.488
  CI (99.9%): [538.474, 542.973] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  393225776.000 ±(99.9%) 23196.618 B/op [Average]
  (min, avg, max) = (393216504.000, 393225776.000, 393256080.000), stdev = 15343.127
  CI (99.9%): [393202579.382, 393248972.618] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  703.135 ±(99.9%) 1711.656 MB/sec [Average]
  (min, avg, max) = (≈ 0, 703.135, 2345.627), stdev = 1132.155
  CI (99.9%): [≈ 0, 2414.791] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  513382809.600 ±(99.9%) 1249738829.165 B/op [Average]
  (min, avg, max) = (≈ 0, 513382809.600, 1711276032.000), stdev = 826624856.548
  CI (99.9%): [≈ 0, 1763121638.765] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  0.020 ±(99.9%) 0.094 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.020, 0.197), stdev = 0.062
  CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  14381.600 ±(99.9%) 68757.172 B/op [Average]
  (min, avg, max) = (≈ 0, 14381.600, 143816.000), stdev = 45478.612
  CI (99.9%): [≈ 0, 83138.772] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.300, 1.000), stdev = 0.483
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "jvbench.blackscholes.BlackscholesPatternBenchmark.indexInRange:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.100, 4.000), stdev = 1.792
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                   Mode  Cnt          Score            Error   Units
BlackscholesPatternBenchmark.indexInRange                                     ss   10          0.192 ±          0.003    s/op
BlackscholesPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10        540.724 ±          2.250  MB/sec
BlackscholesPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  393225776.000 ±      23196.618    B/op
BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10        703.135 ±       1711.656  MB/sec
BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  513382809.600 ± 1249738829.165    B/op
BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10          0.020 ±          0.094  MB/sec
BlackscholesPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10      14381.600 ±      68757.172    B/op
BlackscholesPatternBenchmark.indexInRange:·gc.count                           ss   10          3.000                   counts
BlackscholesPatternBenchmark.indexInRange:·gc.time                            ss   10         11.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/blackscholes/BlackscholesPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 335728.733 bytes/s; standard:  0.244 s, 81825 bytes, 1077 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1642824 bytes; nmethods_code_size: 1164160 bytes}
  C2 {speed: 43512.091 bytes/s; standard:  0.254 s, 11217 bytes, 91 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 101928 bytes; nmethods_code_size: 64608 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 107920.928 bytes/s; standard:  0.006 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 341665.007 bytes/s; standard:  0.238 s, 81157 bytes, 936 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1608912 bytes; nmethods_code_size: 1142688 bytes}
  Tier4 {speed: 43512.091 bytes/s; standard:  0.254 s, 11217 bytes, 91 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 101928 bytes; nmethods_code_size: 64608 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.503 s
    Standard compilation   :   0.497 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.241 s
       Setup time:            0.001 s
       Build HIR:             0.088 s
         Parse:                 0.066 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.096 s
         LIR Gen:               0.021 s
         Linear Scan:           0.074 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.023 s
       Other:                 0.006 s

    C2 Compile Time:        0.261 s
       Parse:                 0.029 s
       Optimize:              0.076 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.050 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.022 s
       Regalloc:              0.097 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.017 s
         Compute Liveness:      0.030 s
         Regalloc Split:        0.011 s
         Postalloc Copy Rem:    0.017 s
         Merge multidefs:       0.008 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.015 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1170 methods
    Standard compilation    :     1168 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    93108 bytes
    Standard compilation    :    93042 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   185094 bytes/s

  nmethod code size         :  1744752 bytes
  nmethod total size        :  1228768 bytes
