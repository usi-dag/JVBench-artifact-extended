# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.146 s/op
# Warmup Iteration   2: 0.133 s/op
# Warmup Iteration   3: 0.130 s/op
# Warmup Iteration   4: 0.112 s/op
# Warmup Iteration   5: 0.127 s/op
# Warmup Iteration   6: 0.128 s/op
# Warmup Iteration   7: 0.126 s/op
# Warmup Iteration   8: 0.112 s/op
# Warmup Iteration   9: 0.126 s/op
# Warmup Iteration  10: 0.111 s/op
Iteration   1: 0.127 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.127 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.124 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.129 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.128 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.127 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.127 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.125 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 101448.501 bytes/s; standard:  0.598 s, 60173 bytes, 850 methods; osr:  0.003 s, 824 bytes, 3 methods; nmethods_size: 1278712 bytes; nmethods_code_size: 911584 bytes}
  C2 {speed: 38427.707 bytes/s; standard:  0.103 s, 4556 bytes, 53 methods; osr:  0.022 s, 282 bytes, 5 methods; nmethods_size: 44976 bytes; nmethods_code_size: 30048 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 80893.558 bytes/s; standard:  0.008 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 101735.169 bytes/s; standard:  0.590 s, 59504 bytes, 712 methods; osr:  0.003 s, 824 bytes, 3 methods; nmethods_size: 1245512 bytes; nmethods_code_size: 890528 bytes}
  Tier4 {speed: 38427.707 bytes/s; standard:  0.103 s, 4556 bytes, 53 methods; osr:  0.022 s, 282 bytes, 5 methods; nmethods_size: 44976 bytes; nmethods_code_size: 30048 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.728 s
    Standard compilation   :   0.702 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.025 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.600 s
       Setup time:            0.001 s
       Build HIR:             0.083 s
         Parse:                 0.065 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.273 s
         LIR Gen:               0.215 s
         Linear Scan:           0.058 s
         Other:                 0.001 s
       Code Emission:         0.021 s
       Code Installation:     0.217 s
       Other:                 0.005 s

    C2 Compile Time:        0.128 s
       Parse:                 0.012 s
       Optimize:              0.051 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.038 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.009 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.010 s
       Regalloc:              0.037 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.007 s
         Compute Liveness:      0.012 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.006 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.007 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      911 methods
    Standard compilation    :      903 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    65835 bytes
    Standard compilation    :    64729 bytes
    On stack replacement    :     1106 bytes
  Average compilation speed :    90438 bytes/s

  nmethod code size         :  1323688 bytes
  nmethod total size        :   941632 bytes


Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.124 ±(99.9%) 0.010 s/op

  Histogram, s/op:
    [0.110, 0.111) = 2 
    [0.111, 0.113) = 0 
    [0.113, 0.114) = 0 
    [0.114, 0.115) = 0 
    [0.115, 0.116) = 0 
    [0.116, 0.118) = 0 
    [0.118, 0.119) = 0 
    [0.119, 0.120) = 0 
    [0.120, 0.121) = 0 
    [0.121, 0.123) = 0 
    [0.123, 0.124) = 1 
    [0.124, 0.125) = 0 
    [0.125, 0.126) = 1 
    [0.126, 0.128) = 4 
    [0.128, 0.129) = 1 
    [0.129, 0.130) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.111 s/op
     p(50.0000) =      0.127 s/op
     p(90.0000) =      0.129 s/op
     p(95.0000) =      0.129 s/op
     p(99.0000) =      0.129 s/op
     p(99.9000) =      0.129 s/op
     p(99.9900) =      0.129 s/op
     p(99.9990) =      0.129 s/op
     p(99.9999) =      0.129 s/op
    p(100.0000) =      0.129 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:00:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.220 s/op
# Warmup Iteration   2: 0.135 s/op
# Warmup Iteration   3: 0.109 s/op
# Warmup Iteration   4: 0.109 s/op
# Warmup Iteration   5: 0.109 s/op
# Warmup Iteration   6: 0.123 s/op
# Warmup Iteration   7: 0.115 s/op
# Warmup Iteration   8: 0.117 s/op
# Warmup Iteration   9: 0.108 s/op
# Warmup Iteration  10: 0.117 s/op
Iteration   1: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.122 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.118 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.122 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.118 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.119 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.122 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 67451.385 bytes/s; standard:  1.038 s, 69388 bytes, 1001 methods; osr:  0.004 s, 941 bytes, 3 methods; nmethods_size: 1589200 bytes; nmethods_code_size: 1138016 bytes}
  C2 {speed: 35012.265 bytes/s; standard:  0.194 s, 6858 bytes, 81 methods; osr:  0.042 s, 1417 bytes, 8 methods; nmethods_size: 79376 bytes; nmethods_code_size: 51360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3429.540 bytes/s; standard:  0.204 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 83007.027 bytes/s; standard:  0.835 s, 68689 bytes, 857 methods; osr:  0.004 s, 941 bytes, 3 methods; nmethods_size: 1554640 bytes; nmethods_code_size: 1116128 bytes}
  Tier4 {speed: 35012.265 bytes/s; standard:  0.194 s, 6858 bytes, 81 methods; osr:  0.042 s, 1417 bytes, 8 methods; nmethods_size: 79376 bytes; nmethods_code_size: 51360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.280 s
    Standard compilation   :   1.232 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.047 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        1.041 s
       Setup time:            0.001 s
       Build HIR:             0.892 s
         Parse:                 0.872 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.093 s
         LIR Gen:               0.021 s
         Linear Scan:           0.071 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.023 s
       Other:                 0.006 s

    C2 Compile Time:        0.239 s
       Parse:                 0.033 s
       Optimize:              0.096 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.002 s
           Box elimination:     0.002 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.070 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.015 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.062 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.011 s
         Compute Liveness:      0.021 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.006 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1093 methods
    Standard compilation    :     1082 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    78604 bytes
    Standard compilation    :    76246 bytes
    On stack replacement    :     2358 bytes
  Average compilation speed :    61419 bytes/s

  nmethod code size         :  1668576 bytes
  nmethod total size        :  1189376 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.119 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [0.116, 0.117) = 0 
    [0.117, 0.117) = 3 
    [0.117, 0.118) = 1 
    [0.118, 0.118) = 1 
    [0.118, 0.119) = 1 
    [0.119, 0.119) = 0 
    [0.119, 0.120) = 1 
    [0.120, 0.120) = 0 
    [0.120, 0.121) = 0 
    [0.121, 0.121) = 0 
    [0.121, 0.122) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.117 s/op
     p(50.0000) =      0.118 s/op
     p(90.0000) =      0.122 s/op
     p(95.0000) =      0.122 s/op
     p(99.0000) =      0.122 s/op
     p(99.9000) =      0.122 s/op
     p(99.9900) =      0.122 s/op
     p(99.9990) =      0.122 s/op
     p(99.9999) =      0.122 s/op
    p(100.0000) =      0.122 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:00:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.210 s/op
# Warmup Iteration   2: 0.137 s/op
# Warmup Iteration   3: 0.115 s/op
# Warmup Iteration   4: 0.117 s/op
# Warmup Iteration   5: 0.117 s/op
# Warmup Iteration   6: 0.116 s/op
# Warmup Iteration   7: 0.115 s/op
# Warmup Iteration   8: 0.108 s/op
# Warmup Iteration   9: 0.116 s/op
# Warmup Iteration  10: 0.117 s/op
Iteration   1: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.112 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.121 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.110 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.115 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.108 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.121 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.114 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.115 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 110662.490 bytes/s; standard:  0.642 s, 70566 bytes, 998 methods; osr:  0.005 s, 941 bytes, 3 methods; nmethods_size: 1596232 bytes; nmethods_code_size: 1141728 bytes}
  C2 {speed: 34811.052 bytes/s; standard:  0.188 s, 6790 bytes, 82 methods; osr:  0.050 s, 1508 bytes, 9 methods; nmethods_size: 79848 bytes; nmethods_code_size: 51424 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 113269.075 bytes/s; standard:  0.006 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 110637.356 bytes/s; standard:  0.635 s, 69867 bytes, 854 methods; osr:  0.005 s, 941 bytes, 3 methods; nmethods_size: 1561672 bytes; nmethods_code_size: 1119840 bytes}
  Tier4 {speed: 34811.052 bytes/s; standard:  0.188 s, 6790 bytes, 82 methods; osr:  0.050 s, 1508 bytes, 9 methods; nmethods_size: 79848 bytes; nmethods_code_size: 51424 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.885 s
    Standard compilation   :   0.830 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.055 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.645 s
       Setup time:            0.001 s
       Build HIR:             0.104 s
         Parse:                 0.083 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.093 s
         LIR Gen:               0.021 s
         Linear Scan:           0.071 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.218 s
       Other:                 0.202 s

    C2 Compile Time:        0.240 s
       Parse:                 0.034 s
       Optimize:              0.098 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.002 s
           Box elimination:     0.002 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.072 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.015 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.062 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.012 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.006 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1092 methods
    Standard compilation    :     1080 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    79805 bytes
    Standard compilation    :    77356 bytes
    On stack replacement    :     2449 bytes
  Average compilation speed :    90141 bytes/s

  nmethod code size         :  1676080 bytes
  nmethod total size        :  1193152 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.115 ±(99.9%) 0.006 s/op

  Histogram, s/op:
    [0.100, 0.103) = 0 
    [0.103, 0.105) = 0 
    [0.105, 0.108) = 0 
    [0.108, 0.110) = 2 
    [0.110, 0.113) = 1 
    [0.113, 0.115) = 1 
    [0.115, 0.118) = 4 
    [0.118, 0.120) = 0 
    [0.120, 0.123) = 2 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.108 s/op
     p(50.0000) =      0.115 s/op
     p(90.0000) =      0.121 s/op
     p(95.0000) =      0.121 s/op
     p(99.0000) =      0.121 s/op
     p(99.9000) =      0.121 s/op
     p(99.9900) =      0.121 s/op
     p(99.9990) =      0.121 s/op
     p(99.9999) =      0.121 s/op
    p(100.0000) =      0.121 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.174 s/op
# Warmup Iteration   2: 0.169 s/op
# Warmup Iteration   3: 0.158 s/op
# Warmup Iteration   4: 0.152 s/op
# Warmup Iteration   5: 0.157 s/op
# Warmup Iteration   6: 0.163 s/op
# Warmup Iteration   7: 0.160 s/op
# Warmup Iteration   8: 0.153 s/op
# Warmup Iteration   9: 0.153 s/op
# Warmup Iteration  10: 0.154 s/op
Iteration   1: 0.162 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.162 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.153 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.182 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.163 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.162 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.130 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.153 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.152 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.156 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 102644.968 bytes/s; standard:  0.596 s, 60674 bytes, 855 methods; osr:  0.003 s, 824 bytes, 3 methods; nmethods_size: 1288400 bytes; nmethods_code_size: 918080 bytes}
  C2 {speed: 40122.719 bytes/s; standard:  0.104 s, 4574 bytes, 52 methods; osr:  0.015 s, 191 bytes, 4 methods; nmethods_size: 43280 bytes; nmethods_code_size: 29024 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3304.893 bytes/s; standard:  0.202 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 153335.223 bytes/s; standard:  0.394 s, 60005 bytes, 717 methods; osr:  0.003 s, 824 bytes, 3 methods; nmethods_size: 1255200 bytes; nmethods_code_size: 897024 bytes}
  Tier4 {speed: 40122.719 bytes/s; standard:  0.104 s, 4574 bytes, 52 methods; osr:  0.015 s, 191 bytes, 4 methods; nmethods_size: 43280 bytes; nmethods_code_size: 29024 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.719 s
    Standard compilation   :   0.700 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.018 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.598 s
       Setup time:            0.001 s
       Build HIR:             0.280 s
         Parse:                 0.262 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.077 s
         LIR Gen:               0.017 s
         Linear Scan:           0.059 s
         Other:                 0.001 s
       Code Emission:         0.021 s
       Code Installation:     0.214 s
       Other:                 0.005 s

    C2 Compile Time:        0.121 s
       Parse:                 0.012 s
       Optimize:              0.049 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.037 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.008 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.009 s
       Regalloc:              0.034 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.006 s
         Compute Liveness:      0.011 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.007 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      914 methods
    Standard compilation    :      907 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    66263 bytes
    Standard compilation    :    65248 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :    92203 bytes/s

  nmethod code size         :  1331680 bytes
  nmethod total size        :   947104 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.158 ±(99.9%) 0.020 s/op

  Histogram, s/op:
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 1 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 0 
    [0.140, 0.145) = 0 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 3 
    [0.155, 0.160) = 1 
    [0.160, 0.165) = 4 
    [0.165, 0.170) = 0 
    [0.170, 0.175) = 0 
    [0.175, 0.180) = 0 
    [0.180, 0.185) = 1 
    [0.185, 0.190) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.130 s/op
     p(50.0000) =      0.159 s/op
     p(90.0000) =      0.180 s/op
     p(95.0000) =      0.182 s/op
     p(99.0000) =      0.182 s/op
     p(99.9000) =      0.182 s/op
     p(99.9900) =      0.182 s/op
     p(99.9990) =      0.182 s/op
     p(99.9999) =      0.182 s/op
    p(100.0000) =      0.182 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt    Score    Error   Units
AxpyBenchmark.autoVec                            ss   10    0.124 ±  0.010    s/op
AxpyBenchmark.autoVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.explicitVec                        ss   10    0.119 ±  0.003    s/op
AxpyBenchmark.explicitVec:·gc.alloc.rate         ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
AxpyBenchmark.fullVec                            ss   10    0.115 ±  0.006    s/op
AxpyBenchmark.fullVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.serial                             ss   10    0.158 ±  0.020    s/op
AxpyBenchmark.serial:·gc.alloc.rate              ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.serial:·gc.alloc.rate.norm         ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_21:35:28/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 330515.110 bytes/s; standard:  0.315 s, 104220 bytes, 1247 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2120832 bytes; nmethods_code_size: 1496800 bytes}
  C2 {speed: 46309.184 bytes/s; standard:  0.324 s, 15194 bytes, 115 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 131744 bytes; nmethods_code_size: 83456 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 110507.091 bytes/s; standard:  0.007 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 335127.605 bytes/s; standard:  0.309 s, 103500 bytes, 1095 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2084200 bytes; nmethods_code_size: 1473696 bytes}
  Tier4 {speed: 46309.184 bytes/s; standard:  0.324 s, 15194 bytes, 115 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 131744 bytes; nmethods_code_size: 83456 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.648 s
    Standard compilation   :   0.639 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.008 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.315 s
       Setup time:            0.001 s
       Build HIR:             0.117 s
         Parse:                 0.086 s
         Optimize blocks:       0.000 s
         GVN:                   0.013 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.126 s
         LIR Gen:               0.028 s
         Linear Scan:           0.097 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.029 s
       Other:                 0.007 s

    C2 Compile Time:        0.331 s
       Parse:                 0.050 s
       Optimize:              0.096 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.018 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.002 s
         IdealLoop:             0.069 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
       Matcher:                    0.024 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.118 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.021 s
         Compute Liveness:      0.037 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.021 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.019 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1365 methods
    Standard compilation    :     1362 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   120129 bytes
    Standard compilation    :   119414 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   185497 bytes/s

  nmethod code size         :  2252576 bytes
  nmethod total size        :  1580256 bytes
