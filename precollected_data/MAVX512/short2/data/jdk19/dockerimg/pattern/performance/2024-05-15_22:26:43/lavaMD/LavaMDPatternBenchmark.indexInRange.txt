# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.149 s/op
# Warmup Iteration   2: 1.546 s/op
# Warmup Iteration   3: 0.455 s/op
# Warmup Iteration   4: 0.454 s/op
# Warmup Iteration   5: 0.455 s/op
# Warmup Iteration   6: 0.454 s/op
# Warmup Iteration   7: 0.454 s/op
# Warmup Iteration   8: 0.454 s/op
# Warmup Iteration   9: 0.454 s/op
# Warmup Iteration  10: 0.454 s/op
Iteration   1: 0.454 s/op
                 ·gc.alloc.rate:      47.589 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.454 s/op
                 ·gc.alloc.rate:      47.611 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.453 s/op
                 ·gc.alloc.rate:      47.620 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.454 s/op
                 ·gc.alloc.rate:      47.614 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.453 s/op
                 ·gc.alloc.rate:      47.639 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.454 s/op
                 ·gc.alloc.rate:      47.602 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.454 s/op
                 ·gc.alloc.rate:      47.621 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.453 s/op
                 ·gc.alloc.rate:      47.650 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.454 s/op
                 ·gc.alloc.rate:      47.618 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.456 s/op
                 ·gc.alloc.rate:               47.519 MB/sec
                 ·gc.alloc.rate.norm:          47692648.000 B/op
                 ·gc.churn.G1_Eden_Space:      1253.705 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1258291200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 274730.423 bytes/s; standard:  0.343 s, 94048 bytes, 1204 methods; osr:  0.015 s, 4261 bytes, 4 methods; nmethods_size: 2323448 bytes; nmethods_code_size: 1641088 bytes}
  C2 {speed: 44720.681 bytes/s; standard:  0.521 s, 24133 bytes, 169 methods; osr:  0.260 s, 10800 bytes, 14 methods; nmethods_size: 271176 bytes; nmethods_code_size: 164736 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 112495.927 bytes/s; standard:  0.007 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 277869.015 bytes/s; standard:  0.336 s, 93284 bytes, 1047 methods; osr:  0.015 s, 4261 bytes, 4 methods; nmethods_size: 2285920 bytes; nmethods_code_size: 1617376 bytes}
  Tier4 {speed: 44720.681 bytes/s; standard:  0.521 s, 24133 bytes, 169 methods; osr:  0.260 s, 10800 bytes, 14 methods; nmethods_size: 271176 bytes; nmethods_code_size: 164736 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.139 s
    Standard compilation   :   0.864 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.275 s, Average : 0.015 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.355 s
       Setup time:            0.001 s
       Build HIR:             0.144 s
         Parse:                 0.116 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.131 s
         LIR Gen:               0.029 s
         Linear Scan:           0.101 s
         Other:                 0.001 s
       Code Emission:         0.041 s
       Code Installation:     0.031 s
       Other:                 0.007 s

    C2 Compile Time:        0.782 s
       Parse:                 0.115 s
       Optimize:              0.255 s
         Escape Analysis:       0.006 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.019 s
         Incremental Inline:    0.008 s
           IdealLoop:             0.000 s
          (IGVN:                  0.004 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.002 s)
           Other:                 0.008 s
         Vector:                0.007 s
           Box elimination:     0.007 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.002 s
         IdealLoop:             0.161 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.012 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.030 s
       Matcher:                    0.056 s
         Post Selection Cleanup:   0.004 s
       Scheduler:                  0.049 s
       Regalloc:              0.257 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.050 s
         Compute Liveness:      0.072 s
         Regalloc Split:        0.020 s
         Postalloc Copy Rem:    0.038 s
         Merge multidefs:       0.016 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.007 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.015 s
         Select:                0.019 s
         Other:                 0.007 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.043 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.006 s
         Build OOP maps:        0.013 s
         Fill buffer:           0.009 s
         Code Installation:     0.013 s
         Other:                 0.002 s

  Total compiled methods    :     1391 methods
    Standard compilation    :     1373 methods
    On stack replacement    :       18 methods
  Total compiled bytecodes  :   133242 bytes
    Standard compilation    :   118181 bytes
    On stack replacement    :    15061 bytes
  Average compilation speed :   116984 bytes/s

  nmethod code size         :  2594624 bytes
  nmethod total size        :  1805824 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange":
  N = 10
  mean =      0.454 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.452, 0.453) = 0 
    [0.453, 0.453) = 1 
    [0.453, 0.454) = 2 
    [0.454, 0.454) = 5 
    [0.454, 0.455) = 1 
    [0.455, 0.455) = 0 
    [0.455, 0.456) = 0 
    [0.456, 0.456) = 0 
    [0.456, 0.457) = 1 
    [0.457, 0.457) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.453 s/op
     p(50.0000) =      0.454 s/op
     p(90.0000) =      0.456 s/op
     p(95.0000) =      0.456 s/op
     p(99.0000) =      0.456 s/op
     p(99.9000) =      0.456 s/op
     p(99.9900) =      0.456 s/op
     p(99.9990) =      0.456 s/op
     p(99.9999) =      0.456 s/op
    p(100.0000) =      0.456 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate":
  47.608 ±(99.9%) 0.054 MB/sec [Average]
  (min, avg, max) = (47.519, 47.608, 47.650), stdev = 0.036
  CI (99.9%): [47.554, 47.663] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  47668758.400 ±(99.9%) 12690.454 B/op [Average]
  (min, avg, max) = (47666104.000, 47668758.400, 47692648.000), stdev = 8393.950
  CI (99.9%): [47656067.946, 47681448.854] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  125.370 ±(99.9%) 599.385 MB/sec [Average]
  (min, avg, max) = (≈ 0, 125.370, 1253.705), stdev = 396.456
  CI (99.9%): [≈ 0, 724.756] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  125829120.000 ±(99.9%) 601578023.485 B/op [Average]
  (min, avg, max) = (≈ 0, 125829120.000, 1258291200.000), stdev = 397906615.175
  CI (99.9%): [≈ 0, 727407143.485] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# Run complete. Total time: 00:00:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                Mode  Cnt          Score           Error   Units
lavaMD.LavaMDPatternBenchmark.indexInRange                                 ss   10          0.454 ±         0.001    s/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate                  ss   10         47.608 ±         0.054  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm             ss   10   47668758.400 ±     12690.454    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space         ss   10        125.370 ±       599.385  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm    ss   10  125829120.000 ± 601578023.485    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count                       ss   10          1.000                  counts
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time                        ss   10          1.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/lavaMD/LavaMDPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 337454.219 bytes/s; standard:  0.235 s, 79257 bytes, 1055 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1602672 bytes; nmethods_code_size: 1134848 bytes}
  C2 {speed: 43641.814 bytes/s; standard:  0.249 s, 11059 bytes, 85 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 99456 bytes; nmethods_code_size: 62944 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 114273.652 bytes/s; standard:  0.006 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 343150.742 bytes/s; standard:  0.229 s, 78589 bytes, 914 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1568760 bytes; nmethods_code_size: 1113376 bytes}
  Tier4 {speed: 43641.814 bytes/s; standard:  0.249 s, 11059 bytes, 85 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 99456 bytes; nmethods_code_size: 62944 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.490 s
    Standard compilation   :   0.484 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.232 s
       Setup time:            0.001 s
       Build HIR:             0.085 s
         Parse:                 0.064 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.093 s
         LIR Gen:               0.020 s
         Linear Scan:           0.072 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.022 s
       Other:                 0.006 s

    C2 Compile Time:        0.257 s
       Parse:                 0.028 s
       Optimize:              0.075 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.050 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.022 s
       Regalloc:              0.096 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.017 s
         Compute Liveness:      0.030 s
         Regalloc Split:        0.011 s
         Postalloc Copy Rem:    0.017 s
         Merge multidefs:       0.008 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1142 methods
    Standard compilation    :     1140 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    90382 bytes
    Standard compilation    :    90316 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   184534 bytes/s

  nmethod code size         :  1702128 bytes
  nmethod total size        :  1197792 bytes
