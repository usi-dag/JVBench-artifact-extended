# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dk1=3 -Dk2=10 -Ddim=128 -Dchunksize=128 -Dclustersize=10 -Dinfile=streamcluster/input/streamcluster_128_128.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.streamcluster.StreamclusterPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3.692 s/op
# Warmup Iteration   2: 3.263 s/op
# Warmup Iteration   3: 3.105 s/op
# Warmup Iteration   4: 3.138 s/op
# Warmup Iteration   5: 3.154 s/op
# Warmup Iteration   6: 3.088 s/op
# Warmup Iteration   7: 3.116 s/op
# Warmup Iteration   8: 3.028 s/op
# Warmup Iteration   9: 3.143 s/op
# Warmup Iteration  10: 3.080 s/op
Iteration   1: 3.082 s/op
                 ·gc.alloc.rate:      18.472 MB/sec
                 ·gc.alloc.rate.norm: 69409296.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.069 s/op
                 ·gc.alloc.rate:      18.542 MB/sec
                 ·gc.alloc.rate.norm: 69409728.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.064 s/op
                 ·gc.alloc.rate:      18.567 MB/sec
                 ·gc.alloc.rate.norm: 69409296.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.061 s/op
                 ·gc.alloc.rate:      18.583 MB/sec
                 ·gc.alloc.rate.norm: 69408904.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.138 s/op
                 ·gc.alloc.rate:      18.191 MB/sec
                 ·gc.alloc.rate.norm: 69409296.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.066 s/op
                 ·gc.alloc.rate:      18.542 MB/sec
                 ·gc.alloc.rate.norm: 69349384.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 3.077 s/op
                 ·gc.alloc.rate:      18.468 MB/sec
                 ·gc.alloc.rate.norm: 69289816.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.073 s/op
                 ·gc.alloc.rate:      18.519 MB/sec
                 ·gc.alloc.rate.norm: 69409376.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.077 s/op
                 ·gc.alloc.rate:      18.485 MB/sec
                 ·gc.alloc.rate.norm: 69350536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.091 s/op
                 ·gc.alloc.rate:      18.412 MB/sec
                 ·gc.alloc.rate.norm: 69349768.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 284696.827 bytes/s; standard:  0.329 s, 91945 bytes, 1197 methods; osr:  0.015 s, 5949 bytes, 8 methods; nmethods_size: 2177424 bytes; nmethods_code_size: 1558560 bytes}
  C2 {speed: 37864.340 bytes/s; standard:  0.833 s, 34036 bytes, 172 methods; osr:  0.817 s, 28460 bytes, 25 methods; nmethods_size: 479344 bytes; nmethods_code_size: 300864 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 112812.396 bytes/s; standard:  0.007 s, 788 bytes, 161 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 38456 bytes; nmethods_code_size: 24288 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 288260.891 bytes/s; standard:  0.322 s, 91157 bytes, 1036 methods; osr:  0.015 s, 5949 bytes, 8 methods; nmethods_size: 2138968 bytes; nmethods_code_size: 1534272 bytes}
  Tier4 {speed: 37864.340 bytes/s; standard:  0.833 s, 34036 bytes, 172 methods; osr:  0.817 s, 28460 bytes, 25 methods; nmethods_size: 479344 bytes; nmethods_code_size: 300864 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.995 s
    Standard compilation   :   1.162 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.832 s, Average : 0.025 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.342 s
       Setup time:            0.001 s
       Build HIR:             0.141 s
         Parse:                 0.112 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.129 s
         LIR Gen:               0.029 s
         Linear Scan:           0.098 s
         Other:                 0.001 s
       Code Emission:         0.036 s
       Code Installation:     0.028 s
       Other:                 0.007 s

    C2 Compile Time:        1.651 s
       Parse:                 0.211 s
       Optimize:              0.628 s
         Escape Analysis:       0.007 s
           Conn Graph:            0.007 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.035 s
         Incremental Inline:    0.021 s
           IdealLoop:             0.000 s
          (IGVN:                  0.011 s)
          (Inline:                0.005 s)
          (Prune Useless:         0.005 s)
           Other:                 0.021 s
         Vector:                0.014 s
           Box elimination:     0.014 s
             IGVN:              0.004 s
             Prune Useless:     0.004 s
         Renumber Live:         0.005 s
         IdealLoop:             0.463 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.005 s
         GVN 2:                 0.003 s
         Macro Expand:          0.021 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.007 s
         Other:                 0.048 s
       Matcher:                    0.069 s
         Post Selection Cleanup:   0.007 s
       Scheduler:                  0.094 s
       Regalloc:              0.579 s
         Ctor Chaitin:          0.001 s
         Build IFG (virt):      0.011 s
         Build IFG (phys):      0.117 s
         Compute Liveness:      0.162 s
         Regalloc Split:        0.062 s
         Postalloc Copy Rem:    0.076 s
         Merge multidefs:       0.030 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.022 s
         Coalesce 2:            0.005 s
         Coalesce 3:            0.007 s
         Cache LRG:             0.001 s
         Simplify:              0.033 s
         Select:                0.038 s
         Other:                 0.012 s
       Block Ordering:        0.006 s
       Peephole:              0.001 s
       Code Emission:           0.058 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.010 s
         Build OOP maps:        0.023 s
         Fill buffer:           0.016 s
         Code Installation:     0.005 s
         Other:                 0.004 s
       Other:                 0.001 s

  Total compiled methods    :     1402 methods
    Standard compilation    :     1369 methods
    On stack replacement    :       33 methods
  Total compiled bytecodes  :   160390 bytes
    Standard compilation    :   125981 bytes
    On stack replacement    :    34409 bytes
  Average compilation speed :    80389 bytes/s

  nmethod code size         :  2656768 bytes
  nmethod total size        :  1859424 bytes


Result "jvbench.streamcluster.StreamclusterPatternBenchmark.indexInRange":
  N = 10
  mean =      3.080 ±(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.060, 3.065) = 2 
    [3.065, 3.070) = 2 
    [3.070, 3.075) = 1 
    [3.075, 3.080) = 2 
    [3.080, 3.085) = 1 
    [3.085, 3.090) = 0 
    [3.090, 3.095) = 1 
    [3.095, 3.100) = 0 
    [3.100, 3.105) = 0 
    [3.105, 3.110) = 0 
    [3.110, 3.115) = 0 
    [3.115, 3.120) = 0 
    [3.120, 3.125) = 0 
    [3.125, 3.130) = 0 
    [3.130, 3.135) = 0 
    [3.135, 3.140) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.061 s/op
     p(50.0000) =      3.075 s/op
     p(90.0000) =      3.133 s/op
     p(95.0000) =      3.138 s/op
     p(99.0000) =      3.138 s/op
     p(99.9000) =      3.138 s/op
     p(99.9900) =      3.138 s/op
     p(99.9990) =      3.138 s/op
     p(99.9999) =      3.138 s/op
    p(100.0000) =      3.138 s/op

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.indexInRange:·gc.alloc.rate":
  18.478 ±(99.9%) 0.171 MB/sec [Average]
  (min, avg, max) = (18.191, 18.478, 18.583), stdev = 0.113
  CI (99.9%): [18.307, 18.650] (assumes normal distribution)

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  69379540.000 ±(99.9%) 63760.220 B/op [Average]
  (min, avg, max) = (69289816.000, 69379540.000, 69409728.000), stdev = 42173.438
  CI (99.9%): [69315779.780, 69443300.220] (assumes normal distribution)

Secondary result "jvbench.streamcluster.StreamclusterPatternBenchmark.indexInRange:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                       Mode  Cnt         Score       Error   Units
StreamclusterPatternBenchmark.indexInRange                        ss   10         3.080 ±     0.034    s/op
StreamclusterPatternBenchmark.indexInRange:·gc.alloc.rate         ss   10        18.478 ±     0.171  MB/sec
StreamclusterPatternBenchmark.indexInRange:·gc.alloc.rate.norm    ss   10  69379540.000 ± 63760.220    B/op
StreamclusterPatternBenchmark.indexInRange:·gc.count              ss   10           ≈ 0              counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/streamcluster/StreamclusterPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 334383.796 bytes/s; standard:  0.222 s, 74352 bytes, 999 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1483360 bytes; nmethods_code_size: 1052128 bytes}
  C2 {speed: 44774.890 bytes/s; standard:  0.221 s, 10083 bytes, 75 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 87176 bytes; nmethods_code_size: 55648 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 102554.214 bytes/s; standard:  0.007 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 341379.905 bytes/s; standard:  0.216 s, 73684 bytes, 858 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1449448 bytes; nmethods_code_size: 1030656 bytes}
  Tier4 {speed: 44774.890 bytes/s; standard:  0.221 s, 10083 bytes, 75 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 87176 bytes; nmethods_code_size: 55648 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.449 s
    Standard compilation   :   0.443 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.006 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.220 s
       Setup time:            0.001 s
       Build HIR:             0.081 s
         Parse:                 0.061 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.088 s
         LIR Gen:               0.019 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.021 s
       Other:                 0.005 s

    C2 Compile Time:        0.229 s
       Parse:                 0.026 s
       Optimize:              0.066 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.043 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.016 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.085 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.015 s
         Compute Liveness:      0.027 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.014 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :     1076 methods
    Standard compilation    :     1074 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    84501 bytes
    Standard compilation    :    84435 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   188188 bytes/s

  nmethod code size         :  1570536 bytes
  nmethod total size        :  1107776 bytes
