# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.352 s/op
# Warmup Iteration   2: 1.631 s/op
# Warmup Iteration   3: 0.454 s/op
# Warmup Iteration   4: 0.453 s/op
# Warmup Iteration   5: 0.452 s/op
# Warmup Iteration   6: 0.453 s/op
# Warmup Iteration   7: 0.453 s/op
# Warmup Iteration   8: 0.452 s/op
# Warmup Iteration   9: 0.452 s/op
# Warmup Iteration  10: 0.453 s/op
Iteration   1: 0.452 s/op
                 ·gc.alloc.rate:      47.710 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.453 s/op
                 ·gc.alloc.rate:      47.674 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.453 s/op
                 ·gc.alloc.rate:      47.658 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.452 s/op
                 ·gc.alloc.rate:      47.708 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.452 s/op
                 ·gc.alloc.rate:      47.683 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.453 s/op
                 ·gc.alloc.rate:      47.658 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.453 s/op
                 ·gc.alloc.rate:      47.654 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.452 s/op
                 ·gc.alloc.rate:      47.666 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.452 s/op
                 ·gc.alloc.rate:      47.678 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.453 s/op
                 ·gc.alloc.rate:      47.659 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 273767.479 bytes/s; standard:  0.342 s, 93455 bytes, 1204 methods; osr:  0.015 s, 4261 bytes, 4 methods; nmethods_size: 2316552 bytes; nmethods_code_size: 1636064 bytes}
  C2 {speed: 45576.152 bytes/s; standard:  0.499 s, 23858 bytes, 167 methods; osr:  0.263 s, 10891 bytes, 15 methods; nmethods_size: 270720 bytes; nmethods_code_size: 164576 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 111087.314 bytes/s; standard:  0.007 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 276963.646 bytes/s; standard:  0.336 s, 92691 bytes, 1047 methods; osr:  0.015 s, 4261 bytes, 4 methods; nmethods_size: 2279024 bytes; nmethods_code_size: 1612352 bytes}
  Tier4 {speed: 45576.152 bytes/s; standard:  0.499 s, 23858 bytes, 167 methods; osr:  0.263 s, 10891 bytes, 15 methods; nmethods_size: 270720 bytes; nmethods_code_size: 164576 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.120 s
    Standard compilation   :   0.842 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.278 s, Average : 0.015 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.355 s
       Setup time:            0.001 s
       Build HIR:             0.143 s
         Parse:                 0.115 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.131 s
         LIR Gen:               0.029 s
         Linear Scan:           0.101 s
         Other:                 0.001 s
       Code Emission:         0.038 s
       Code Installation:     0.034 s
       Other:                 0.007 s

    C2 Compile Time:        0.764 s
       Parse:                 0.114 s
       Optimize:              0.254 s
         Escape Analysis:       0.007 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.018 s
         Incremental Inline:    0.009 s
           IdealLoop:             0.000 s
          (IGVN:                  0.005 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.002 s)
           Other:                 0.009 s
         Vector:                0.007 s
           Box elimination:     0.007 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.002 s
         IdealLoop:             0.160 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.012 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.030 s
       Matcher:                    0.041 s
         Post Selection Cleanup:   0.004 s
       Scheduler:                  0.056 s
       Regalloc:              0.256 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.051 s
         Compute Liveness:      0.077 s
         Regalloc Split:        0.020 s
         Postalloc Copy Rem:    0.038 s
         Merge multidefs:       0.016 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.007 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.003 s
         Cache LRG:             0.001 s
         Simplify:              0.015 s
         Select:                0.019 s
         Other:                 0.000 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.034 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.006 s
         Build OOP maps:        0.011 s
         Fill buffer:           0.009 s
         Code Installation:     0.006 s
         Other:                 0.002 s

  Total compiled methods    :     1390 methods
    Standard compilation    :     1371 methods
    On stack replacement    :       19 methods
  Total compiled bytecodes  :   132465 bytes
    Standard compilation    :   117313 bytes
    On stack replacement    :    15152 bytes
  Average compilation speed :   118256 bytes/s

  nmethod code size         :  2587272 bytes
  nmethod total size        :  1800640 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fma":
  N = 10
  mean =      0.453 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.451, 0.451) = 0 
    [0.451, 0.452) = 0 
    [0.452, 0.452) = 0 
    [0.452, 0.452) = 2 
    [0.452, 0.452) = 1 
    [0.452, 0.453) = 2 
    [0.453, 0.453) = 1 
    [0.453, 0.453) = 3 
    [0.453, 0.453) = 1 
    [0.453, 0.454) = 0 
    [0.454, 0.454) = 0 
    [0.454, 0.454) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.452 s/op
     p(50.0000) =      0.453 s/op
     p(90.0000) =      0.453 s/op
     p(95.0000) =      0.453 s/op
     p(99.0000) =      0.453 s/op
     p(99.9000) =      0.453 s/op
     p(99.9900) =      0.453 s/op
     p(99.9990) =      0.453 s/op
     p(99.9999) =      0.453 s/op
    p(100.0000) =      0.453 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate":
  47.675 ±(99.9%) 0.031 MB/sec [Average]
  (min, avg, max) = (47.654, 47.675, 47.710), stdev = 0.020
  CI (99.9%): [47.644, 47.706] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm":
  47666104.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (47666104.000, 47666104.000, 47666104.000), stdev = 0.001
  CI (99.9%): [47666104.000, 47666104.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fma:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:00:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.833 s/op
# Warmup Iteration   2: 6.788 s/op
# Warmup Iteration   3: 6.182 s/op
# Warmup Iteration   4: 6.182 s/op
# Warmup Iteration   5: 6.182 s/op
# Warmup Iteration   6: 6.181 s/op
# Warmup Iteration   7: 6.183 s/op
# Warmup Iteration   8: 6.182 s/op
# Warmup Iteration   9: 6.181 s/op
# Warmup Iteration  10: 6.181 s/op
Iteration   1: 6.181 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.185 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 323566.611 bytes/s; standard:  0.227 s, 72569 bytes, 912 methods; osr:  0.008 s, 3564 bytes, 4 methods; nmethods_size: 1499552 bytes; nmethods_code_size: 1059520 bytes}
  C2 {speed: 62283.563 bytes/s; standard:  0.277 s, 16553 bytes, 96 methods; osr:  0.068 s, 4899 bytes, 7 methods; nmethods_size: 136176 bytes; nmethods_code_size: 83008 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 112819.941 bytes/s; standard:  0.006 s, 684 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33848 bytes; nmethods_code_size: 21440 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 329140.506 bytes/s; standard:  0.221 s, 71885 bytes, 771 methods; osr:  0.008 s, 3564 bytes, 4 methods; nmethods_size: 1465704 bytes; nmethods_code_size: 1038080 bytes}
  Tier4 {speed: 62283.563 bytes/s; standard:  0.277 s, 16553 bytes, 96 methods; osr:  0.068 s, 4899 bytes, 7 methods; nmethods_size: 136176 bytes; nmethods_code_size: 83008 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.580 s
    Standard compilation   :   0.504 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.076 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.234 s
       Setup time:            0.001 s
       Build HIR:             0.095 s
         Parse:                 0.075 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.089 s
         LIR Gen:               0.020 s
         Linear Scan:           0.068 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.019 s
       Other:                 0.005 s

    C2 Compile Time:        0.346 s
       Parse:                 0.042 s
       Optimize:              0.119 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.077 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.017 s
       Matcher:                    0.022 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.027 s
       Regalloc:              0.115 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.022 s
         Compute Liveness:      0.035 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
         Other:                 0.000 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.017 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1019 methods
    Standard compilation    :     1008 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    97585 bytes
    Standard compilation    :    89122 bytes
    On stack replacement    :     8463 bytes
  Average compilation speed :   168109 bytes/s

  nmethod code size         :  1635728 bytes
  nmethod total size        :  1142528 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar":
  N = 10
  mean =      6.185 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [6.181, 6.181) = 0 
    [6.181, 6.182) = 1 
    [6.182, 6.182) = 0 
    [6.182, 6.182) = 0 
    [6.182, 6.182) = 0 
    [6.182, 6.183) = 0 
    [6.183, 6.183) = 0 
    [6.183, 6.183) = 0 
    [6.183, 6.183) = 0 
    [6.183, 6.184) = 0 
    [6.184, 6.184) = 0 
    [6.184, 6.184) = 0 
    [6.184, 6.184) = 0 
    [6.184, 6.185) = 0 
    [6.185, 6.185) = 0 
    [6.185, 6.185) = 1 
    [6.185, 6.185) = 3 
    [6.185, 6.186) = 5 
    [6.186, 6.186) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.181 s/op
     p(50.0000) =      6.185 s/op
     p(90.0000) =      6.185 s/op
     p(95.0000) =      6.185 s/op
     p(99.0000) =      6.185 s/op
     p(99.9000) =      6.185 s/op
     p(99.9900) =      6.185 s/op
     p(99.9990) =      6.185 s/op
     p(99.9999) =      6.185 s/op
    p(100.0000) =      6.185 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                    Mode  Cnt         Score    Error   Units
lavaMD.LavaMDPatternBenchmark.fma                              ss   10         0.453 ±  0.001    s/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate               ss   10        47.675 ±  0.031  MB/sec
lavaMD.LavaMDPatternBenchmark.fma:·gc.alloc.rate.norm          ss   10  47666104.000 ±  0.001    B/op
lavaMD.LavaMDPatternBenchmark.fma:·gc.count                    ss   10           ≈ 0           counts
lavaMD.LavaMDPatternBenchmark.fmaScalar                        ss   10         6.185 ±  0.002    s/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate         ss   10        ≈ 10⁻⁴           MB/sec
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.alloc.rate.norm    ss   10       507.200 ± 15.299    B/op
lavaMD.LavaMDPatternBenchmark.fmaScalar:·gc.count              ss   10           ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-15_22:26:43/lavaMD/LavaMDPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 331117.165 bytes/s; standard:  0.260 s, 86208 bytes, 1128 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 1793440 bytes; nmethods_code_size: 1268352 bytes}
  C2 {speed: 46315.362 bytes/s; standard:  0.238 s, 11211 bytes, 92 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 96656 bytes; nmethods_code_size: 61824 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108947.353 bytes/s; standard:  0.006 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 336556.818 bytes/s; standard:  0.254 s, 85525 bytes, 984 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 1758816 bytes; nmethods_code_size: 1246432 bytes}
  Tier4 {speed: 46315.362 bytes/s; standard:  0.238 s, 11211 bytes, 92 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 96656 bytes; nmethods_code_size: 61824 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.507 s
    Standard compilation   :   0.498 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.008 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.261 s
       Setup time:            0.001 s
       Build HIR:             0.095 s
         Parse:                 0.072 s
         Optimize blocks:       0.000 s
         GVN:                   0.009 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.105 s
         LIR Gen:               0.023 s
         Linear Scan:           0.081 s
         Other:                 0.001 s
       Code Emission:         0.029 s
       Code Installation:     0.024 s
       Other:                 0.006 s

    C2 Compile Time:        0.245 s
       Parse:                 0.028 s
       Optimize:              0.069 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.044 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.022 s
       Regalloc:              0.090 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.029 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.016 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1223 methods
    Standard compilation    :     1220 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    98134 bytes
    Standard compilation    :    97419 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   193731 bytes/s

  nmethod code size         :  1890096 bytes
  nmethod total size        :  1330176 bytes
