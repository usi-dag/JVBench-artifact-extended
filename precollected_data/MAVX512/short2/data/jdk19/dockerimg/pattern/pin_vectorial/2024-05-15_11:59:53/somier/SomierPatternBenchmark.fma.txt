# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8.926 s/op
# Warmup Iteration   2: 2.833 s/op
# Warmup Iteration   3: 2.776 s/op
# Warmup Iteration   4: 2.761 s/op
# Warmup Iteration   5: 2.771 s/op
# Warmup Iteration   6: 2.783 s/op
# Warmup Iteration   7: 2.792 s/op
# Warmup Iteration   8: 2.798 s/op
# Warmup Iteration   9: 2.710 s/op
# Warmup Iteration  10: 2.794 s/op
Iteration   1: 2.792 s/op
                 ·gc.alloc.rate:      0.002 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.791 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.937 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.930 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.791 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.772 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.789 s/op
                 ·gc.alloc.rate:               0.012 MB/sec
                 ·gc.alloc.rate.norm:          40688.000 B/op
                 ·gc.churn.G1_Eden_Space:      67.997 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 234881024.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     6.000 ms

Iteration   8: 2.787 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.803 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.783 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5231.043 bytes/s; standard: 15.640 s, 79709 bytes, 1077 methods; osr:  0.265 s, 3490 bytes, 10 methods; nmethods_size: 2145264 bytes; nmethods_code_size: 1522304 bytes}
  C2 {speed: 1040.470 bytes/s; standard: 23.855 s, 21622 bytes, 122 methods; osr:  3.785 s, 7136 bytes, 16 methods; nmethods_size: 175304 bytes; nmethods_code_size: 112256 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3566.425 bytes/s; standard:  0.208 s, 743 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36600 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed: 1097.083 bytes/s; standard:  0.104 s, 114 bytes, 2 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1648 bytes; nmethods_code_size: 928 bytes}
  Tier3 {speed: 5280.834 bytes/s; standard: 15.327 s, 78852 bytes, 922 methods; osr:  0.265 s, 3490 bytes, 10 methods; nmethods_size: 2107016 bytes; nmethods_code_size: 1498272 bytes}
  Tier4 {speed: 1040.470 bytes/s; standard: 23.855 s, 21622 bytes, 122 methods; osr:  3.785 s, 7136 bytes, 16 methods; nmethods_size: 175304 bytes; nmethods_code_size: 112256 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  43.544 s
    Standard compilation   :  39.494 s, Average : 0.033 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.050 s, Average : 0.156 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       15.881 s
       Setup time:            0.031 s
       Build HIR:             9.934 s
         Parse:                 8.695 s
         Optimize blocks:       0.019 s
         GVN:                   0.392 s
         Null checks elim:      0.295 s
         Range checks elim:     0.224 s
         Other:                 0.309 s
       Emit LIR:              3.750 s
         LIR Gen:               2.050 s
         Linear Scan:           1.649 s
         Other:                 0.052 s
       Code Emission:         1.262 s
       Code Installation:     0.601 s
       Other:                 0.302 s

    C2 Compile Time:       29.929 s
       Parse:                 8.625 s
       Optimize:             10.520 s
         Escape Analysis:       0.548 s
           Conn Graph:            0.431 s
           Macro Eliminate:       0.052 s
         GVN 1:                 1.150 s
         Incremental Inline:    0.279 s
           IdealLoop:             0.000 s
          (IGVN:                  0.043 s)
          (Inline:                0.198 s)
          (Prune Useless:         0.031 s)
           Other:                 0.279 s
         Vector:                0.631 s
           Box elimination:     0.630 s
             IGVN:              0.097 s
             Prune Useless:     0.021 s
         Renumber Live:         0.044 s
         IdealLoop:             5.381 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.166 s
         GVN 2:                 0.023 s
         Macro Expand:          0.914 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.227 s
         Other:                 1.155 s
       Matcher:                    2.384 s
         Post Selection Cleanup:   0.235 s
       Scheduler:                  2.207 s
       Regalloc:              3.239 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.077 s
         Build IFG (phys):      0.519 s
         Compute Liveness:      1.129 s
         Regalloc Split:        0.610 s
         Postalloc Copy Rem:    0.418 s
         Merge multidefs:       0.057 s
         Fixup Spills:          0.082 s
         Compact:               0.024 s
         Coalesce 1:            0.227 s
         Coalesce 2:            0.085 s
         Coalesce 3:            0.020 s
         Cache LRG:             0.007 s
         Simplify:              0.037 s
         Select:                0.049 s
       Block Ordering:        0.206 s
       Peephole:              0.044 s
       Code Emission:           2.103 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.921 s
         Build OOP maps:        0.189 s
         Fill buffer:           0.696 s
         Code Installation:     0.114 s
         Other:                 0.183 s
       Other:                 0.486 s

  Total compiled methods    :     1225 methods
    Standard compilation    :     1199 methods
    On stack replacement    :       26 methods
  Total compiled bytecodes  :   111957 bytes
    Standard compilation    :   101331 bytes
    On stack replacement    :    10626 bytes
  Average compilation speed :     2571 bytes/s

  nmethod code size         :  2320568 bytes
  nmethod total size        :  1634560 bytes


Result "jvbench.somier.SomierPatternBenchmark.fma":
  N = 10
  mean =      2.818 ±(99.9%) 0.093 s/op

  Histogram, s/op:
    [2.700, 2.725) = 0 
    [2.725, 2.750) = 0 
    [2.750, 2.775) = 1 
    [2.775, 2.800) = 6 
    [2.800, 2.825) = 1 
    [2.825, 2.850) = 0 
    [2.850, 2.875) = 0 
    [2.875, 2.900) = 0 
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 2 
    [2.950, 2.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.772 s/op
     p(50.0000) =      2.791 s/op
     p(90.0000) =      2.936 s/op
     p(95.0000) =      2.937 s/op
     p(99.0000) =      2.937 s/op
     p(99.9000) =      2.937 s/op
     p(99.9900) =      2.937 s/op
     p(99.9990) =      2.937 s/op
     p(99.9999) =      2.937 s/op
    p(100.0000) =      2.937 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate":
  0.002 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.012), stdev = 0.004
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate.norm":
  5703.200 ±(99.9%) 18872.305 B/op [Average]
  (min, avg, max) = (1048.000, 5703.200, 40688.000), stdev = 12482.861
  CI (99.9%): [≈ 0, 24575.505] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.churn.G1_Eden_Space":
  6.800 ±(99.9%) 32.509 MB/sec [Average]
  (min, avg, max) = (≈ 0, 6.800, 67.997), stdev = 21.503
  CI (99.9%): [≈ 0, 39.308] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm":
  23488102.400 ±(99.9%) 112294564.384 B/op [Average]
  (min, avg, max) = (≈ 0, 23488102.400, 234881024.000), stdev = 74275901.499
  CI (99.9%): [≈ 0, 135782666.784] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.time":
  6.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.600, 6.000), stdev = 1.897
  CI (99.9%): [6.000, 6.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:01:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 16.914 s/op
# Warmup Iteration   2: 13.541 s/op
# Warmup Iteration   3: 13.432 s/op
# Warmup Iteration   4: 13.485 s/op
# Warmup Iteration   5: 13.530 s/op
# Warmup Iteration   6: 13.633 s/op
# Warmup Iteration   7: 13.502 s/op
# Warmup Iteration   8: 13.473 s/op
# Warmup Iteration   9: 13.504 s/op
# Warmup Iteration  10: 13.526 s/op
Iteration   1: 13.500 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7976.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.511 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.482 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.474 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.481 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 13.492 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 13.488 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 13.523 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 13.448 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 13.474 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5427.215 bytes/s; standard: 11.488 s, 61841 bytes, 858 methods; osr:  0.208 s, 1635 bytes, 8 methods; nmethods_size: 1310824 bytes; nmethods_code_size: 921504 bytes}
  C2 {speed: 651.506 bytes/s; standard: 15.265 s, 10003 bytes, 66 methods; osr:  4.017 s, 2559 bytes, 9 methods; nmethods_size: 86648 bytes; nmethods_code_size: 56896 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5565.404 bytes/s; standard:  0.123 s, 683 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33880 bytes; nmethods_code_size: 21440 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5425.750 bytes/s; standard: 11.365 s, 61158 bytes, 717 methods; osr:  0.208 s, 1635 bytes, 8 methods; nmethods_size: 1276944 bytes; nmethods_code_size: 900064 bytes}
  Tier4 {speed: 651.506 bytes/s; standard: 15.265 s, 10003 bytes, 66 methods; osr:  4.017 s, 2559 bytes, 9 methods; nmethods_size: 86648 bytes; nmethods_code_size: 56896 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  30.977 s
    Standard compilation   :  26.753 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.224 s, Average : 0.248 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       11.668 s
       Setup time:            0.059 s
       Build HIR:             6.811 s
         Parse:                 5.683 s
         Optimize blocks:       0.009 s
         GVN:                   0.332 s
         Null checks elim:      0.248 s
         Range checks elim:     0.253 s
         Other:                 0.286 s
       Emit LIR:              3.139 s
         LIR Gen:               1.539 s
         Linear Scan:           1.553 s
         Other:                 0.048 s
       Code Emission:         1.063 s
       Code Installation:     0.392 s
       Other:                 0.204 s

    C2 Compile Time:       21.558 s
       Parse:                 4.858 s
       Optimize:              7.733 s
         Escape Analysis:       0.335 s
           Conn Graph:            0.303 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.060 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             4.297 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.156 s
         GVN 2:                 0.031 s
         Macro Expand:          0.716 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.219 s
         Other:                 0.919 s
       Matcher:                    1.960 s
         Post Selection Cleanup:   0.163 s
       Scheduler:                  1.828 s
       Regalloc:              2.784 s
         Ctor Chaitin:          0.010 s
         Build IFG (virt):      0.107 s
         Build IFG (phys):      0.443 s
         Compute Liveness:      0.948 s
         Regalloc Split:        0.592 s
         Postalloc Copy Rem:    0.267 s
         Merge multidefs:       0.048 s
         Fixup Spills:          0.066 s
         Compact:               0.003 s
         Coalesce 1:            0.178 s
         Coalesce 2:            0.083 s
         Coalesce 3:            0.013 s
         Cache LRG:             0.002 s
         Simplify:              0.049 s
         Select:                0.057 s
       Block Ordering:        0.184 s
       Peephole:              0.038 s
       Code Emission:           1.644 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.744 s
         Build OOP maps:        0.169 s
         Fill buffer:           0.582 s
         Code Installation:     0.053 s
         Other:                 0.096 s
       Other:                 0.476 s

  Total compiled methods    :      941 methods
    Standard compilation    :      924 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :    76038 bytes
    Standard compilation    :    71844 bytes
    On stack replacement    :     4194 bytes
  Average compilation speed :     2454 bytes/s

  nmethod code size         :  1397472 bytes
  nmethod total size        :   978400 bytes


Result "jvbench.somier.SomierPatternBenchmark.fmaScalar":
  N = 10
  mean =     13.488 ±(99.9%) 0.032 s/op

  Histogram, s/op:
    [13.440, 13.445) = 0 
    [13.445, 13.450) = 1 
    [13.450, 13.455) = 0 
    [13.455, 13.460) = 0 
    [13.460, 13.465) = 0 
    [13.465, 13.470) = 0 
    [13.470, 13.475) = 2 
    [13.475, 13.480) = 0 
    [13.480, 13.485) = 2 
    [13.485, 13.490) = 1 
    [13.490, 13.495) = 1 
    [13.495, 13.500) = 0 
    [13.500, 13.505) = 1 
    [13.505, 13.510) = 0 
    [13.510, 13.515) = 1 
    [13.515, 13.520) = 0 
    [13.520, 13.525) = 1 
    [13.525, 13.530) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.448 s/op
     p(50.0000) =     13.485 s/op
     p(90.0000) =     13.522 s/op
     p(95.0000) =     13.523 s/op
     p(99.0000) =     13.523 s/op
     p(99.9000) =     13.523 s/op
     p(99.9900) =     13.523 s/op
     p(99.9990) =     13.523 s/op
     p(99.9999) =     13.523 s/op
    p(100.0000) =     13.523 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  1761.600 ±(99.9%) 3301.228 B/op [Average]
  (min, avg, max) = (1064.000, 1761.600, 7976.000), stdev = 2183.558
  CI (99.9%): [≈ 0, 5062.828] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:06:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                Mode  Cnt         Score           Error   Units
SomierPatternBenchmark.fma                                 ss   10         2.818 ±         0.093    s/op
SomierPatternBenchmark.fma:·gc.alloc.rate                  ss   10         0.002 ±         0.005  MB/sec
SomierPatternBenchmark.fma:·gc.alloc.rate.norm             ss   10      5703.200 ±     18872.305    B/op
SomierPatternBenchmark.fma:·gc.churn.G1_Eden_Space         ss   10         6.800 ±        32.509  MB/sec
SomierPatternBenchmark.fma:·gc.churn.G1_Eden_Space.norm    ss   10  23488102.400 ± 112294564.384    B/op
SomierPatternBenchmark.fma:·gc.count                       ss   10         1.000                  counts
SomierPatternBenchmark.fma:·gc.time                        ss   10         6.000                      ms
SomierPatternBenchmark.fmaScalar                           ss   10        13.488 ±         0.032    s/op
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate            ss   10        ≈ 10⁻⁴                  MB/sec
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm       ss   10      1761.600 ±      3301.228    B/op
SomierPatternBenchmark.fmaScalar:·gc.count                 ss   10           ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_11:59:53/somier/SomierPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6897.262 bytes/s; standard: 13.499 s, 93289 bytes, 1188 methods; osr:  0.121 s, 649 bytes, 1 methods; nmethods_size: 1886600 bytes; nmethods_code_size: 1336352 bytes}
  C2 {speed: 632.493 bytes/s; standard: 16.137 s, 12065 bytes, 91 methods; osr:  3.186 s, 157 bytes, 3 methods; nmethods_size: 110160 bytes; nmethods_code_size: 70144 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3661.727 bytes/s; standard:  0.187 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed: 285.408 bytes/s; standard:  0.046 s, 13 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 304 bytes; nmethods_code_size: 192 bytes}
  Tier3 {speed: 6964.838 bytes/s; standard: 13.267 s, 92593 bytes, 1043 methods; osr:  0.121 s, 649 bytes, 1 methods; nmethods_size: 1851672 bytes; nmethods_code_size: 1314240 bytes}
  Tier4 {speed: 632.493 bytes/s; standard: 16.137 s, 12065 bytes, 91 methods; osr:  3.186 s, 157 bytes, 3 methods; nmethods_size: 110160 bytes; nmethods_code_size: 70144 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  32.943 s
    Standard compilation   :  29.636 s, Average : 0.023 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.307 s, Average : 0.827 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.569 s
       Setup time:            0.022 s
       Build HIR:             8.031 s
         Parse:                 6.763 s
         Optimize blocks:       0.035 s
         GVN:                   0.375 s
         Null checks elim:      0.317 s
         Range checks elim:     0.208 s
         Other:                 0.333 s
       Emit LIR:              3.162 s
         LIR Gen:               1.621 s
         Linear Scan:           1.485 s
         Other:                 0.056 s
       Code Emission:         1.485 s
       Code Installation:     0.542 s
       Other:                 0.328 s

    C2 Compile Time:       21.734 s
       Parse:                 5.131 s
       Optimize:              7.470 s
         Escape Analysis:       0.371 s
           Conn Graph:            0.347 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.069 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.013 s
         IdealLoop:             3.872 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.179 s
         GVN 2:                 0.026 s
         Macro Expand:          0.734 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.244 s
         Other:                 0.960 s
       Matcher:                    1.983 s
         Post Selection Cleanup:   0.123 s
       Scheduler:                  1.970 s
       Regalloc:              2.732 s
         Ctor Chaitin:          0.023 s
         Build IFG (virt):      0.082 s
         Build IFG (phys):      0.453 s
         Compute Liveness:      0.980 s
         Regalloc Split:        0.586 s
         Postalloc Copy Rem:    0.234 s
         Merge multidefs:       0.050 s
         Fixup Spills:          0.067 s
         Compact:               0.003 s
         Coalesce 1:            0.213 s
         Coalesce 2:            0.074 s
         Coalesce 3:            0.019 s
         Cache LRG:             0.002 s
         Simplify:              0.027 s
         Select:                0.053 s
       Block Ordering:        0.230 s
       Peephole:              0.029 s
       Code Emission:           1.600 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.698 s
         Build OOP maps:        0.128 s
         Fill buffer:           0.650 s
         Code Installation:     0.043 s
         Other:                 0.082 s
       Other:                 0.431 s

  Total compiled methods    :     1283 methods
    Standard compilation    :     1279 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   106160 bytes
    Standard compilation    :   105354 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     3222 bytes/s

  nmethod code size         :  1996760 bytes
  nmethod total size        :  1406496 bytes
