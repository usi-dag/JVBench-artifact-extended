# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 64.821 s/op
# Warmup Iteration   2: 58.553 s/op
# Warmup Iteration   3: 56.524 s/op
# Warmup Iteration   4: 56.531 s/op
# Warmup Iteration   5: 56.534 s/op
# Warmup Iteration   6: 56.565 s/op
# Warmup Iteration   7: 56.558 s/op
# Warmup Iteration   8: 56.524 s/op
# Warmup Iteration   9: 56.517 s/op
# Warmup Iteration  10: 56.561 s/op
Iteration   1: 56.529 s/op
                 ·gc.alloc.rate:               233.965 MB/sec
                 ·gc.alloc.rate.norm:          13997261672.000 B/op
                 ·gc.churn.G1_Eden_Space:      258.558 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 15468593152.000 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     8.000 ms

Iteration   2: 56.524 s/op
                 ·gc.alloc.rate:                   234.047 MB/sec
                 ·gc.alloc.rate.norm:              13997254016.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.650 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 6192.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         8.000 ms

Iteration   3: 56.547 s/op
                 ·gc.alloc.rate:               233.962 MB/sec
                 ·gc.alloc.rate.norm:          13997227656.000 B/op
                 ·gc.churn.G1_Eden_Space:      129.278 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 7734296576.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     3.000 ms

Iteration   4: 56.542 s/op
                 ·gc.alloc.rate:               233.964 MB/sec
                 ·gc.alloc.rate.norm:          13997253928.000 B/op
                 ·gc.churn.G1_Eden_Space:      258.558 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 15468593152.000 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     8.000 ms

Iteration   5: 56.537 s/op
                 ·gc.alloc.rate:                   233.988 MB/sec
                 ·gc.alloc.rate.norm:              13997253984.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.584 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁵ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1424.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         8.000 ms

Iteration   6: 56.516 s/op
                 ·gc.alloc.rate:                   234.031 MB/sec
                 ·gc.alloc.rate.norm:              13997253984.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.631 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2704.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         8.000 ms

Iteration   7: 56.555 s/op
                 ·gc.alloc.rate:                   233.906 MB/sec
                 ·gc.alloc.rate.norm:              13997254008.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.493 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 5664.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         8.000 ms

Iteration   8: 56.531 s/op
                 ·gc.alloc.rate:               234.006 MB/sec
                 ·gc.alloc.rate.norm:          13997227656.000 B/op
                 ·gc.churn.G1_Eden_Space:      129.302 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 7734296576.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     4.000 ms

Iteration   9: 56.518 s/op
                 ·gc.alloc.rate:                   234.061 MB/sec
                 ·gc.alloc.rate.norm:              13997253984.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.664 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4112.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         7.000 ms

Iteration  10: 56.523 s/op
                 ·gc.alloc.rate:                   234.050 MB/sec
                 ·gc.alloc.rate.norm:              13997266848.000 B/op
                 ·gc.churn.G1_Eden_Space:          258.652 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15468593152.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 3488.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         8.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5748.280 bytes/s; standard: 14.569 s, 84244 bytes, 1229 methods; osr:  0.204 s, 676 bytes, 2 methods; nmethods_size: 2250440 bytes; nmethods_code_size: 1620256 bytes}
  C2 {speed: 705.129 bytes/s; standard: 26.431 s, 20988 bytes, 163 methods; osr:  7.151 s, 2692 bytes, 10 methods; nmethods_size: 197056 bytes; nmethods_code_size: 127328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5432.035 bytes/s; standard:  0.146 s, 794 bytes, 163 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 39080 bytes; nmethods_code_size: 24736 bytes}
  Tier2 {speed: 204.032 bytes/s; standard:  0.191 s, 39 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 912 bytes; nmethods_code_size: 608 bytes}
  Tier3 {speed: 5824.894 bytes/s; standard: 14.232 s, 83411 bytes, 1065 methods; osr:  0.204 s, 676 bytes, 2 methods; nmethods_size: 2210448 bytes; nmethods_code_size: 1594912 bytes}
  Tier4 {speed: 705.129 bytes/s; standard: 26.431 s, 20988 bytes, 163 methods; osr:  7.151 s, 2692 bytes, 10 methods; nmethods_size: 197056 bytes; nmethods_code_size: 127328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  48.356 s
    Standard compilation   :  41.000 s, Average : 0.029 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   7.355 s, Average : 0.613 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       14.746 s
       Setup time:            0.064 s
       Build HIR:             9.042 s
         Parse:                 7.853 s
         Optimize blocks:       0.015 s
         GVN:                   0.381 s
         Null checks elim:      0.297 s
         Range checks elim:     0.204 s
         Other:                 0.293 s
       Emit LIR:              3.397 s
         LIR Gen:               1.733 s
         Linear Scan:           1.613 s
         Other:                 0.051 s
       Code Emission:         1.350 s
       Code Installation:     0.602 s
       Other:                 0.289 s

    C2 Compile Time:       35.966 s
       Parse:                10.323 s
       Optimize:             12.912 s
         Escape Analysis:       0.928 s
           Conn Graph:            0.726 s
           Macro Eliminate:       0.116 s
         GVN 1:                 1.214 s
         Incremental Inline:    0.407 s
           IdealLoop:             0.000 s
          (IGVN:                  0.074 s)
          (Inline:                0.288 s)
          (Prune Useless:         0.030 s)
           Other:                 0.407 s
         Vector:                0.758 s
           Box elimination:     0.757 s
             IGVN:              0.062 s
             Prune Useless:     0.040 s
         Renumber Live:         0.017 s
         IdealLoop:             6.561 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.215 s
         GVN 2:                 0.032 s
         Macro Expand:          0.966 s
         Barrier Expand:        0.003 s
         Graph Reshape:         0.275 s
         Other:                 1.535 s
       Matcher:                    2.986 s
         Post Selection Cleanup:   0.298 s
       Scheduler:                  2.783 s
       Regalloc:              3.493 s
         Ctor Chaitin:          0.023 s
         Build IFG (virt):      0.086 s
         Build IFG (phys):      0.490 s
         Compute Liveness:      1.342 s
         Regalloc Split:        0.776 s
         Postalloc Copy Rem:    0.314 s
         Merge multidefs:       0.075 s
         Fixup Spills:          0.104 s
         Compact:               0.003 s
         Coalesce 1:            0.249 s
         Coalesce 2:            0.087 s
         Coalesce 3:            0.042 s
         Cache LRG:             0.002 s
         Simplify:              0.042 s
         Select:                0.085 s
       Block Ordering:        0.267 s
       Peephole:              0.039 s
       Code Emission:           2.529 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.089 s
         Build OOP maps:        0.172 s
         Fill buffer:           0.880 s
         Code Installation:     0.124 s
         Other:                 0.264 s
       Other:                 0.511 s

  Total compiled methods    :     1404 methods
    Standard compilation    :     1392 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :   108600 bytes
    Standard compilation    :   105232 bytes
    On stack replacement    :     3368 bytes
  Average compilation speed :     2245 bytes/s

  nmethod code size         :  2447496 bytes
  nmethod total size        :  1747584 bytes


Result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange":
  N = 10
  mean =     56.532 ±(99.9%) 0.019 s/op

  Histogram, s/op:
    [56.510, 56.515) = 0 
    [56.515, 56.520) = 2 
    [56.520, 56.525) = 2 
    [56.525, 56.530) = 1 
    [56.530, 56.535) = 1 
    [56.535, 56.540) = 1 
    [56.540, 56.545) = 1 
    [56.545, 56.550) = 1 
    [56.550, 56.555) = 1 
    [56.555, 56.560) = 0 

  Percentiles, s/op:
      p(0.0000) =     56.516 s/op
     p(50.0000) =     56.530 s/op
     p(90.0000) =     56.554 s/op
     p(95.0000) =     56.555 s/op
     p(99.0000) =     56.555 s/op
     p(99.9000) =     56.555 s/op
     p(99.9900) =     56.555 s/op
     p(99.9990) =     56.555 s/op
     p(99.9999) =     56.555 s/op
    p(100.0000) =     56.555 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate":
  233.998 ±(99.9%) 0.075 MB/sec [Average]
  (min, avg, max) = (233.906, 233.998, 234.061), stdev = 0.050
  CI (99.9%): [233.923, 234.073] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  13997250773.600 ±(99.9%) 19569.019 B/op [Average]
  (min, avg, max) = (13997227656.000, 13997250773.600, 13997266848.000), stdev = 12943.695
  CI (99.9%): [13997231204.581, 13997270342.619] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  232.737 ±(99.9%) 82.428 MB/sec [Average]
  (min, avg, max) = (129.278, 232.737, 258.664), stdev = 54.521
  CI (99.9%): [150.309, 315.165] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  13921733836.800 ±(99.9%) 4930266112.470 B/op [Average]
  (min, avg, max) = (7734296576.000, 13921733836.800, 15468593152.000), stdev = 3261065770.587
  CI (99.9%): [8991467724.330, 18851999949.270] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  2358.400 ±(99.9%) 3676.275 B/op [Average]
  (min, avg, max) = (≈ 0, 2358.400, 6192.000), stdev = 2431.628
  CI (99.9%): [≈ 0, 6034.675] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.count":
  18.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.422
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dPatternBenchmark.indexInRange:·gc.time":
  70.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 7.000, 8.000), stdev = 1.886
  CI (99.9%): [70.000, 70.000] (assumes normal distribution)


# Run complete. Total time: 00:19:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                               Mode  Cnt            Score            Error   Units
Jacobi2dPatternBenchmark.indexInRange                                     ss   10           56.532 ±          0.019    s/op
Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10          233.998 ±          0.075  MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  13997250773.600 ±      19569.019    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10          232.737 ±         82.428  MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  13921733836.800 ± 4930266112.470    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           ≈ 10⁻⁴                   MB/sec
Jacobi2dPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10         2358.400 ±       3676.275    B/op
Jacobi2dPatternBenchmark.indexInRange:·gc.count                           ss   10           18.000                   counts
Jacobi2dPatternBenchmark.indexInRange:·gc.time                            ss   10           70.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_11:59:53/jacobi2d/Jacobi2dPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6810.777 bytes/s; standard: 12.434 s, 84915 bytes, 1100 methods; osr:  0.129 s, 649 bytes, 1 methods; nmethods_size: 1705456 bytes; nmethods_code_size: 1206272 bytes}
  C2 {speed: 607.286 bytes/s; standard: 18.239 s, 11307 bytes, 90 methods; osr:  0.488 s, 66 bytes, 2 methods; nmethods_size: 103848 bytes; nmethods_code_size: 65792 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 5434.416 bytes/s; standard:  0.120 s, 653 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33232 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6824.069 bytes/s; standard: 12.314 s, 84262 bytes, 962 methods; osr:  0.129 s, 649 bytes, 1 methods; nmethods_size: 1672224 bytes; nmethods_code_size: 1185216 bytes}
  Tier4 {speed: 607.286 bytes/s; standard: 18.239 s, 11307 bytes, 90 methods; osr:  0.488 s, 66 bytes, 2 methods; nmethods_size: 103848 bytes; nmethods_code_size: 65792 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  31.291 s
    Standard compilation   :  30.674 s, Average : 0.026 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.617 s, Average : 0.206 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       12.532 s
       Setup time:            0.039 s
       Build HIR:             7.272 s
         Parse:                 6.012 s
         Optimize blocks:       0.006 s
         GVN:                   0.359 s
         Null checks elim:      0.283 s
         Range checks elim:     0.282 s
         Other:                 0.330 s
       Emit LIR:              3.292 s
         LIR Gen:               1.461 s
         Linear Scan:           1.776 s
         Other:                 0.055 s
       Code Emission:         1.207 s
       Code Installation:     0.496 s
       Other:                 0.226 s

    C2 Compile Time:       21.087 s
       Parse:                 5.215 s
       Optimize:              7.215 s
         Escape Analysis:       0.416 s
           Conn Graph:            0.382 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.861 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.013 s
         IdealLoop:             3.882 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.133 s
         GVN 2:                 0.030 s
         Macro Expand:          0.766 s
         Barrier Expand:        0.005 s
         Graph Reshape:         0.210 s
         Other:                 0.897 s
       Matcher:                    1.979 s
         Post Selection Cleanup:   0.139 s
       Scheduler:                  1.992 s
       Regalloc:              2.678 s
         Ctor Chaitin:          0.043 s
         Build IFG (virt):      0.084 s
         Build IFG (phys):      0.399 s
         Compute Liveness:      0.888 s
         Regalloc Split:        0.629 s
         Postalloc Copy Rem:    0.204 s
         Merge multidefs:       0.043 s
         Fixup Spills:          0.049 s
         Compact:               0.013 s
         Coalesce 1:            0.206 s
         Coalesce 2:            0.150 s
         Coalesce 3:            0.019 s
         Cache LRG:             0.002 s
         Simplify:              0.049 s
         Select:                0.061 s
       Block Ordering:        0.177 s
       Peephole:              0.062 s
       Code Emission:           1.536 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.715 s
         Build OOP maps:        0.119 s
         Fill buffer:           0.524 s
         Code Installation:     0.033 s
         Other:                 0.130 s
       Other:                 0.159 s

  Total compiled methods    :     1193 methods
    Standard compilation    :     1190 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    96937 bytes
    Standard compilation    :    96222 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     3097 bytes/s

  nmethod code size         :  1809304 bytes
  nmethod total size        :  1272064 bytes
