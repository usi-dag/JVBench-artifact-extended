# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 74.821 s/op
# Warmup Iteration   2: 54.115 s/op
# Warmup Iteration   3: 49.373 s/op
# Warmup Iteration   4: 29.048 s/op
# Warmup Iteration   5: 48.863 s/op
# Warmup Iteration   6: 29.299 s/op
# Warmup Iteration   7: 28.817 s/op
# Warmup Iteration   8: 43.524 s/op
# Warmup Iteration   9: 32.616 s/op
# Warmup Iteration  10: 23.284 s/op
Iteration   1: 13.264 s/op
                 ·gc.alloc.rate:                   114.408 MB/sec
                 ·gc.alloc.rate.norm:              1661480384.000 B/op
                 ·gc.churn.G1_Eden_Space:          95.887 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1392508928.000 B/op
                 ·gc.churn.G1_Survivor_Space:      1.916 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 27819984.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         5389.000 ms

Iteration   2: 8.490 s/op
                 ·gc.alloc.rate:                   175.729 MB/sec
                 ·gc.alloc.rate.norm:              1660790888.000 B/op
                 ·gc.churn.G1_Eden_Space:          150.892 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1426063360.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.508 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4798952.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         131.000 ms

Iteration   3: 8.232 s/op
                 ·gc.alloc.rate:                   181.312 MB/sec
                 ·gc.alloc.rate.norm:              1661261872.000 B/op
                 ·gc.churn.G1_Eden_Space:          161.136 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1476395008.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.145 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1325408.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         116.000 ms

Iteration   4: 8.296 s/op
                 ·gc.alloc.rate:                   179.963 MB/sec
                 ·gc.alloc.rate.norm:              1661143512.000 B/op
                 ·gc.churn.G1_Eden_Space:          319.895 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2952790016.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.043 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 400296.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         213.000 ms

Iteration   5: 7.661 s/op
                 ·gc.alloc.rate:                   193.804 MB/sec
                 ·gc.alloc.rate.norm:              1660311016.000 B/op
                 ·gc.churn.G1_Eden_Space:          172.336 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1476395008.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 336.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         102.000 ms

Iteration   6: 7.551 s/op
                 ·gc.alloc.rate:               196.219 MB/sec
                 ·gc.alloc.rate.norm:          1660760056.000 B/op
                 ·gc.churn.G1_Eden_Space:      174.436 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1476395008.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     101.000 ms

Iteration   7: 7.520 s/op
                 ·gc.alloc.rate:               197.358 MB/sec
                 ·gc.alloc.rate.norm:          1660787896.000 B/op
                 ·gc.churn.G1_Eden_Space:      175.446 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1476395008.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     101.000 ms

Iteration   8: 7.424 s/op
                 ·gc.alloc.rate:               199.644 MB/sec
                 ·gc.alloc.rate.norm:          1660954936.000 B/op
                 ·gc.churn.G1_Eden_Space:      177.460 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1476395008.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     100.000 ms

Iteration   9: 7.528 s/op
                 ·gc.alloc.rate:                   196.952 MB/sec
                 ·gc.alloc.rate.norm:              1661264784.000 B/op
                 ·gc.churn.G1_Eden_Space:          175.035 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     1476395008.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 3488.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         104.000 ms

Iteration  10: 7.361 s/op
                 ·gc.alloc.rate:               201.143 MB/sec
                 ·gc.alloc.rate.norm:          1660840696.000 B/op
                 ·gc.churn.G1_Eden_Space:      178.805 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1476395008.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     103.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2159.590 bytes/s; standard: 49.716 s, 104951 bytes, 1370 methods; osr:  0.677 s, 3876 bytes, 8 methods; nmethods_size: 2777736 bytes; nmethods_code_size: 1999552 bytes}
  C2 {speed: 217.022 bytes/s; standard: 292.762 s, 60676 bytes, 274 methods; osr: 45.001 s, 12626 bytes, 22 methods; nmethods_size: 559296 bytes; nmethods_code_size: 347360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2881.211 bytes/s; standard:  0.295 s, 849 bytes, 173 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 41432 bytes; nmethods_code_size: 26208 bytes}
  Tier2 {speed: 1487.129 bytes/s; standard:  0.042 s, 62 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 736 bytes; nmethods_code_size: 384 bytes}
  Tier3 {speed: 2155.902 bytes/s; standard: 49.379 s, 104040 bytes, 1196 methods; osr:  0.677 s, 3876 bytes, 8 methods; nmethods_size: 2735568 bytes; nmethods_code_size: 1972960 bytes}
  Tier4 {speed: 217.022 bytes/s; standard: 292.762 s, 60676 bytes, 274 methods; osr: 45.001 s, 12626 bytes, 22 methods; nmethods_size: 559296 bytes; nmethods_code_size: 347360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   : 388.156 s
    Standard compilation   : 342.478 s, Average : 0.208 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :  45.678 s, Average : 1.523 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       50.259 s
       Setup time:            0.209 s
       Build HIR:            28.582 s
         Parse:                25.502 s
         Optimize blocks:       0.012 s
         GVN:                   1.260 s
         Null checks elim:      0.625 s
         Range checks elim:     0.358 s
         Other:                 0.825 s
       Emit LIR:             12.244 s
         LIR Gen:               3.730 s
         Linear Scan:           8.408 s
         Other:                 0.106 s
       Code Emission:         5.470 s
       Code Installation:     3.160 s
       Other:                 0.594 s

    C2 Compile Time:      341.092 s
       Parse:                47.104 s
       Optimize:             97.081 s
         Escape Analysis:       3.315 s
           Conn Graph:            1.830 s
           Macro Eliminate:       0.759 s
         GVN 1:                12.890 s
         Incremental Inline:    2.733 s
           IdealLoop:             0.000 s
          (IGVN:                  0.190 s)
          (Inline:                2.460 s)
          (Prune Useless:         0.066 s)
           Other:                 2.733 s
         Vector:                0.860 s
           Box elimination:     0.855 s
             IGVN:              0.268 s
             Prune Useless:     0.193 s
         Renumber Live:         0.417 s
         IdealLoop:            63.472 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       1.002 s
         GVN 2:                 0.375 s
         Macro Expand:          3.319 s
         Barrier Expand:        0.003 s
         Graph Reshape:         0.880 s
         Other:                 7.815 s
       Matcher:                   14.989 s
         Post Selection Cleanup:   0.776 s
       Scheduler:                 28.699 s
       Regalloc:             60.075 s
         Ctor Chaitin:          0.043 s
         Build IFG (virt):      0.723 s
         Build IFG (phys):      9.109 s
         Compute Liveness:     18.250 s
         Regalloc Split:        4.565 s
         Postalloc Copy Rem:   20.739 s
         Merge multidefs:       1.274 s
         Fixup Spills:          0.178 s
         Compact:               0.147 s
         Coalesce 1:            1.457 s
         Coalesce 2:            0.468 s
         Coalesce 3:            0.416 s
         Cache LRG:             0.118 s
         Simplify:              1.571 s
         Select:                2.469 s
       Block Ordering:        0.769 s
       Peephole:              0.308 s
       Code Emission:          89.747 s
         Insn Scheduling:       0.000 s
         Shorten branches:      2.236 s
         Build OOP maps:        5.769 s
         Fill buffer:           2.370 s
         Code Installation:     0.272 s
         Other:                79.100 s
       Other:                 2.049 s

  Total compiled methods    :     1674 methods
    Standard compilation    :     1644 methods
    On stack replacement    :       30 methods
  Total compiled bytecodes  :   182129 bytes
    Standard compilation    :   165627 bytes
    On stack replacement    :    16502 bytes
  Average compilation speed :      469 bytes/s

  nmethod code size         :  3337032 bytes
  nmethod total size        :  2346912 bytes


Result "jvbench.canneal.CannealPatternBenchmark.indexInRange":
  N = 10
  mean =      8.333 ±(99.9%) 2.690 s/op

  Histogram, s/op:
    [ 7.000,  7.500) = 2 
    [ 7.500,  8.000) = 4 
    [ 8.000,  8.500) = 3 
    [ 8.500,  9.000) = 0 
    [ 9.000,  9.500) = 0 
    [ 9.500, 10.000) = 0 
    [10.000, 10.500) = 0 
    [10.500, 11.000) = 0 
    [11.000, 11.500) = 0 
    [11.500, 12.000) = 0 
    [12.000, 12.500) = 0 
    [12.500, 13.000) = 0 
    [13.000, 13.500) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.361 s/op
     p(50.0000) =      7.606 s/op
     p(90.0000) =     12.787 s/op
     p(95.0000) =     13.264 s/op
     p(99.0000) =     13.264 s/op
     p(99.9000) =     13.264 s/op
     p(99.9900) =     13.264 s/op
     p(99.9990) =     13.264 s/op
     p(99.9999) =     13.264 s/op
    p(100.0000) =     13.264 s/op

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate":
  183.653 ±(99.9%) 39.244 MB/sec [Average]
  (min, avg, max) = (114.408, 183.653, 201.143), stdev = 25.957
  CI (99.9%): [144.410, 222.897] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  1660959604.000 ±(99.9%) 509498.196 B/op [Average]
  (min, avg, max) = (1660311016.000, 1660959604.000, 1661480384.000), stdev = 337001.511
  CI (99.9%): [1660450105.804, 1661469102.196] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  178.133 ±(99.9%) 84.262 MB/sec [Average]
  (min, avg, max) = (95.887, 178.133, 319.895), stdev = 55.734
  CI (99.9%): [93.870, 262.395] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  1610612736.000 ±(99.9%) 714328069.694 B/op [Average]
  (min, avg, max) = (1392508928.000, 1610612736.000, 2952790016.000), stdev = 472483789.700
  CI (99.9%): [896284666.306, 2324940805.694] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  0.261 ±(99.9%) 0.911 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.261, 1.916), stdev = 0.603
  CI (99.9%): [≈ 0, 1.172] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  3434846.400 ±(99.9%) 13150326.742 B/op [Average]
  (min, avg, max) = (≈ 0, 3434846.400, 27819984.000), stdev = 8698126.923
  CI (99.9%): [≈ 0, 16585173.142] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.count":
  11.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.100, 2.000), stdev = 0.316
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.time":
  6460.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (100.000, 646.000, 5389.000), stdev = 1666.879
  CI (99.9%): [6460.000, 6460.000] (assumes normal distribution)


# Run complete. Total time: 00:14:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt           Score           Error   Units
CannealPatternBenchmark.indexInRange                                     ss   10           8.333 ±         2.690    s/op
CannealPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10         183.653 ±        39.244  MB/sec
CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  1660959604.000 ±    509498.196    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10         178.133 ±        84.262  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  1610612736.000 ± 714328069.694    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           0.261 ±         0.911  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10     3434846.400 ±  13150326.742    B/op
CannealPatternBenchmark.indexInRange:·gc.count                           ss   10          11.000                  counts
CannealPatternBenchmark.indexInRange:·gc.time                            ss   10        6460.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_00:58:10/canneal/CannealPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3670.145 bytes/s; standard: 23.099 s, 84778 bytes, 1076 methods; osr:  0.177 s, 649 bytes, 1 methods; nmethods_size: 1698704 bytes; nmethods_code_size: 1202464 bytes}
  C2 {speed: 413.247 bytes/s; standard: 23.853 s, 11358 bytes, 91 methods; osr:  4.012 s, 157 bytes, 3 methods; nmethods_size: 105184 bytes; nmethods_code_size: 66912 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1926.458 bytes/s; standard:  0.339 s, 653 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33232 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3695.913 bytes/s; standard: 22.760 s, 84125 bytes, 938 methods; osr:  0.177 s, 649 bytes, 1 methods; nmethods_size: 1665472 bytes; nmethods_code_size: 1181408 bytes}
  Tier4 {speed: 413.247 bytes/s; standard: 23.853 s, 11358 bytes, 91 methods; osr:  4.012 s, 157 bytes, 3 methods; nmethods_size: 105184 bytes; nmethods_code_size: 66912 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  51.141 s
    Standard compilation   :  46.952 s, Average : 0.040 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.188 s, Average : 1.047 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       23.198 s
       Setup time:            0.128 s
       Build HIR:            11.980 s
         Parse:                 9.555 s
         Optimize blocks:       0.010 s
         GVN:                   0.842 s
         Null checks elim:      0.556 s
         Range checks elim:     0.336 s
         Other:                 0.680 s
       Emit LIR:              7.540 s
         LIR Gen:               2.834 s
         Linear Scan:           4.580 s
         Other:                 0.126 s
       Code Emission:         2.176 s
       Code Installation:     0.888 s
       Other:                 0.485 s

    C2 Compile Time:       31.014 s
       Parse:                 6.859 s
       Optimize:             10.430 s
         Escape Analysis:       0.606 s
           Conn Graph:            0.569 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.298 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.019 s
         IdealLoop:             5.668 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.225 s
         GVN 2:                 0.060 s
         Macro Expand:          0.906 s
         Barrier Expand:        0.003 s
         Graph Reshape:         0.299 s
         Other:                 1.343 s
       Matcher:                    3.264 s
         Post Selection Cleanup:   0.201 s
       Scheduler:                  2.400 s
       Regalloc:              5.157 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.129 s
         Build IFG (phys):      0.725 s
         Compute Liveness:      1.506 s
         Regalloc Split:        0.897 s
         Postalloc Copy Rem:    1.148 s
         Merge multidefs:       0.111 s
         Fixup Spills:          0.069 s
         Compact:               0.012 s
         Coalesce 1:            0.298 s
         Coalesce 2:            0.117 s
         Coalesce 3:            0.037 s
         Cache LRG:             0.014 s
         Simplify:              0.081 s
         Select:                0.113 s
       Block Ordering:        0.288 s
       Peephole:              0.044 s
       Code Emission:           2.410 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.871 s
         Build OOP maps:        0.464 s
         Fill buffer:           0.832 s
         Code Installation:     0.092 s
         Other:                 0.151 s

  Total compiled methods    :     1171 methods
    Standard compilation    :     1167 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    96942 bytes
    Standard compilation    :    96136 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     1895 bytes/s

  nmethod code size         :  1803888 bytes
  nmethod total size        :  1269376 bytes
