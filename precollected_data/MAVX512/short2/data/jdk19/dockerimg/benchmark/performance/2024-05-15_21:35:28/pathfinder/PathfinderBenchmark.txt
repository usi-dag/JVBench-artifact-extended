# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/pathfinder/input/pathfinder_5000_5000.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.pathfinder.PathfinderBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8.661 s/op
# Warmup Iteration   2: 8.650 s/op
# Warmup Iteration   3: 8.647 s/op
# Warmup Iteration   4: 8.652 s/op
# Warmup Iteration   5: 8.644 s/op
# Warmup Iteration   6: 8.649 s/op
# Warmup Iteration   7: 8.600 s/op
# Warmup Iteration   8: 8.660 s/op
# Warmup Iteration   9: 8.644 s/op
# Warmup Iteration  10: 8.639 s/op
Iteration   1: 8.644 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 2022120.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.644 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 2022120.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4.285 s/op
                 ·gc.alloc.rate:      0.399 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4.050 s/op
                 ·gc.alloc.rate:      0.420 MB/sec
                 ·gc.alloc.rate.norm: 2002136.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 4.278 s/op
                 ·gc.alloc.rate:      0.400 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 4.006 s/op
                 ·gc.alloc.rate:      0.424 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4.019 s/op
                 ·gc.alloc.rate:      0.422 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 4.019 s/op
                 ·gc.alloc.rate:      0.422 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.956 s/op
                 ·gc.alloc.rate:      0.428 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 4.017 s/op
                 ·gc.alloc.rate:      0.423 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 298098.441 bytes/s; standard:  0.235 s, 69965 bytes, 934 methods; osr:  0.004 s, 1210 bytes, 4 methods; nmethods_size: 1453336 bytes; nmethods_code_size: 1033472 bytes}
  C2 {speed: 60163.363 bytes/s; standard:  0.335 s, 20361 bytes, 107 methods; osr:  0.047 s, 2588 bytes, 6 methods; nmethods_size: 150672 bytes; nmethods_code_size: 95360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 99149.415 bytes/s; standard:  0.007 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 304106.932 bytes/s; standard:  0.228 s, 69271 bytes, 791 methods; osr:  0.004 s, 1210 bytes, 4 methods; nmethods_size: 1419024 bytes; nmethods_code_size: 1011744 bytes}
  Tier4 {speed: 60163.363 bytes/s; standard:  0.335 s, 20361 bytes, 107 methods; osr:  0.047 s, 2588 bytes, 6 methods; nmethods_size: 150672 bytes; nmethods_code_size: 95360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.620 s
    Standard compilation   :   0.569 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.051 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.236 s
       Setup time:            0.001 s
       Build HIR:             0.096 s
         Parse:                 0.076 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.088 s
         LIR Gen:               0.020 s
         Linear Scan:           0.067 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.021 s
       Other:                 0.006 s

    C2 Compile Time:        0.383 s
       Parse:                 0.047 s
       Optimize:              0.133 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.097 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.014 s
       Matcher:                    0.023 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.127 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.024 s
         Compute Liveness:      0.037 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.022 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.007 s
         Other:                 0.001 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.007 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.002 s
       Other:                 0.000 s

  Total compiled methods    :     1051 methods
    Standard compilation    :     1041 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    94124 bytes
    Standard compilation    :    90326 bytes
    On stack replacement    :     3798 bytes
  Average compilation speed :   151761 bytes/s

  nmethod code size         :  1604008 bytes
  nmethod total size        :  1128832 bytes


Result "jvbench.pathfinder.PathfinderBenchmark.autoVec":
  N = 10
  mean =      4.992 ±(99.9%) 2.915 s/op

  Histogram, s/op:
    [3.000, 3.500) = 0 
    [3.500, 4.000) = 1 
    [4.000, 4.500) = 7 
    [4.500, 5.000) = 0 
    [5.000, 5.500) = 0 
    [5.500, 6.000) = 0 
    [6.000, 6.500) = 0 
    [6.500, 7.000) = 0 
    [7.000, 7.500) = 0 
    [7.500, 8.000) = 0 
    [8.000, 8.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.956 s/op
     p(50.0000) =      4.035 s/op
     p(90.0000) =      8.644 s/op
     p(95.0000) =      8.644 s/op
     p(99.0000) =      8.644 s/op
     p(99.9000) =      8.644 s/op
     p(99.9900) =      8.644 s/op
     p(99.9990) =      8.644 s/op
     p(99.9999) =      8.644 s/op
    p(100.0000) =      8.644 s/op

Secondary result "jvbench.pathfinder.PathfinderBenchmark.autoVec:·gc.alloc.rate":
  0.376 ±(99.9%) 0.132 MB/sec [Average]
  (min, avg, max) = (0.211, 0.376, 0.428), stdev = 0.088
  CI (99.9%): [0.244, 0.508] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.autoVec:·gc.alloc.rate.norm":
  2006110.400 ±(99.9%) 12756.759 B/op [Average]
  (min, avg, max) = (2002104.000, 2006110.400, 2022120.000), stdev = 8437.806
  CI (99.9%): [1993353.641, 2018867.159] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/pathfinder/input/pathfinder_5000_5000.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.pathfinder.PathfinderBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:07:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.611 s/op
# Warmup Iteration   2: 2.189 s/op
# Warmup Iteration   3: 2.229 s/op
# Warmup Iteration   4: 2.511 s/op
# Warmup Iteration   5: 2.161 s/op
# Warmup Iteration   6: 2.143 s/op
# Warmup Iteration   7: 2.150 s/op
# Warmup Iteration   8: 1.606 s/op
# Warmup Iteration   9: 2.167 s/op
# Warmup Iteration  10: 2.134 s/op
Iteration   1: 1.635 s/op
                 ·gc.alloc.rate:      11.605 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.085 s/op
                 ·gc.alloc.rate:      9.587 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.307 s/op
                 ·gc.alloc.rate:               8.838 MB/sec
                 ·gc.alloc.rate.norm:          26023880.000 B/op
                 ·gc.churn.G1_Eden_Space:      427.331 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 1258291200.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 2.204 s/op
                 ·gc.alloc.rate:      9.165 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.723 s/op
                 ·gc.alloc.rate:      11.144 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.206 s/op
                 ·gc.alloc.rate:      9.158 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.702 s/op
                 ·gc.alloc.rate:      11.253 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.147 s/op
                 ·gc.alloc.rate:      9.361 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.252 s/op
                 ·gc.alloc.rate:      9.004 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.762 s/op
                 ·gc.alloc.rate:      10.957 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 259998.788 bytes/s; standard:  0.327 s, 85997 bytes, 1194 methods; osr:  0.012 s, 2198 bytes, 5 methods; nmethods_size: 2125192 bytes; nmethods_code_size: 1533952 bytes}
  C2 {speed: 55425.045 bytes/s; standard:  0.463 s, 25476 bytes, 147 methods; osr:  0.126 s, 7141 bytes, 12 methods; nmethods_size: 216096 bytes; nmethods_code_size: 134752 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 102226.705 bytes/s; standard:  0.007 s, 729 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35888 bytes; nmethods_code_size: 22688 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 263386.824 bytes/s; standard:  0.320 s, 85268 bytes, 1044 methods; osr:  0.012 s, 2198 bytes, 5 methods; nmethods_size: 2089304 bytes; nmethods_code_size: 1511264 bytes}
  Tier4 {speed: 55425.045 bytes/s; standard:  0.463 s, 25476 bytes, 147 methods; osr:  0.126 s, 7141 bytes, 12 methods; nmethods_size: 216096 bytes; nmethods_code_size: 134752 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.929 s
    Standard compilation   :   0.789 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.138 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.337 s
       Setup time:            0.001 s
       Build HIR:             0.141 s
         Parse:                 0.114 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.122 s
         LIR Gen:               0.028 s
         Linear Scan:           0.093 s
         Other:                 0.001 s
       Code Emission:         0.036 s
       Code Installation:     0.029 s
       Other:                 0.008 s

    C2 Compile Time:        0.590 s
       Parse:                 0.093 s
       Optimize:              0.209 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.013 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.005 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.143 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.009 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.022 s
       Matcher:                    0.034 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.041 s
       Regalloc:              0.179 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.033 s
         Compute Liveness:      0.053 s
         Regalloc Split:        0.015 s
         Postalloc Copy Rem:    0.032 s
         Merge multidefs:       0.014 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.005 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.008 s
         Select:                0.010 s
         Other:                 0.001 s
       Block Ordering:        0.003 s
       Peephole:              0.000 s
       Code Emission:           0.027 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.009 s
         Fill buffer:           0.008 s
         Code Installation:     0.003 s
         Other:                 0.002 s
       Other:                 0.000 s

  Total compiled methods    :     1358 methods
    Standard compilation    :     1341 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   120812 bytes
    Standard compilation    :   111473 bytes
    On stack replacement    :     9339 bytes
  Average compilation speed :   130097 bytes/s

  nmethod code size         :  2341288 bytes
  nmethod total size        :  1668704 bytes


Result "jvbench.pathfinder.PathfinderBenchmark.explicitVec":
  N = 10
  mean =      2.002 ±(99.9%) 0.399 s/op

  Histogram, s/op:
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 2 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 2 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.635 s/op
     p(50.0000) =      2.116 s/op
     p(90.0000) =      2.301 s/op
     p(95.0000) =      2.307 s/op
     p(99.0000) =      2.307 s/op
     p(99.9000) =      2.307 s/op
     p(99.9900) =      2.307 s/op
     p(99.9990) =      2.307 s/op
     p(99.9999) =      2.307 s/op
    p(100.0000) =      2.307 s/op

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.alloc.rate":
  10.007 ±(99.9%) 1.648 MB/sec [Average]
  (min, avg, max) = (8.838, 10.007, 11.605), stdev = 1.090
  CI (99.9%): [8.359, 11.656] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.alloc.rate.norm":
  25999961.600 ±(99.9%) 12705.753 B/op [Average]
  (min, avg, max) = (25997304.000, 25999961.600, 26023880.000), stdev = 8404.069
  CI (99.9%): [25987255.847, 26012667.353] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.churn.G1_Eden_Space":
  42.733 ±(99.9%) 204.303 MB/sec [Average]
  (min, avg, max) = (≈ 0, 42.733, 427.331), stdev = 135.134
  CI (99.9%): [≈ 0, 247.036] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm":
  125829120.000 ±(99.9%) 601578023.485 B/op [Average]
  (min, avg, max) = (≈ 0, 125829120.000, 1258291200.000), stdev = 397906615.175
  CI (99.9%): [≈ 0, 727407143.485] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.explicitVec:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.200, 2.000), stdev = 0.632
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/pathfinder/input/pathfinder_5000_5000.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.pathfinder.PathfinderBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:03:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.368 s/op
# Warmup Iteration   2: 1.833 s/op
# Warmup Iteration   3: 2.299 s/op
# Warmup Iteration   4: 2.369 s/op
# Warmup Iteration   5: 1.594 s/op
# Warmup Iteration   6: 1.837 s/op
# Warmup Iteration   7: 2.159 s/op
# Warmup Iteration   8: 1.927 s/op
# Warmup Iteration   9: 1.927 s/op
# Warmup Iteration  10: 1.613 s/op
Iteration   1: 2.183 s/op
                 ·gc.alloc.rate:      9.237 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.918 s/op
                 ·gc.alloc.rate:      10.249 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.228 s/op
                 ·gc.alloc.rate:      9.083 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.906 s/op
                 ·gc.alloc.rate:      10.299 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.923 s/op
                 ·gc.alloc.rate:      10.225 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.901 s/op
                 ·gc.alloc.rate:      10.321 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.604 s/op
                 ·gc.alloc.rate:      11.780 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.641 s/op
                 ·gc.alloc.rate:      11.575 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.137 s/op
                 ·gc.alloc.rate:      9.397 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.602 s/op
                 ·gc.alloc.rate:      11.787 MB/sec
                 ·gc.alloc.rate.norm: 25997304.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 261854.533 bytes/s; standard:  0.319 s, 84596 bytes, 1187 methods; osr:  0.012 s, 2198 bytes, 5 methods; nmethods_size: 2105328 bytes; nmethods_code_size: 1519392 bytes}
  C2 {speed: 53757.621 bytes/s; standard:  0.466 s, 25025 bytes, 140 methods; osr:  0.133 s, 7141 bytes, 12 methods; nmethods_size: 210344 bytes; nmethods_code_size: 130784 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108137.198 bytes/s; standard:  0.007 s, 729 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35888 bytes; nmethods_code_size: 22688 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 265045.848 bytes/s; standard:  0.312 s, 83867 bytes, 1037 methods; osr:  0.012 s, 2198 bytes, 5 methods; nmethods_size: 2069440 bytes; nmethods_code_size: 1496704 bytes}
  Tier4 {speed: 53757.621 bytes/s; standard:  0.466 s, 25025 bytes, 140 methods; osr:  0.133 s, 7141 bytes, 12 methods; nmethods_size: 210344 bytes; nmethods_code_size: 130784 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.931 s
    Standard compilation   :   0.785 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.145 s, Average : 0.009 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.329 s
       Setup time:            0.001 s
       Build HIR:             0.138 s
         Parse:                 0.112 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.120 s
         LIR Gen:               0.027 s
         Linear Scan:           0.092 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.028 s
       Other:                 0.007 s

    C2 Compile Time:        0.600 s
       Parse:                 0.092 s
       Optimize:              0.223 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.013 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.001 s)
           Other:                 0.005 s
         Vector:                0.004 s
           Box elimination:     0.004 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.158 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.008 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.022 s
       Matcher:                    0.033 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.040 s
       Regalloc:              0.178 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.033 s
         Compute Liveness:      0.053 s
         Regalloc Split:        0.015 s
         Postalloc Copy Rem:    0.031 s
         Merge multidefs:       0.013 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.005 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.008 s
         Select:                0.010 s
         Other:                 0.001 s
       Block Ordering:        0.003 s
       Peephole:              0.000 s
       Code Emission:           0.027 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.009 s
         Fill buffer:           0.008 s
         Code Installation:     0.003 s
         Other:                 0.002 s

  Total compiled methods    :     1344 methods
    Standard compilation    :     1327 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   118960 bytes
    Standard compilation    :   109621 bytes
    On stack replacement    :     9339 bytes
  Average compilation speed :   127834 bytes/s

  nmethod code size         :  2315672 bytes
  nmethod total size        :  1650176 bytes


Result "jvbench.pathfinder.PathfinderBenchmark.fullVec":
  N = 10
  mean =      1.904 ±(99.9%) 0.352 s/op

  Histogram, s/op:
    [1.600, 1.650) = 3 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 4 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.602 s/op
     p(50.0000) =      1.912 s/op
     p(90.0000) =      2.224 s/op
     p(95.0000) =      2.228 s/op
     p(99.0000) =      2.228 s/op
     p(99.9000) =      2.228 s/op
     p(99.9900) =      2.228 s/op
     p(99.9990) =      2.228 s/op
     p(99.9999) =      2.228 s/op
    p(100.0000) =      2.228 s/op

Secondary result "jvbench.pathfinder.PathfinderBenchmark.fullVec:·gc.alloc.rate":
  10.395 ±(99.9%) 1.543 MB/sec [Average]
  (min, avg, max) = (9.083, 10.395, 11.787), stdev = 1.020
  CI (99.9%): [8.853, 11.938] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.fullVec:·gc.alloc.rate.norm":
  25997304.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (25997304.000, 25997304.000, 25997304.000), stdev = 0.001
  CI (99.9%): [25997304.000, 25997304.000] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/pathfinder/input/pathfinder_5000_5000.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.pathfinder.PathfinderBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8.666 s/op
# Warmup Iteration   2: 8.662 s/op
# Warmup Iteration   3: 8.637 s/op
# Warmup Iteration   4: 8.636 s/op
# Warmup Iteration   5: 8.644 s/op
# Warmup Iteration   6: 8.653 s/op
# Warmup Iteration   7: 8.585 s/op
# Warmup Iteration   8: 8.650 s/op
# Warmup Iteration   9: 8.639 s/op
# Warmup Iteration  10: 8.647 s/op
Iteration   1: 8.643 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 2022120.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.648 s/op
                 ·gc.alloc.rate:      0.211 MB/sec
                 ·gc.alloc.rate.norm: 2022120.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4.128 s/op
                 ·gc.alloc.rate:      0.412 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 4.112 s/op
                 ·gc.alloc.rate:      0.414 MB/sec
                 ·gc.alloc.rate.norm: 2002136.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.997 s/op
                 ·gc.alloc.rate:      0.424 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.838 s/op
                 ·gc.alloc.rate:      0.440 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 4.012 s/op
                 ·gc.alloc.rate:      0.423 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.913 s/op
                 ·gc.alloc.rate:      0.433 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 4.252 s/op
                 ·gc.alloc.rate:      0.402 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.853 s/op
                 ·gc.alloc.rate:      0.438 MB/sec
                 ·gc.alloc.rate.norm: 2002104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 301458.935 bytes/s; standard:  0.230 s, 69331 bytes, 930 methods; osr:  0.004 s, 1210 bytes, 4 methods; nmethods_size: 1429096 bytes; nmethods_code_size: 1016416 bytes}
  C2 {speed: 63471.112 bytes/s; standard:  0.311 s, 19920 bytes, 104 methods; osr:  0.043 s, 2572 bytes, 6 methods; nmethods_size: 145264 bytes; nmethods_code_size: 91872 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 103373.645 bytes/s; standard:  0.007 s, 694 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34312 bytes; nmethods_code_size: 21728 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 307309.943 bytes/s; standard:  0.223 s, 68637 bytes, 787 methods; osr:  0.004 s, 1210 bytes, 4 methods; nmethods_size: 1394784 bytes; nmethods_code_size: 994688 bytes}
  Tier4 {speed: 63471.112 bytes/s; standard:  0.311 s, 19920 bytes, 104 methods; osr:  0.043 s, 2572 bytes, 6 methods; nmethods_size: 145264 bytes; nmethods_code_size: 91872 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.589 s
    Standard compilation   :   0.541 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.000 s
    On stack replacement   :   0.047 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.233 s
       Setup time:            0.001 s
       Build HIR:             0.095 s
         Parse:                 0.075 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.087 s
         LIR Gen:               0.020 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.356 s
       Parse:                 0.045 s
       Optimize:              0.119 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.084 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.013 s
       Matcher:                    0.023 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.028 s
       Regalloc:              0.118 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.022 s
         Compute Liveness:      0.035 s
         Regalloc Split:        0.009 s
         Postalloc Copy Rem:    0.022 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.007 s
         Other:                 0.000 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.019 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1044 methods
    Standard compilation    :     1034 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    93033 bytes
    Standard compilation    :    89251 bytes
    On stack replacement    :     3782 bytes
  Average compilation speed :   157865 bytes/s

  nmethod code size         :  1574360 bytes
  nmethod total size        :  1108288 bytes


Result "jvbench.pathfinder.PathfinderBenchmark.serial":
  N = 10
  mean =      4.939 ±(99.9%) 2.959 s/op

  Histogram, s/op:
    [3.000, 3.500) = 0 
    [3.500, 4.000) = 4 
    [4.000, 4.500) = 4 
    [4.500, 5.000) = 0 
    [5.000, 5.500) = 0 
    [5.500, 6.000) = 0 
    [6.000, 6.500) = 0 
    [6.500, 7.000) = 0 
    [7.000, 7.500) = 0 
    [7.500, 8.000) = 0 
    [8.000, 8.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.838 s/op
     p(50.0000) =      4.062 s/op
     p(90.0000) =      8.648 s/op
     p(95.0000) =      8.648 s/op
     p(99.0000) =      8.648 s/op
     p(99.9000) =      8.648 s/op
     p(99.9900) =      8.648 s/op
     p(99.9990) =      8.648 s/op
     p(99.9999) =      8.648 s/op
    p(100.0000) =      8.648 s/op

Secondary result "jvbench.pathfinder.PathfinderBenchmark.serial:·gc.alloc.rate":
  0.381 ±(99.9%) 0.137 MB/sec [Average]
  (min, avg, max) = (0.211, 0.381, 0.440), stdev = 0.090
  CI (99.9%): [0.244, 0.518] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.serial:·gc.alloc.rate.norm":
  2006110.400 ±(99.9%) 12756.759 B/op [Average]
  (min, avg, max) = (2002104.000, 2006110.400, 2022120.000), stdev = 8437.806
  CI (99.9%): [1993353.641, 2018867.159] (assumes normal distribution)

Secondary result "jvbench.pathfinder.PathfinderBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:06:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                     Mode  Cnt          Score           Error   Units
PathfinderBenchmark.autoVec                                     ss   10          4.992 ±         2.915    s/op
PathfinderBenchmark.autoVec:·gc.alloc.rate                      ss   10          0.376 ±         0.132  MB/sec
PathfinderBenchmark.autoVec:·gc.alloc.rate.norm                 ss   10    2006110.400 ±     12756.759    B/op
PathfinderBenchmark.autoVec:·gc.count                           ss   10            ≈ 0                  counts
PathfinderBenchmark.explicitVec                                 ss   10          2.002 ±         0.399    s/op
PathfinderBenchmark.explicitVec:·gc.alloc.rate                  ss   10         10.007 ±         1.648  MB/sec
PathfinderBenchmark.explicitVec:·gc.alloc.rate.norm             ss   10   25999961.600 ±     12705.753    B/op
PathfinderBenchmark.explicitVec:·gc.churn.G1_Eden_Space         ss   10         42.733 ±       204.303  MB/sec
PathfinderBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm    ss   10  125829120.000 ± 601578023.485    B/op
PathfinderBenchmark.explicitVec:·gc.count                       ss   10          1.000                  counts
PathfinderBenchmark.explicitVec:·gc.time                        ss   10          2.000                      ms
PathfinderBenchmark.fullVec                                     ss   10          1.904 ±         0.352    s/op
PathfinderBenchmark.fullVec:·gc.alloc.rate                      ss   10         10.395 ±         1.543  MB/sec
PathfinderBenchmark.fullVec:·gc.alloc.rate.norm                 ss   10   25997304.000 ±         0.001    B/op
PathfinderBenchmark.fullVec:·gc.count                           ss   10            ≈ 0                  counts
PathfinderBenchmark.serial                                      ss   10          4.939 ±         2.959    s/op
PathfinderBenchmark.serial:·gc.alloc.rate                       ss   10          0.381 ±         0.137  MB/sec
PathfinderBenchmark.serial:·gc.alloc.rate.norm                  ss   10    2006110.400 ±     12756.759    B/op
PathfinderBenchmark.serial:·gc.count                            ss   10            ≈ 0                  counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_21:35:28/pathfinder/PathfinderBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 329943.409 bytes/s; standard:  0.311 s, 102643 bytes, 1240 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2102928 bytes; nmethods_code_size: 1482240 bytes}
  C2 {speed: 46740.097 bytes/s; standard:  0.326 s, 15454 bytes, 117 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 135080 bytes; nmethods_code_size: 84992 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108105.900 bytes/s; standard:  0.007 s, 725 bytes, 153 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36880 bytes; nmethods_code_size: 23264 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 334799.657 bytes/s; standard:  0.304 s, 101918 bytes, 1087 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2066048 bytes; nmethods_code_size: 1458976 bytes}
  Tier4 {speed: 46740.097 bytes/s; standard:  0.326 s, 15454 bytes, 117 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 135080 bytes; nmethods_code_size: 84992 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.646 s
    Standard compilation   :   0.637 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.008 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.310 s
       Setup time:            0.001 s
       Build HIR:             0.115 s
         Parse:                 0.086 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.125 s
         LIR Gen:               0.028 s
         Linear Scan:           0.096 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.028 s
       Other:                 0.006 s

    C2 Compile Time:        0.334 s
       Parse:                 0.053 s
       Optimize:              0.096 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.014 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.002 s
         IdealLoop:             0.070 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.000 s
       Matcher:                    0.024 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.121 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.021 s
         Compute Liveness:      0.038 s
         Regalloc Split:        0.013 s
         Postalloc Copy Rem:    0.022 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.019 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.007 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1360 methods
    Standard compilation    :     1357 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   118812 bytes
    Standard compilation    :   118097 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   184055 bytes/s

  nmethod code size         :  2238008 bytes
  nmethod total size        :  1567232 bytes
