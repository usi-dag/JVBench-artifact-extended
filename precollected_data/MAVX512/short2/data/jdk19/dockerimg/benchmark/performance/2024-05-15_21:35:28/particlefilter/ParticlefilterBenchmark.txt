# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.653 s/op
# Warmup Iteration   2: 6.576 s/op
# Warmup Iteration   3: 6.621 s/op
# Warmup Iteration   4: 6.823 s/op
# Warmup Iteration   5: 6.748 s/op
# Warmup Iteration   6: 6.748 s/op
# Warmup Iteration   7: 6.748 s/op
# Warmup Iteration   8: 6.748 s/op
# Warmup Iteration   9: 6.748 s/op
# Warmup Iteration  10: 6.748 s/op
Iteration   1: 6.748 s/op
                 ·gc.alloc.rate:      1.466 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.749 s/op
                 ·gc.alloc.rate:      1.466 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.820 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.819 s/op
                 ·gc.alloc.rate:      1.452 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 304869.517 bytes/s; standard:  0.186 s, 55750 bytes, 790 methods; osr:  0.019 s, 6721 bytes, 11 methods; nmethods_size: 1290416 bytes; nmethods_code_size: 900032 bytes}
  C2 {speed: 18794.200 bytes/s; standard:  0.273 s, 6365 bytes, 58 methods; osr:  0.434 s, 6927 bytes, 12 methods; nmethods_size: 142640 bytes; nmethods_code_size: 102848 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108576.943 bytes/s; standard:  0.006 s, 649 bytes, 134 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32272 bytes; nmethods_code_size: 20480 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 310767.500 bytes/s; standard:  0.180 s, 55101 bytes, 656 methods; osr:  0.019 s, 6721 bytes, 11 methods; nmethods_size: 1258144 bytes; nmethods_code_size: 879552 bytes}
  Tier4 {speed: 18794.200 bytes/s; standard:  0.273 s, 6365 bytes, 58 methods; osr:  0.434 s, 6927 bytes, 12 methods; nmethods_size: 142640 bytes; nmethods_code_size: 102848 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.913 s
    Standard compilation   :   0.459 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.453 s, Average : 0.020 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.204 s
       Setup time:            0.001 s
       Build HIR:             0.080 s
         Parse:                 0.063 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.079 s
         LIR Gen:               0.018 s
         Linear Scan:           0.061 s
         Other:                 0.001 s
       Code Emission:         0.021 s
       Code Installation:     0.017 s
       Other:                 0.005 s

    C2 Compile Time:        0.709 s
       Parse:                 0.025 s
       Optimize:              0.367 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.011 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.322 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.007 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.021 s
       Matcher:                    0.023 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.032 s
       Regalloc:              0.242 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.005 s
         Build IFG (phys):      0.055 s
         Compute Liveness:      0.070 s
         Regalloc Split:        0.022 s
         Postalloc Copy Rem:    0.021 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.010 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.004 s
         Cache LRG:             0.001 s
         Simplify:              0.016 s
         Select:                0.018 s
         Other:                 0.007 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.017 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.007 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :      871 methods
    Standard compilation    :      848 methods
    On stack replacement    :       23 methods
  Total compiled bytecodes  :    75763 bytes
    Standard compilation    :    62115 bytes
    On stack replacement    :    13648 bytes
  Average compilation speed :    82990 bytes/s

  nmethod code size         :  1433056 bytes
  nmethod total size        :  1002880 bytes


Result "jvbench.particlefilter.ParticlefilterBenchmark.autoVec":
  N = 10
  mean =      6.805 ±(99.9%) 0.045 s/op

  Histogram, s/op:
    [6.740, 6.745) = 0 
    [6.745, 6.750) = 2 
    [6.750, 6.755) = 0 
    [6.755, 6.760) = 0 
    [6.760, 6.765) = 0 
    [6.765, 6.770) = 0 
    [6.770, 6.775) = 0 
    [6.775, 6.780) = 0 
    [6.780, 6.785) = 0 
    [6.785, 6.790) = 0 
    [6.790, 6.795) = 0 
    [6.795, 6.800) = 0 
    [6.800, 6.805) = 0 
    [6.805, 6.810) = 0 
    [6.810, 6.815) = 0 
    [6.815, 6.820) = 8 

  Percentiles, s/op:
      p(0.0000) =      6.748 s/op
     p(50.0000) =      6.819 s/op
     p(90.0000) =      6.820 s/op
     p(95.0000) =      6.820 s/op
     p(99.0000) =      6.820 s/op
     p(99.9000) =      6.820 s/op
     p(99.9900) =      6.820 s/op
     p(99.9990) =      6.820 s/op
     p(99.9999) =      6.820 s/op
    p(100.0000) =      6.820 s/op

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.autoVec:·gc.alloc.rate":
  1.455 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (1.452, 1.455, 1.466), stdev = 0.006
  CI (99.9%): [1.446, 1.464] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.autoVec:·gc.alloc.rate.norm":
  11143235.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (11143232.000, 11143235.200, 11143264.000), stdev = 10.119
  CI (99.9%): [11143219.901, 11143250.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:07:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.536 s/op
# Warmup Iteration   2: 5.978 s/op
# Warmup Iteration   3: 2.323 s/op
# Warmup Iteration   4: 2.330 s/op
# Warmup Iteration   5: 2.348 s/op
# Warmup Iteration   6: 2.348 s/op
# Warmup Iteration   7: 2.345 s/op
# Warmup Iteration   8: 2.353 s/op
# Warmup Iteration   9: 2.354 s/op
# Warmup Iteration  10: 2.356 s/op
Iteration   1: 2.357 s/op
                 ·gc.alloc.rate:      9.841 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.356 s/op
                 ·gc.alloc.rate:      9.845 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.355 s/op
                 ·gc.alloc.rate:      9.848 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.355 s/op
                 ·gc.alloc.rate:      9.849 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.356 s/op
                 ·gc.alloc.rate:      9.842 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.352 s/op
                 ·gc.alloc.rate:      9.857 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.359 s/op
                 ·gc.alloc.rate:      9.835 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.359 s/op
                 ·gc.alloc.rate:      9.836 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.358 s/op
                 ·gc.alloc.rate:      9.839 MB/sec
                 ·gc.alloc.rate.norm: 29493384.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.358 s/op
                 ·gc.alloc.rate:      9.836 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 238949.533 bytes/s; standard:  0.287 s, 74215 bytes, 1111 methods; osr:  0.062 s, 9364 bytes, 10 methods; nmethods_size: 2216224 bytes; nmethods_code_size: 1558464 bytes}
  C2 {speed: 26962.885 bytes/s; standard:  0.693 s, 20197 bytes, 156 methods; osr:  0.667 s, 16486 bytes, 19 methods; nmethods_size: 336592 bytes; nmethods_code_size: 218944 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 107249.846 bytes/s; standard:  0.007 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 241468.355 bytes/s; standard:  0.281 s, 73511 bytes, 966 methods; osr:  0.062 s, 9364 bytes, 10 methods; nmethods_size: 2181416 bytes; nmethods_code_size: 1536416 bytes}
  Tier4 {speed: 26962.885 bytes/s; standard:  0.693 s, 20197 bytes, 156 methods; osr:  0.667 s, 16486 bytes, 19 methods; nmethods_size: 336592 bytes; nmethods_code_size: 218944 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.711 s
    Standard compilation   :   0.980 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.730 s, Average : 0.025 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.348 s
       Setup time:            0.001 s
       Build HIR:             0.139 s
         Parse:                 0.111 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.132 s
         LIR Gen:               0.029 s
         Linear Scan:           0.103 s
         Other:                 0.001 s
       Code Emission:         0.040 s
       Code Installation:     0.029 s
       Other:                 0.007 s

    C2 Compile Time:        1.362 s
       Parse:                 0.127 s
       Optimize:              0.586 s
         Escape Analysis:       0.005 s
           Conn Graph:            0.004 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.025 s
         Incremental Inline:    0.013 s
           IdealLoop:             0.000 s
          (IGVN:                  0.006 s)
          (Inline:                0.004 s)
          (Prune Useless:         0.003 s)
           Other:                 0.013 s
         Vector:                0.010 s
           Box elimination:     0.010 s
             IGVN:              0.003 s
             Prune Useless:     0.004 s
         Renumber Live:         0.003 s
         IdealLoop:             0.463 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.004 s
         GVN 2:                 0.002 s
         Macro Expand:          0.016 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.005 s
         Other:                 0.041 s
       Matcher:                    0.050 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.066 s
       Regalloc:              0.483 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.008 s
         Build IFG (phys):      0.101 s
         Compute Liveness:      0.129 s
         Regalloc Split:        0.044 s
         Postalloc Copy Rem:    0.057 s
         Merge multidefs:       0.022 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.017 s
         Coalesce 2:            0.011 s
         Coalesce 3:            0.003 s
         Cache LRG:             0.001 s
         Simplify:              0.032 s
         Select:                0.037 s
         Other:                 0.018 s
       Block Ordering:        0.004 s
       Peephole:              0.001 s
       Code Emission:           0.040 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.007 s
         Build OOP maps:        0.015 s
         Fill buffer:           0.010 s
         Code Installation:     0.004 s
         Other:                 0.003 s
       Other:                 0.001 s

  Total compiled methods    :     1296 methods
    Standard compilation    :     1267 methods
    On stack replacement    :       29 methods
  Total compiled bytecodes  :   120262 bytes
    Standard compilation    :    94412 bytes
    On stack replacement    :    25850 bytes
  Average compilation speed :    70285 bytes/s

  nmethod code size         :  2552816 bytes
  nmethod total size        :  1777408 bytes


Result "jvbench.particlefilter.ParticlefilterBenchmark.explicitVec":
  N = 10
  mean =      2.356 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [2.352, 2.353) = 1 
    [2.353, 2.353) = 0 
    [2.353, 2.354) = 0 
    [2.354, 2.354) = 0 
    [2.354, 2.355) = 0 
    [2.355, 2.355) = 1 
    [2.355, 2.355) = 1 
    [2.355, 2.356) = 1 
    [2.356, 2.357) = 1 
    [2.357, 2.357) = 0 
    [2.357, 2.358) = 1 
    [2.358, 2.358) = 1 
    [2.358, 2.359) = 1 
    [2.359, 2.359) = 2 

  Percentiles, s/op:
      p(0.0000) =      2.352 s/op
     p(50.0000) =      2.357 s/op
     p(90.0000) =      2.359 s/op
     p(95.0000) =      2.359 s/op
     p(99.0000) =      2.359 s/op
     p(99.9000) =      2.359 s/op
     p(99.9900) =      2.359 s/op
     p(99.9990) =      2.359 s/op
     p(99.9999) =      2.359 s/op
    p(100.0000) =      2.359 s/op

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.explicitVec:·gc.alloc.rate":
  9.843 ±(99.9%) 0.011 MB/sec [Average]
  (min, avg, max) = (9.835, 9.843, 9.857), stdev = 0.007
  CI (99.9%): [9.832, 9.853] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.explicitVec:·gc.alloc.rate.norm":
  29493355.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (29493352.000, 29493355.200, 29493384.000), stdev = 10.119
  CI (99.9%): [29493339.901, 29493370.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:03:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.424 s/op
# Warmup Iteration   2: 6.038 s/op
# Warmup Iteration   3: 2.531 s/op
# Warmup Iteration   4: 2.325 s/op
# Warmup Iteration   5: 2.323 s/op
# Warmup Iteration   6: 2.287 s/op
# Warmup Iteration   7: 2.289 s/op
# Warmup Iteration   8: 2.293 s/op
# Warmup Iteration   9: 2.292 s/op
# Warmup Iteration  10: 2.292 s/op
Iteration   1: 2.297 s/op
                 ·gc.alloc.rate:      10.051 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.290 s/op
                 ·gc.alloc.rate:      10.077 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.293 s/op
                 ·gc.alloc.rate:      10.067 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.288 s/op
                 ·gc.alloc.rate:      10.086 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.294 s/op
                 ·gc.alloc.rate:      10.061 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.294 s/op
                 ·gc.alloc.rate:      10.064 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.292 s/op
                 ·gc.alloc.rate:      10.070 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.294 s/op
                 ·gc.alloc.rate:      10.063 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.292 s/op
                 ·gc.alloc.rate:      10.070 MB/sec
                 ·gc.alloc.rate.norm: 29493384.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.288 s/op
                 ·gc.alloc.rate:      10.083 MB/sec
                 ·gc.alloc.rate.norm: 29493352.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 247198.052 bytes/s; standard:  0.299 s, 76204 bytes, 1114 methods; osr:  0.027 s, 4495 bytes, 7 methods; nmethods_size: 2063824 bytes; nmethods_code_size: 1464288 bytes}
  C2 {speed: 23395.478 bytes/s; standard:  0.739 s, 19723 bytes, 143 methods; osr:  0.866 s, 17841 bytes, 18 methods; nmethods_size: 350912 bytes; nmethods_code_size: 231200 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108024.601 bytes/s; standard:  0.007 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 250032.972 bytes/s; standard:  0.293 s, 75500 bytes, 969 methods; osr:  0.027 s, 4495 bytes, 7 methods; nmethods_size: 2029016 bytes; nmethods_code_size: 1442240 bytes}
  Tier4 {speed: 23395.478 bytes/s; standard:  0.739 s, 19723 bytes, 143 methods; osr:  0.866 s, 17841 bytes, 18 methods; nmethods_size: 350912 bytes; nmethods_code_size: 231200 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.933 s
    Standard compilation   :   1.038 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.894 s, Average : 0.036 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.324 s
       Setup time:            0.001 s
       Build HIR:             0.130 s
         Parse:                 0.105 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.122 s
         LIR Gen:               0.028 s
         Linear Scan:           0.094 s
         Other:                 0.001 s
       Code Emission:         0.036 s
       Code Installation:     0.028 s
       Other:                 0.006 s

    C2 Compile Time:        1.607 s
       Parse:                 0.132 s
       Optimize:              0.756 s
         Escape Analysis:       0.005 s
           Conn Graph:            0.004 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.029 s
         Incremental Inline:    0.019 s
           IdealLoop:             0.000 s
          (IGVN:                  0.008 s)
          (Inline:                0.006 s)
          (Prune Useless:         0.005 s)
           Other:                 0.019 s
         Vector:                0.010 s
           Box elimination:     0.010 s
             IGVN:              0.002 s
             Prune Useless:     0.004 s
         Renumber Live:         0.003 s
         IdealLoop:             0.618 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.004 s
         GVN 2:                 0.002 s
         Macro Expand:          0.017 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.005 s
         Other:                 0.045 s
       Matcher:                    0.052 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.069 s
       Regalloc:              0.548 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.009 s
         Build IFG (phys):      0.117 s
         Compute Liveness:      0.147 s
         Regalloc Split:        0.051 s
         Postalloc Copy Rem:    0.060 s
         Merge multidefs:       0.023 s
         Fixup Spills:          0.001 s
         Compact:               0.002 s
         Coalesce 1:            0.021 s
         Coalesce 2:            0.018 s
         Coalesce 3:            0.003 s
         Cache LRG:             0.001 s
         Simplify:              0.034 s
         Select:                0.040 s
         Other:                 0.019 s
       Block Ordering:        0.004 s
       Peephole:              0.001 s
       Code Emission:           0.041 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.007 s
         Build OOP maps:        0.016 s
         Fill buffer:           0.011 s
         Code Installation:     0.004 s
         Other:                 0.003 s
       Other:                 0.000 s

  Total compiled methods    :     1282 methods
    Standard compilation    :     1257 methods
    On stack replacement    :       25 methods
  Total compiled bytecodes  :   118263 bytes
    Standard compilation    :    95927 bytes
    On stack replacement    :    22336 bytes
  Average compilation speed :    61186 bytes/s

  nmethod code size         :  2414736 bytes
  nmethod total size        :  1695488 bytes


Result "jvbench.particlefilter.ParticlefilterBenchmark.fullVec":
  N = 10
  mean =      2.292 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [2.287, 2.288) = 1 
    [2.288, 2.289) = 1 
    [2.289, 2.290) = 0 
    [2.290, 2.291) = 1 
    [2.291, 2.292) = 0 
    [2.292, 2.293) = 3 
    [2.293, 2.294) = 2 
    [2.294, 2.295) = 1 
    [2.295, 2.296) = 0 
    [2.296, 2.297) = 0 
    [2.297, 2.298) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.288 s/op
     p(50.0000) =      2.292 s/op
     p(90.0000) =      2.297 s/op
     p(95.0000) =      2.297 s/op
     p(99.0000) =      2.297 s/op
     p(99.9000) =      2.297 s/op
     p(99.9900) =      2.297 s/op
     p(99.9990) =      2.297 s/op
     p(99.9999) =      2.297 s/op
    p(100.0000) =      2.297 s/op

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.fullVec:·gc.alloc.rate":
  10.069 ±(99.9%) 0.016 MB/sec [Average]
  (min, avg, max) = (10.051, 10.069, 10.086), stdev = 0.010
  CI (99.9%): [10.053, 10.085] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.fullVec:·gc.alloc.rate.norm":
  29493355.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (29493352.000, 29493355.200, 29493384.000), stdev = 10.119
  CI (99.9%): [29493339.901, 29493370.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.725 s/op
# Warmup Iteration   2: 6.687 s/op
# Warmup Iteration   3: 6.842 s/op
# Warmup Iteration   4: 6.842 s/op
# Warmup Iteration   5: 6.773 s/op
# Warmup Iteration   6: 6.777 s/op
# Warmup Iteration   7: 6.774 s/op
# Warmup Iteration   8: 6.775 s/op
# Warmup Iteration   9: 6.775 s/op
# Warmup Iteration  10: 6.774 s/op
Iteration   1: 6.773 s/op
                 ·gc.alloc.rate:      1.461 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.776 s/op
                 ·gc.alloc.rate:      1.460 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.842 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.842 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.842 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.842 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.843 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143264.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.843 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.841 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.841 s/op
                 ·gc.alloc.rate:      1.447 MB/sec
                 ·gc.alloc.rate.norm: 11143232.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 303264.045 bytes/s; standard:  0.187 s, 56052 bytes, 793 methods; osr:  0.011 s, 3994 bytes, 8 methods; nmethods_size: 1249568 bytes; nmethods_code_size: 877504 bytes}
  C2 {speed: 25619.496 bytes/s; standard:  0.236 s, 6388 bytes, 57 methods; osr:  0.303 s, 7432 bytes, 13 methods; nmethods_size: 129832 bytes; nmethods_code_size: 92960 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 113631.031 bytes/s; standard:  0.006 s, 649 bytes, 134 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32272 bytes; nmethods_code_size: 20480 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 308896.664 bytes/s; standard:  0.181 s, 55403 bytes, 659 methods; osr:  0.011 s, 3994 bytes, 8 methods; nmethods_size: 1217296 bytes; nmethods_code_size: 857024 bytes}
  Tier4 {speed: 25619.496 bytes/s; standard:  0.236 s, 6388 bytes, 57 methods; osr:  0.303 s, 7432 bytes, 13 methods; nmethods_size: 129832 bytes; nmethods_code_size: 92960 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.738 s
    Standard compilation   :   0.422 s, Average : 0.000 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.315 s, Average : 0.015 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.197 s
       Setup time:            0.001 s
       Build HIR:             0.079 s
         Parse:                 0.062 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.076 s
         LIR Gen:               0.017 s
         Linear Scan:           0.058 s
         Other:                 0.001 s
       Code Emission:         0.021 s
       Code Installation:     0.017 s
       Other:                 0.004 s

    C2 Compile Time:        0.542 s
       Parse:                 0.023 s
       Optimize:              0.264 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.226 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.006 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.018 s
       Matcher:                    0.020 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.027 s
       Regalloc:              0.188 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.042 s
         Compute Liveness:      0.053 s
         Regalloc Split:        0.016 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.008 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.003 s
         Cache LRG:             0.000 s
         Simplify:              0.012 s
         Select:                0.014 s
         Other:                 0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.016 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :      871 methods
    Standard compilation    :      850 methods
    On stack replacement    :       21 methods
  Total compiled bytecodes  :    73866 bytes
    Standard compilation    :    62440 bytes
    On stack replacement    :    11426 bytes
  Average compilation speed :   100059 bytes/s

  nmethod code size         :  1379400 bytes
  nmethod total size        :   970464 bytes


Result "jvbench.particlefilter.ParticlefilterBenchmark.serial":
  N = 10
  mean =      6.828 ±(99.9%) 0.043 s/op

  Histogram, s/op:
    [6.770, 6.775) = 1 
    [6.775, 6.780) = 1 
    [6.780, 6.785) = 0 
    [6.785, 6.790) = 0 
    [6.790, 6.795) = 0 
    [6.795, 6.800) = 0 
    [6.800, 6.805) = 0 
    [6.805, 6.810) = 0 
    [6.810, 6.815) = 0 
    [6.815, 6.820) = 0 
    [6.820, 6.825) = 0 
    [6.825, 6.830) = 0 
    [6.830, 6.835) = 0 
    [6.835, 6.840) = 0 
    [6.840, 6.845) = 8 
    [6.845, 6.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.773 s/op
     p(50.0000) =      6.842 s/op
     p(90.0000) =      6.843 s/op
     p(95.0000) =      6.843 s/op
     p(99.0000) =      6.843 s/op
     p(99.9000) =      6.843 s/op
     p(99.9900) =      6.843 s/op
     p(99.9990) =      6.843 s/op
     p(99.9999) =      6.843 s/op
    p(100.0000) =      6.843 s/op

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.serial:·gc.alloc.rate":
  1.450 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (1.447, 1.450, 1.461), stdev = 0.006
  CI (99.9%): [1.441, 1.459] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.serial:·gc.alloc.rate.norm":
  11143235.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (11143232.000, 11143235.200, 11143264.000), stdev = 10.119
  CI (99.9%): [11143219.901, 11143250.499] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:07:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                Mode  Cnt         Score    Error   Units
ParticlefilterBenchmark.autoVec                            ss   10         6.805 ±  0.045    s/op
ParticlefilterBenchmark.autoVec:·gc.alloc.rate             ss   10         1.455 ±  0.009  MB/sec
ParticlefilterBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  11143235.200 ± 15.299    B/op
ParticlefilterBenchmark.autoVec:·gc.count                  ss   10           ≈ 0           counts
ParticlefilterBenchmark.explicitVec                        ss   10         2.356 ±  0.003    s/op
ParticlefilterBenchmark.explicitVec:·gc.alloc.rate         ss   10         9.843 ±  0.011  MB/sec
ParticlefilterBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  29493355.200 ± 15.299    B/op
ParticlefilterBenchmark.explicitVec:·gc.count              ss   10           ≈ 0           counts
ParticlefilterBenchmark.fullVec                            ss   10         2.292 ±  0.004    s/op
ParticlefilterBenchmark.fullVec:·gc.alloc.rate             ss   10        10.069 ±  0.016  MB/sec
ParticlefilterBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  29493355.200 ± 15.299    B/op
ParticlefilterBenchmark.fullVec:·gc.count                  ss   10           ≈ 0           counts
ParticlefilterBenchmark.serial                             ss   10         6.828 ±  0.043    s/op
ParticlefilterBenchmark.serial:·gc.alloc.rate              ss   10         1.450 ±  0.009  MB/sec
ParticlefilterBenchmark.serial:·gc.alloc.rate.norm         ss   10  11143235.200 ± 15.299    B/op
ParticlefilterBenchmark.serial:·gc.count                   ss   10           ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_21:35:28/particlefilter/ParticlefilterBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 331982.868 bytes/s; standard:  0.304 s, 101006 bytes, 1222 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2052200 bytes; nmethods_code_size: 1448608 bytes}
  C2 {speed: 48766.238 bytes/s; standard:  0.315 s, 15558 bytes, 116 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 132704 bytes; nmethods_code_size: 84256 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 110493.439 bytes/s; standard:  0.007 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 336798.771 bytes/s; standard:  0.297 s, 100286 bytes, 1070 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2015568 bytes; nmethods_code_size: 1425504 bytes}
  Tier4 {speed: 48766.238 bytes/s; standard:  0.315 s, 15558 bytes, 116 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 132704 bytes; nmethods_code_size: 84256 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.627 s
    Standard compilation   :   0.619 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.008 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.303 s
       Setup time:            0.001 s
       Build HIR:             0.111 s
         Parse:                 0.083 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.009 s
       Emit LIR:              0.122 s
         LIR Gen:               0.027 s
         Linear Scan:           0.094 s
         Other:                 0.001 s
       Code Emission:         0.034 s
       Code Installation:     0.028 s
       Other:                 0.007 s

    C2 Compile Time:        0.322 s
       Parse:                 0.045 s
       Optimize:              0.090 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.059 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.009 s
       Matcher:                    0.028 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.115 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.021 s
         Compute Liveness:      0.037 s
         Regalloc Split:        0.013 s
         Postalloc Copy Rem:    0.021 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.019 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1341 methods
    Standard compilation    :     1338 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   117279 bytes
    Standard compilation    :   116564 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   187169 bytes/s

  nmethod code size         :  2184904 bytes
  nmethod total size        :  1532864 bytes
