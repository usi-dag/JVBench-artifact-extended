# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7.168 s/op
# Warmup Iteration   2: 7.151 s/op
# Warmup Iteration   3: 5.934 s/op
# Warmup Iteration   4: 5.934 s/op
# Warmup Iteration   5: 5.934 s/op
# Warmup Iteration   6: 5.934 s/op
# Warmup Iteration   7: 5.934 s/op
# Warmup Iteration   8: 5.934 s/op
# Warmup Iteration   9: 5.934 s/op
# Warmup Iteration  10: 5.934 s/op
Iteration   1: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.934 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 319624.347 bytes/s; standard:  0.230 s, 72714 bytes, 913 methods; osr:  0.008 s, 3532 bytes, 4 methods; nmethods_size: 1502144 bytes; nmethods_code_size: 1061344 bytes}
  C2 {speed: 60467.132 bytes/s; standard:  0.278 s, 16293 bytes, 97 methods; osr:  0.066 s, 4547 bytes, 7 methods; nmethods_size: 136800 bytes; nmethods_code_size: 83328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 110019.247 bytes/s; standard:  0.006 s, 684 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33848 bytes; nmethods_code_size: 21440 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 325233.288 bytes/s; standard:  0.224 s, 72030 bytes, 772 methods; osr:  0.008 s, 3532 bytes, 4 methods; nmethods_size: 1468296 bytes; nmethods_code_size: 1039904 bytes}
  Tier4 {speed: 60467.132 bytes/s; standard:  0.278 s, 16293 bytes, 97 methods; osr:  0.066 s, 4547 bytes, 7 methods; nmethods_size: 136800 bytes; nmethods_code_size: 83328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.584 s
    Standard compilation   :   0.509 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.075 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.237 s
       Setup time:            0.001 s
       Build HIR:             0.096 s
         Parse:                 0.076 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.089 s
         LIR Gen:               0.020 s
         Linear Scan:           0.068 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.346 s
       Parse:                 0.043 s
       Optimize:              0.118 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.075 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.006 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.017 s
       Matcher:                    0.022 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.027 s
       Regalloc:              0.114 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.022 s
         Compute Liveness:      0.035 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.018 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1021 methods
    Standard compilation    :     1010 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    97086 bytes
    Standard compilation    :    89007 bytes
    On stack replacement    :     8079 bytes
  Average compilation speed :   166254 bytes/s

  nmethod code size         :  1638944 bytes
  nmethod total size        :  1144672 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.autoVec":
  N = 10
  mean =      5.934 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [5.934, 5.934) = 1 
    [5.934, 5.934) = 1 
    [5.934, 5.934) = 0 
    [5.934, 5.934) = 1 
    [5.934, 5.934) = 0 
    [5.934, 5.934) = 0 
    [5.934, 5.934) = 2 
    [5.934, 5.934) = 0 
    [5.934, 5.934) = 0 
    [5.934, 5.934) = 1 
    [5.934, 5.934) = 0 
    [5.934, 5.935) = 1 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 1 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.934 s/op
     p(50.0000) =      5.934 s/op
     p(90.0000) =      5.935 s/op
     p(95.0000) =      5.935 s/op
     p(99.0000) =      5.935 s/op
     p(99.9000) =      5.935 s/op
     p(99.9900) =      5.935 s/op
     p(99.9990) =      5.935 s/op
     p(99.9999) =      5.935 s/op
    p(100.0000) =      5.935 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:06:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.358 s/op
# Warmup Iteration   2: 1.535 s/op
# Warmup Iteration   3: 0.500 s/op
# Warmup Iteration   4: 0.498 s/op
# Warmup Iteration   5: 0.498 s/op
# Warmup Iteration   6: 0.499 s/op
# Warmup Iteration   7: 0.498 s/op
# Warmup Iteration   8: 0.498 s/op
# Warmup Iteration   9: 0.498 s/op
# Warmup Iteration  10: 0.498 s/op
Iteration   1: 0.498 s/op
                 ·gc.alloc.rate:      45.529 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.499 s/op
                 ·gc.alloc.rate:      45.469 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.498 s/op
                 ·gc.alloc.rate:      45.522 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.498 s/op
                 ·gc.alloc.rate:      45.516 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.498 s/op
                 ·gc.alloc.rate:      45.510 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.497 s/op
                 ·gc.alloc.rate:      45.530 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.498 s/op
                 ·gc.alloc.rate:      45.518 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.498 s/op
                 ·gc.alloc.rate:      45.502 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.498 s/op
                 ·gc.alloc.rate:      45.519 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.498 s/op
                 ·gc.alloc.rate:      45.524 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 278787.623 bytes/s; standard:  0.334 s, 93057 bytes, 1201 methods; osr:  0.015 s, 4281 bytes, 4 methods; nmethods_size: 2274608 bytes; nmethods_code_size: 1603488 bytes}
  C2 {speed: 47038.451 bytes/s; standard:  0.471 s, 23082 bytes, 159 methods; osr:  0.259 s, 11263 bytes, 13 methods; nmethods_size: 258872 bytes; nmethods_code_size: 157888 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 110200.435 bytes/s; standard:  0.007 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 282202.979 bytes/s; standard:  0.327 s, 92293 bytes, 1044 methods; osr:  0.015 s, 4281 bytes, 4 methods; nmethods_size: 2237080 bytes; nmethods_code_size: 1579776 bytes}
  Tier4 {speed: 47038.451 bytes/s; standard:  0.471 s, 23082 bytes, 159 methods; osr:  0.259 s, 11263 bytes, 13 methods; nmethods_size: 258872 bytes; nmethods_code_size: 157888 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.080 s
    Standard compilation   :   0.805 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.274 s, Average : 0.016 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.347 s
       Setup time:            0.001 s
       Build HIR:             0.142 s
         Parse:                 0.113 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.130 s
         LIR Gen:               0.029 s
         Linear Scan:           0.100 s
         Other:                 0.001 s
       Code Emission:         0.038 s
       Code Installation:     0.029 s
       Other:                 0.007 s

    C2 Compile Time:        0.731 s
       Parse:                 0.117 s
       Optimize:              0.250 s
         Escape Analysis:       0.006 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.018 s
         Incremental Inline:    0.010 s
           IdealLoop:             0.000 s
          (IGVN:                  0.006 s)
          (Inline:                0.003 s)
          (Prune Useless:         0.002 s)
           Other:                 0.010 s
         Vector:                0.007 s
           Box elimination:     0.007 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.002 s
         IdealLoop:             0.158 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.001 s
         Macro Expand:          0.012 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.029 s
       Matcher:                    0.039 s
         Post Selection Cleanup:   0.004 s
       Scheduler:                  0.047 s
       Regalloc:              0.241 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.047 s
         Compute Liveness:      0.066 s
         Regalloc Split:        0.019 s
         Postalloc Copy Rem:    0.037 s
         Merge multidefs:       0.015 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.007 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.014 s
         Select:                0.018 s
         Other:                 0.007 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.030 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.011 s
         Fill buffer:           0.008 s
         Code Installation:     0.004 s
         Other:                 0.002 s

  Total compiled methods    :     1377 methods
    Standard compilation    :     1360 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :   131683 bytes
    Standard compilation    :   116139 bytes
    On stack replacement    :    15544 bytes
  Average compilation speed :   121921 bytes/s

  nmethod code size         :  2533480 bytes
  nmethod total size        :  1761376 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.explicitVec":
  N = 10
  mean =      0.498 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.497, 0.497) = 0 
    [0.497, 0.497) = 0 
    [0.497, 0.497) = 0 
    [0.497, 0.498) = 1 
    [0.498, 0.498) = 4 
    [0.498, 0.498) = 1 
    [0.498, 0.498) = 2 
    [0.498, 0.498) = 0 
    [0.498, 0.498) = 1 
    [0.498, 0.498) = 0 
    [0.498, 0.498) = 0 
    [0.498, 0.499) = 0 
    [0.499, 0.499) = 0 
    [0.499, 0.499) = 0 
    [0.499, 0.499) = 1 
    [0.499, 0.499) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.497 s/op
     p(50.0000) =      0.498 s/op
     p(90.0000) =      0.499 s/op
     p(95.0000) =      0.499 s/op
     p(99.0000) =      0.499 s/op
     p(99.9000) =      0.499 s/op
     p(99.9900) =      0.499 s/op
     p(99.9990) =      0.499 s/op
     p(99.9999) =      0.499 s/op
    p(100.0000) =      0.499 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate":
  45.514 ±(99.9%) 0.027 MB/sec [Average]
  (min, avg, max) = (45.469, 45.514, 45.530), stdev = 0.018
  CI (99.9%): [45.487, 45.541] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm":
  47666104.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (47666104.000, 47666104.000, 47666104.000), stdev = 0.001
  CI (99.9%): [47666104.000, 47666104.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:02:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.341 s/op
# Warmup Iteration   2: 1.672 s/op
# Warmup Iteration   3: 0.503 s/op
# Warmup Iteration   4: 0.505 s/op
# Warmup Iteration   5: 0.502 s/op
# Warmup Iteration   6: 0.502 s/op
# Warmup Iteration   7: 0.502 s/op
# Warmup Iteration   8: 0.502 s/op
# Warmup Iteration   9: 0.502 s/op
# Warmup Iteration  10: 0.502 s/op
Iteration   1: 0.501 s/op
                 ·gc.alloc.rate:      45.363 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.502 s/op
                 ·gc.alloc.rate:      45.337 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.502 s/op
                 ·gc.alloc.rate:      45.320 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.501 s/op
                 ·gc.alloc.rate:      45.365 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.501 s/op
                 ·gc.alloc.rate:      45.352 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.502 s/op
                 ·gc.alloc.rate:      45.336 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.501 s/op
                 ·gc.alloc.rate:      45.362 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.501 s/op
                 ·gc.alloc.rate:      45.352 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.501 s/op
                 ·gc.alloc.rate:      45.349 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.501 s/op
                 ·gc.alloc.rate:      45.363 MB/sec
                 ·gc.alloc.rate.norm: 47666104.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 278812.520 bytes/s; standard:  0.333 s, 92880 bytes, 1190 methods; osr:  0.015 s, 4281 bytes, 4 methods; nmethods_size: 2257000 bytes; nmethods_code_size: 1590400 bytes}
  C2 {speed: 46442.846 bytes/s; standard:  0.472 s, 23213 bytes, 157 methods; osr:  0.198 s, 7871 bytes, 12 methods; nmethods_size: 242672 bytes; nmethods_code_size: 147520 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 105996.664 bytes/s; standard:  0.007 s, 764 bytes, 157 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37528 bytes; nmethods_code_size: 23712 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 282462.427 bytes/s; standard:  0.326 s, 92116 bytes, 1033 methods; osr:  0.015 s, 4281 bytes, 4 methods; nmethods_size: 2219472 bytes; nmethods_code_size: 1566688 bytes}
  Tier4 {speed: 46442.846 bytes/s; standard:  0.472 s, 23213 bytes, 157 methods; osr:  0.198 s, 7871 bytes, 12 methods; nmethods_size: 242672 bytes; nmethods_code_size: 147520 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.019 s
    Standard compilation   :   0.805 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.213 s, Average : 0.013 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.346 s
       Setup time:            0.001 s
       Build HIR:             0.141 s
         Parse:                 0.113 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.001 s
         Other:                 0.010 s
       Emit LIR:              0.129 s
         LIR Gen:               0.029 s
         Linear Scan:           0.099 s
         Other:                 0.001 s
       Code Emission:         0.038 s
       Code Installation:     0.029 s
       Other:                 0.007 s

    C2 Compile Time:        0.671 s
       Parse:                 0.101 s
       Optimize:              0.228 s
         Escape Analysis:       0.006 s
           Conn Graph:            0.005 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.016 s
         Incremental Inline:    0.007 s
           IdealLoop:             0.000 s
          (IGVN:                  0.004 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.001 s)
           Other:                 0.007 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.002 s
         IdealLoop:             0.144 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.001 s
         Macro Expand:          0.011 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.027 s
       Matcher:                    0.037 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.045 s
       Regalloc:              0.223 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.044 s
         Compute Liveness:      0.062 s
         Regalloc Split:        0.017 s
         Postalloc Copy Rem:    0.034 s
         Merge multidefs:       0.014 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.006 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.013 s
         Select:                0.017 s
         Other:                 0.006 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.031 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.010 s
         Fill buffer:           0.008 s
         Code Installation:     0.006 s
         Other:                 0.002 s

  Total compiled methods    :     1363 methods
    Standard compilation    :     1347 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   128245 bytes
    Standard compilation    :   116093 bytes
    On stack replacement    :    12152 bytes
  Average compilation speed :   125910 bytes/s

  nmethod code size         :  2499672 bytes
  nmethod total size        :  1737920 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.fullVec":
  N = 10
  mean =      0.501 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.501, 0.501) = 3 
    [0.501, 0.501) = 1 
    [0.501, 0.501) = 1 
    [0.501, 0.502) = 2 
    [0.502, 0.502) = 0 
    [0.502, 0.502) = 0 
    [0.502, 0.502) = 2 
    [0.502, 0.502) = 0 
    [0.502, 0.502) = 0 
    [0.502, 0.502) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.501 s/op
     p(50.0000) =      0.501 s/op
     p(90.0000) =      0.502 s/op
     p(95.0000) =      0.502 s/op
     p(99.0000) =      0.502 s/op
     p(99.9000) =      0.502 s/op
     p(99.9900) =      0.502 s/op
     p(99.9990) =      0.502 s/op
     p(99.9999) =      0.502 s/op
    p(100.0000) =      0.502 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate":
  45.350 ±(99.9%) 0.022 MB/sec [Average]
  (min, avg, max) = (45.320, 45.350, 45.365), stdev = 0.015
  CI (99.9%): [45.327, 45.372] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm":
  47666104.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (47666104.000, 47666104.000, 47666104.000), stdev = 0.001
  CI (99.9%): [47666104.000, 47666104.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dinput=/lavaMD/input/lavaMD_127776.input -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7.199 s/op
# Warmup Iteration   2: 7.181 s/op
# Warmup Iteration   3: 5.936 s/op
# Warmup Iteration   4: 5.936 s/op
# Warmup Iteration   5: 5.936 s/op
# Warmup Iteration   6: 5.936 s/op
# Warmup Iteration   7: 5.936 s/op
# Warmup Iteration   8: 5.937 s/op
# Warmup Iteration   9: 5.936 s/op
# Warmup Iteration  10: 5.936 s/op
Iteration   1: 5.936 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.936 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.936 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.936 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.936 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.935 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 318654.245 bytes/s; standard:  0.232 s, 73210 bytes, 912 methods; osr:  0.008 s, 3532 bytes, 4 methods; nmethods_size: 1534896 bytes; nmethods_code_size: 1083168 bytes}
  C2 {speed: 59201.227 bytes/s; standard:  0.277 s, 15778 bytes, 95 methods; osr:  0.067 s, 4563 bytes, 7 methods; nmethods_size: 135328 bytes; nmethods_code_size: 83264 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 110396.921 bytes/s; standard:  0.006 s, 684 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33848 bytes; nmethods_code_size: 21440 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 324153.518 bytes/s; standard:  0.226 s, 72526 bytes, 771 methods; osr:  0.008 s, 3532 bytes, 4 methods; nmethods_size: 1501048 bytes; nmethods_code_size: 1061728 bytes}
  Tier4 {speed: 59201.227 bytes/s; standard:  0.277 s, 15778 bytes, 95 methods; osr:  0.067 s, 4563 bytes, 7 methods; nmethods_size: 135328 bytes; nmethods_code_size: 83264 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.585 s
    Standard compilation   :   0.509 s, Average : 0.001 s
    Bailed out compilation :   0.001 s, Average : 0.001 s
    On stack replacement   :   0.075 s, Average : 0.007 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.240 s
       Setup time:            0.001 s
       Build HIR:             0.098 s
         Parse:                 0.076 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.090 s
         LIR Gen:               0.020 s
         Linear Scan:           0.069 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.020 s
       Other:                 0.006 s

    C2 Compile Time:        0.346 s
       Parse:                 0.042 s
       Optimize:              0.120 s
         Escape Analysis:       0.004 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.077 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.017 s
       Matcher:                    0.022 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.027 s
       Regalloc:              0.113 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.022 s
         Compute Liveness:      0.035 s
         Regalloc Split:        0.010 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.017 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1018 methods
    Standard compilation    :     1007 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    97083 bytes
    Standard compilation    :    88988 bytes
    On stack replacement    :     8095 bytes
  Average compilation speed :   165848 bytes/s

  nmethod code size         :  1670224 bytes
  nmethod total size        :  1166432 bytes


Result "jvbench.lavaMD.LavaMDBenchmark.serial":
  N = 10
  mean =      5.935 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [5.935, 5.935) = 1 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 2 
    [5.935, 5.935) = 0 
    [5.935, 5.935) = 1 
    [5.935, 5.935) = 1 
    [5.935, 5.935) = 0 
    [5.935, 5.936) = 0 
    [5.936, 5.936) = 0 
    [5.936, 5.936) = 2 
    [5.936, 5.936) = 1 
    [5.936, 5.936) = 0 
    [5.936, 5.936) = 0 
    [5.936, 5.936) = 1 
    [5.936, 5.936) = 0 
    [5.936, 5.936) = 0 
    [5.936, 5.936) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.935 s/op
     p(50.0000) =      5.935 s/op
     p(90.0000) =      5.936 s/op
     p(95.0000) =      5.936 s/op
     p(99.0000) =      5.936 s/op
     p(99.9000) =      5.936 s/op
     p(99.9900) =      5.936 s/op
     p(99.9990) =      5.936 s/op
     p(99.9999) =      5.936 s/op
    p(100.0000) =      5.936 s/op

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:05:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                               Mode  Cnt         Score    Error   Units
lavaMD.LavaMDBenchmark.autoVec                            ss   10         5.934 ±  0.001    s/op
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate             ss   10        ≈ 10⁻⁴           MB/sec
lavaMD.LavaMDBenchmark.autoVec:·gc.alloc.rate.norm        ss   10       507.200 ± 15.299    B/op
lavaMD.LavaMDBenchmark.autoVec:·gc.count                  ss   10           ≈ 0           counts
lavaMD.LavaMDBenchmark.explicitVec                        ss   10         0.498 ±  0.001    s/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate         ss   10        45.514 ±  0.027  MB/sec
lavaMD.LavaMDBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  47666104.000 ±  0.001    B/op
lavaMD.LavaMDBenchmark.explicitVec:·gc.count              ss   10           ≈ 0           counts
lavaMD.LavaMDBenchmark.fullVec                            ss   10         0.501 ±  0.001    s/op
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate             ss   10        45.350 ±  0.022  MB/sec
lavaMD.LavaMDBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  47666104.000 ±  0.001    B/op
lavaMD.LavaMDBenchmark.fullVec:·gc.count                  ss   10           ≈ 0           counts
lavaMD.LavaMDBenchmark.serial                             ss   10         5.935 ±  0.001    s/op
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate              ss   10        ≈ 10⁻⁴           MB/sec
lavaMD.LavaMDBenchmark.serial:·gc.alloc.rate.norm         ss   10       507.200 ± 15.299    B/op
lavaMD.LavaMDBenchmark.serial:·gc.count                   ss   10           ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_21:35:28/lavaMD/LavaMDBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 334506.554 bytes/s; standard:  0.314 s, 105182 bytes, 1260 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2153992 bytes; nmethods_code_size: 1522016 bytes}
  C2 {speed: 48352.560 bytes/s; standard:  0.313 s, 15355 bytes, 116 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 133352 bytes; nmethods_code_size: 83776 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 108938.263 bytes/s; standard:  0.007 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 339319.273 bytes/s; standard:  0.308 s, 104462 bytes, 1108 methods; osr:  0.002 s, 649 bytes, 1 methods; nmethods_size: 2117360 bytes; nmethods_code_size: 1498912 bytes}
  Tier4 {speed: 48352.560 bytes/s; standard:  0.313 s, 15355 bytes, 116 methods; osr:  0.006 s, 66 bytes, 2 methods; nmethods_size: 133352 bytes; nmethods_code_size: 83776 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.635 s
    Standard compilation   :   0.627 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.008 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.313 s
       Setup time:            0.001 s
       Build HIR:             0.116 s
         Parse:                 0.087 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.127 s
         LIR Gen:               0.029 s
         Linear Scan:           0.098 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.028 s
       Other:                 0.006 s

    C2 Compile Time:        0.321 s
       Parse:                 0.043 s
       Optimize:              0.087 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.057 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.023 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.029 s
       Regalloc:              0.118 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.021 s
         Compute Liveness:      0.037 s
         Regalloc Split:        0.013 s
         Postalloc Copy Rem:    0.021 s
         Merge multidefs:       0.010 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.005 s
         Select:                0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.019 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1379 methods
    Standard compilation    :     1376 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   121252 bytes
    Standard compilation    :   120537 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   190855 bytes/s

  nmethod code size         :  2287344 bytes
  nmethod total size        :  1605792 bytes
