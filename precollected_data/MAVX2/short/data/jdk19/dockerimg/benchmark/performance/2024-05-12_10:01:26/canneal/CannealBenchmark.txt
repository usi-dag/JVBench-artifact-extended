# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.388 s/op
# Warmup Iteration   2: 2.405 s/op
# Warmup Iteration   3: 2.418 s/op
# Warmup Iteration   4: 2.438 s/op
# Warmup Iteration   5: 2.455 s/op
# Warmup Iteration   6: 2.469 s/op
# Warmup Iteration   7: 2.474 s/op
# Warmup Iteration   8: 2.484 s/op
# Warmup Iteration   9: 2.490 s/op
# Warmup Iteration  10: 2.492 s/op
Iteration   1: 2.497 s/op
Iteration   2: 2.498 s/op
Iteration   3: 2.499 s/op
Iteration   4: 2.502 s/op
Iteration   5: 2.501 s/op
Iteration   6: 2.520 s/op
Iteration   7: 2.511 s/op
Iteration   8: 2.512 s/op
Iteration   9: 2.511 s/op
Iteration  10: 2.520 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 344590.317 bytes/s; standard:  0.195 s, 65961 bytes, 800 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 1365784 bytes; nmethods_code_size: 964480 bytes}
  C2 {speed: 64043.753 bytes/s; standard:  0.687 s, 42179 bytes, 163 methods; osr:  0.179 s, 13301 bytes, 13 methods; nmethods_size: 392216 bytes; nmethods_code_size: 240096 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 147561.949 bytes/s; standard:  0.004 s, 594 bytes, 122 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 29232 bytes; nmethods_code_size: 18496 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 348566.446 bytes/s; standard:  0.191 s, 65367 bytes, 678 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 1336552 bytes; nmethods_code_size: 945984 bytes}
  Tier4 {speed: 64043.753 bytes/s; standard:  0.687 s, 42179 bytes, 163 methods; osr:  0.179 s, 13301 bytes, 13 methods; nmethods_size: 392216 bytes; nmethods_code_size: 240096 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.070 s
    Standard compilation   :   0.882 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.188 s, Average : 0.009 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.202 s
       Setup time:            0.001 s
       Build HIR:             0.066 s
         Parse:                 0.054 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.051 s
         LIR Gen:               0.010 s
         Linear Scan:           0.040 s
         Other:                 0.001 s
       Code Emission:         0.016 s
       Code Installation:     0.065 s
       Other:                 0.004 s

    C2 Compile Time:        0.867 s
       Parse:                 0.101 s
       Optimize:              0.280 s
         Escape Analysis:       0.009 s
           Conn Graph:            0.006 s
           Macro Eliminate:       0.003 s
         GVN 1:                 0.027 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.003 s
         IdealLoop:             0.185 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.009 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.005 s
         Other:                 0.036 s
       Matcher:                    0.050 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.055 s
       Regalloc:              0.263 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.058 s
         Compute Liveness:      0.081 s
         Regalloc Split:        0.027 s
         Postalloc Copy Rem:    0.037 s
         Merge multidefs:       0.006 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.009 s
         Coalesce 2:            0.003 s
         Coalesce 3:            0.004 s
         Cache LRG:             0.001 s
         Simplify:              0.013 s
         Select:                0.017 s
         Other:                 0.003 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.110 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.007 s
         Build OOP maps:        0.011 s
         Fill buffer:           0.011 s
         Code Installation:     0.004 s
         Other:                 0.078 s
       Other:                 0.000 s

  Total compiled methods    :      984 methods
    Standard compilation    :      963 methods
    On stack replacement    :       21 methods
  Total compiled bytecodes  :   125603 bytes
    Standard compilation    :   108140 bytes
    On stack replacement    :    17463 bytes
  Average compilation speed :   117410 bytes/s

  nmethod code size         :  1758000 bytes
  nmethod total size        :  1204576 bytes


Result "jvbench.canneal.CannealBenchmark.autoVec":
  N = 10
  mean =      2.507 Â±(99.9%) 0.013 s/op

  Histogram, s/op:
    [2.490, 2.493) = 0 
    [2.493, 2.495) = 0 
    [2.495, 2.498) = 1 
    [2.498, 2.500) = 2 
    [2.500, 2.503) = 2 
    [2.503, 2.505) = 0 
    [2.505, 2.508) = 0 
    [2.508, 2.510) = 0 
    [2.510, 2.513) = 3 
    [2.513, 2.515) = 0 
    [2.515, 2.518) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.497 s/op
     p(50.0000) =      2.507 s/op
     p(90.0000) =      2.520 s/op
     p(95.0000) =      2.520 s/op
     p(99.0000) =      2.520 s/op
     p(99.9000) =      2.520 s/op
     p(99.9900) =      2.520 s/op
     p(99.9990) =      2.520 s/op
     p(99.9999) =      2.520 s/op
    p(100.0000) =      2.520 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:02:49
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.051 s/op
# Warmup Iteration   2: 1.763 s/op
# Warmup Iteration   3: 1.650 s/op
# Warmup Iteration   4: 1.835 s/op
# Warmup Iteration   5: 1.956 s/op
# Warmup Iteration   6: 1.721 s/op
# Warmup Iteration   7: 1.689 s/op
# Warmup Iteration   8: 1.688 s/op
# Warmup Iteration   9: 1.720 s/op
# Warmup Iteration  10: 1.687 s/op
Iteration   1: 1.688 s/op
Iteration   2: 1.742 s/op
Iteration   3: 1.695 s/op
Iteration   4: 1.692 s/op
Iteration   5: 1.688 s/op
Iteration   6: 1.720 s/op
Iteration   7: 1.692 s/op
Iteration   8: 1.697 s/op
Iteration   9: 1.727 s/op
Iteration  10: 1.702 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 282479.433 bytes/s; standard:  0.312 s, 86518 bytes, 1114 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 2259728 bytes; nmethods_code_size: 1630624 bytes}
  C2 {speed: 52263.797 bytes/s; standard:  1.245 s, 62543 bytes, 256 methods; osr:  0.206 s, 13277 bytes, 20 methods; nmethods_size: 554088 bytes; nmethods_code_size: 339680 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 131709.177 bytes/s; standard:  0.005 s, 649 bytes, 133 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 31800 bytes; nmethods_code_size: 20096 bytes}
  Tier2 {speed: 504290.016 bytes/s; standard:  0.000 s, 71 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1288 bytes; nmethods_code_size: 896 bytes}
  Tier3 {speed: 284732.015 bytes/s; standard:  0.307 s, 85798 bytes, 980 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 2226640 bytes; nmethods_code_size: 1609632 bytes}
  Tier4 {speed: 52263.797 bytes/s; standard:  1.245 s, 62543 bytes, 256 methods; osr:  0.206 s, 13277 bytes, 20 methods; nmethods_size: 554088 bytes; nmethods_code_size: 339680 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.772 s
    Standard compilation   :   1.557 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.215 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.319 s
       Setup time:            0.001 s
       Build HIR:             0.104 s
         Parse:                 0.086 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.080 s
         LIR Gen:               0.016 s
         Linear Scan:           0.063 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.103 s
       Other:                 0.006 s

    C2 Compile Time:        1.450 s
       Parse:                 0.174 s
       Optimize:              0.571 s
         Escape Analysis:       0.015 s
           Conn Graph:            0.010 s
           Macro Eliminate:       0.005 s
         GVN 1:                 0.037 s
         Incremental Inline:    0.009 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.005 s)
          (Prune Useless:         0.001 s)
           Other:                 0.009 s
         Vector:                0.007 s
           Box elimination:     0.007 s
             IGVN:              0.002 s
             Prune Useless:     0.001 s
         Renumber Live:         0.003 s
         IdealLoop:             0.358 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.005 s
         GVN 2:                 0.003 s
         Macro Expand:          0.046 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.007 s
         Other:                 0.081 s
       Matcher:                    0.065 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.175 s
       Regalloc:              0.350 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.006 s
         Build IFG (phys):      0.077 s
         Compute Liveness:      0.109 s
         Regalloc Split:        0.036 s
         Postalloc Copy Rem:    0.049 s
         Merge multidefs:       0.008 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.012 s
         Coalesce 2:            0.004 s
         Coalesce 3:            0.005 s
         Cache LRG:             0.001 s
         Simplify:              0.016 s
         Select:                0.022 s
         Other:                 0.004 s
       Block Ordering:        0.005 s
       Peephole:              0.001 s
       Code Emission:           0.104 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.010 s
         Build OOP maps:        0.015 s
         Fill buffer:           0.015 s
         Code Installation:     0.013 s
         Other:                 0.052 s

  Total compiled methods    :     1398 methods
    Standard compilation    :     1370 methods
    On stack replacement    :       28 methods
  Total compiled bytecodes  :   166500 bytes
    Standard compilation    :   149061 bytes
    On stack replacement    :    17439 bytes
  Average compilation speed :    93975 bytes/s

  nmethod code size         :  2813816 bytes
  nmethod total size        :  1970304 bytes


Result "jvbench.canneal.CannealBenchmark.explicitVec":
  N = 10
  mean =      1.704 Â±(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.680, 1.685) = 0 
    [1.685, 1.690) = 2 
    [1.690, 1.695) = 2 
    [1.695, 1.700) = 2 
    [1.700, 1.705) = 1 
    [1.705, 1.710) = 0 
    [1.710, 1.715) = 0 
    [1.715, 1.720) = 1 
    [1.720, 1.725) = 0 
    [1.725, 1.730) = 1 
    [1.730, 1.735) = 0 
    [1.735, 1.740) = 0 
    [1.740, 1.745) = 1 
    [1.745, 1.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.688 s/op
     p(50.0000) =      1.696 s/op
     p(90.0000) =      1.740 s/op
     p(95.0000) =      1.742 s/op
     p(99.0000) =      1.742 s/op
     p(99.9000) =      1.742 s/op
     p(99.9900) =      1.742 s/op
     p(99.9990) =      1.742 s/op
     p(99.9999) =      1.742 s/op
    p(100.0000) =      1.742 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:01:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.876 s/op
# Warmup Iteration   2: 1.822 s/op
# Warmup Iteration   3: 1.636 s/op
# Warmup Iteration   4: 1.774 s/op
# Warmup Iteration   5: 1.887 s/op
# Warmup Iteration   6: 1.645 s/op
# Warmup Iteration   7: 1.648 s/op
# Warmup Iteration   8: 1.684 s/op
# Warmup Iteration   9: 1.729 s/op
# Warmup Iteration  10: 1.651 s/op
Iteration   1: 1.653 s/op
Iteration   2: 1.687 s/op
Iteration   3: 1.651 s/op
Iteration   4: 1.658 s/op
Iteration   5: 1.690 s/op
Iteration   6: 1.655 s/op
Iteration   7: 1.656 s/op
Iteration   8: 1.660 s/op
Iteration   9: 1.697 s/op
Iteration  10: 1.662 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 402912.560 bytes/s; standard:  0.216 s, 86387 bytes, 1115 methods; osr:  0.012 s, 5518 bytes, 10 methods; nmethods_size: 2218360 bytes; nmethods_code_size: 1596384 bytes}
  C2 {speed: 60562.619 bytes/s; standard:  0.936 s, 56542 bytes, 245 methods; osr:  0.293 s, 17916 bytes, 20 methods; nmethods_size: 558456 bytes; nmethods_code_size: 339296 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 141810.498 bytes/s; standard:  0.005 s, 649 bytes, 133 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 31800 bytes; nmethods_code_size: 20096 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 408258.454 bytes/s; standard:  0.211 s, 85738 bytes, 982 methods; osr:  0.012 s, 5518 bytes, 10 methods; nmethods_size: 2186560 bytes; nmethods_code_size: 1576288 bytes}
  Tier4 {speed: 60562.619 bytes/s; standard:  0.936 s, 56542 bytes, 245 methods; osr:  0.293 s, 17916 bytes, 20 methods; nmethods_size: 558456 bytes; nmethods_code_size: 339296 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.458 s
    Standard compilation   :   1.152 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.305 s, Average : 0.010 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.226 s
       Setup time:            0.001 s
       Build HIR:             0.100 s
         Parse:                 0.082 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.076 s
         LIR Gen:               0.016 s
         Linear Scan:           0.060 s
         Other:                 0.001 s
       Code Emission:         0.024 s
       Code Installation:     0.020 s
       Other:                 0.005 s

    C2 Compile Time:        1.230 s
       Parse:                 0.153 s
       Optimize:              0.474 s
         Escape Analysis:       0.013 s
           Conn Graph:            0.009 s
           Macro Eliminate:       0.004 s
         GVN 1:                 0.037 s
         Incremental Inline:    0.007 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.005 s)
          (Prune Useless:         0.001 s)
           Other:                 0.007 s
         Vector:                0.005 s
           Box elimination:     0.005 s
             IGVN:              0.002 s
             Prune Useless:     0.001 s
         Renumber Live:         0.003 s
         IdealLoop:             0.305 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.005 s
         GVN 2:                 0.003 s
         Macro Expand:          0.036 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.006 s
         Other:                 0.052 s
       Matcher:                    0.061 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.109 s
       Regalloc:              0.376 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.006 s
         Build IFG (phys):      0.084 s
         Compute Liveness:      0.122 s
         Regalloc Split:        0.040 s
         Postalloc Copy Rem:    0.047 s
         Merge multidefs:       0.007 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.012 s
         Coalesce 2:            0.005 s
         Coalesce 3:            0.005 s
         Cache LRG:             0.001 s
         Simplify:              0.018 s
         Select:                0.023 s
         Other:                 0.005 s
       Block Ordering:        0.005 s
       Peephole:              0.001 s
       Code Emission:           0.047 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.009 s
         Build OOP maps:        0.014 s
         Fill buffer:           0.014 s
         Code Installation:     0.005 s
         Other:                 0.005 s
       Other:                 0.000 s

  Total compiled methods    :     1390 methods
    Standard compilation    :     1360 methods
    On stack replacement    :       30 methods
  Total compiled bytecodes  :   166363 bytes
    Standard compilation    :   142929 bytes
    On stack replacement    :    23434 bytes
  Average compilation speed :   114139 bytes/s

  nmethod code size         :  2776816 bytes
  nmethod total size        :  1935680 bytes


Result "jvbench.canneal.CannealBenchmark.fullVec":
  N = 10
  mean =      1.667 Â±(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.650, 1.653) = 1 
    [1.653, 1.655) = 1 
    [1.655, 1.658) = 2 
    [1.658, 1.660) = 2 
    [1.660, 1.663) = 1 
    [1.663, 1.665) = 0 
    [1.665, 1.668) = 0 
    [1.668, 1.670) = 0 
    [1.670, 1.673) = 0 
    [1.673, 1.675) = 0 
    [1.675, 1.678) = 0 
    [1.678, 1.680) = 0 
    [1.680, 1.683) = 0 
    [1.683, 1.685) = 0 
    [1.685, 1.688) = 1 
    [1.688, 1.690) = 0 
    [1.690, 1.693) = 1 
    [1.693, 1.695) = 0 
    [1.695, 1.698) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.651 s/op
     p(50.0000) =      1.659 s/op
     p(90.0000) =      1.696 s/op
     p(95.0000) =      1.697 s/op
     p(99.0000) =      1.697 s/op
     p(99.9000) =      1.697 s/op
     p(99.9900) =      1.697 s/op
     p(99.9990) =      1.697 s/op
     p(99.9999) =      1.697 s/op
    p(100.0000) =      1.697 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.356 s/op
# Warmup Iteration   2: 2.387 s/op
# Warmup Iteration   3: 2.423 s/op
# Warmup Iteration   4: 2.470 s/op
# Warmup Iteration   5: 2.467 s/op
# Warmup Iteration   6: 2.472 s/op
# Warmup Iteration   7: 2.484 s/op
# Warmup Iteration   8: 2.463 s/op
# Warmup Iteration   9: 2.479 s/op
# Warmup Iteration  10: 2.475 s/op
Iteration   1: 2.483 s/op
Iteration   2: 2.495 s/op
Iteration   3: 2.499 s/op
Iteration   4: 2.500 s/op
Iteration   5: 2.484 s/op
Iteration   6: 2.499 s/op
Iteration   7: 2.490 s/op
Iteration   8: 2.493 s/op
Iteration   9: 2.531 s/op
Iteration  10: 2.534 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 352101.004 bytes/s; standard:  0.192 s, 66780 bytes, 803 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 1378920 bytes; nmethods_code_size: 974656 bytes}
  C2 {speed: 68365.295 bytes/s; standard:  0.679 s, 43313 bytes, 162 methods; osr:  0.149 s, 13301 bytes, 13 methods; nmethods_size: 404496 bytes; nmethods_code_size: 246624 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 150025.989 bytes/s; standard:  0.004 s, 594 bytes, 122 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 29232 bytes; nmethods_code_size: 18496 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 356151.569 bytes/s; standard:  0.188 s, 66186 bytes, 681 methods; osr:  0.009 s, 4162 bytes, 8 methods; nmethods_size: 1349688 bytes; nmethods_code_size: 956160 bytes}
  Tier4 {speed: 68365.295 bytes/s; standard:  0.679 s, 43313 bytes, 162 methods; osr:  0.149 s, 13301 bytes, 13 methods; nmethods_size: 404496 bytes; nmethods_code_size: 246624 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.030 s
    Standard compilation   :   0.871 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.159 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.200 s
       Setup time:            0.001 s
       Build HIR:             0.062 s
         Parse:                 0.050 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.002 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.049 s
         LIR Gen:               0.010 s
         Linear Scan:           0.039 s
         Other:                 0.001 s
       Code Emission:         0.015 s
       Code Installation:     0.041 s
       Other:                 0.033 s

    C2 Compile Time:        0.829 s
       Parse:                 0.097 s
       Optimize:              0.314 s
         Escape Analysis:       0.012 s
           Conn Graph:            0.007 s
           Macro Eliminate:       0.004 s
         GVN 1:                 0.027 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.003 s
         IdealLoop:             0.212 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.011 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.040 s
       Matcher:                    0.045 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.054 s
       Regalloc:              0.279 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.061 s
         Compute Liveness:      0.088 s
         Regalloc Split:        0.034 s
         Postalloc Copy Rem:    0.033 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.009 s
         Coalesce 2:            0.004 s
         Coalesce 3:            0.004 s
         Cache LRG:             0.001 s
         Simplify:              0.013 s
         Select:                0.016 s
         Other:                 0.005 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.033 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.006 s
         Build OOP maps:        0.010 s
         Fill buffer:           0.010 s
         Code Installation:     0.003 s
         Other:                 0.004 s
       Other:                 0.000 s

  Total compiled methods    :      986 methods
    Standard compilation    :      965 methods
    On stack replacement    :       21 methods
  Total compiled bytecodes  :   127556 bytes
    Standard compilation    :   110093 bytes
    On stack replacement    :    17463 bytes
  Average compilation speed :   123889 bytes/s

  nmethod code size         :  1783416 bytes
  nmethod total size        :  1221280 bytes


Result "jvbench.canneal.CannealBenchmark.serial":
  N = 10
  mean =      2.501 Â±(99.9%) 0.027 s/op

  Histogram, s/op:
    [2.480, 2.485) = 2 
    [2.485, 2.490) = 0 
    [2.490, 2.495) = 2 
    [2.495, 2.500) = 3 
    [2.500, 2.505) = 1 
    [2.505, 2.510) = 0 
    [2.510, 2.515) = 0 
    [2.515, 2.520) = 0 
    [2.520, 2.525) = 0 
    [2.525, 2.530) = 0 
    [2.530, 2.535) = 2 
    [2.535, 2.540) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.483 s/op
     p(50.0000) =      2.497 s/op
     p(90.0000) =      2.534 s/op
     p(95.0000) =      2.534 s/op
     p(99.0000) =      2.534 s/op
     p(99.9000) =      2.534 s/op
     p(99.9900) =      2.534 s/op
     p(99.9990) =      2.534 s/op
     p(99.9999) =      2.534 s/op
    p(100.0000) =      2.534 s/op


# Run complete. Total time: 00:03:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                     Mode  Cnt  Score   Error  Units
CannealBenchmark.autoVec        ss   10  2.507 Â± 0.013   s/op
CannealBenchmark.explicitVec    ss   10  1.704 Â± 0.028   s/op
CannealBenchmark.fullVec        ss   10  1.667 Â± 0.026   s/op
CannealBenchmark.serial         ss   10  2.501 Â± 0.027   s/op

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-12_10:01:26/canneal/CannealBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 462791.134 bytes/s; standard:  0.193 s, 89036 bytes, 1122 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1762912 bytes; nmethods_code_size: 1249504 bytes}
  C2 {speed: 74809.372 bytes/s; standard:  0.172 s, 13134 bytes, 98 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 113472 bytes; nmethods_code_size: 71552 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 130404.741 bytes/s; standard:  0.005 s, 700 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35640 bytes; nmethods_code_size: 22464 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 472260.317 bytes/s; standard:  0.187 s, 88336 bytes, 974 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1727272 bytes; nmethods_code_size: 1227040 bytes}
  Tier4 {speed: 74809.372 bytes/s; standard:  0.172 s, 13134 bytes, 98 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 113472 bytes; nmethods_code_size: 71552 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.371 s
    Standard compilation   :   0.365 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.007 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.191 s
       Setup time:            0.001 s
       Build HIR:             0.074 s
         Parse:                 0.057 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.069 s
         LIR Gen:               0.014 s
         Linear Scan:           0.054 s
         Other:                 0.001 s
       Code Emission:         0.021 s
       Code Installation:     0.019 s
       Other:                 0.007 s

    C2 Compile Time:        0.179 s
       Parse:                 0.026 s
       Optimize:              0.054 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.035 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.014 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.015 s
       Regalloc:              0.057 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.011 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.007 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.010 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s

  Total compiled methods    :     1224 methods
    Standard compilation    :     1220 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   102976 bytes
    Standard compilation    :   102170 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :   277222 bytes/s

  nmethod code size         :  1876384 bytes
  nmethod total size        :  1321056 bytes
