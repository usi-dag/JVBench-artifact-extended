# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.065 s/op
# Warmup Iteration   2: 0.061 s/op
# Warmup Iteration   3: 0.057 s/op
# Warmup Iteration   4: 0.057 s/op
# Warmup Iteration   5: 0.058 s/op
# Warmup Iteration   6: 0.058 s/op
# Warmup Iteration   7: 0.057 s/op
# Warmup Iteration   8: 0.058 s/op
# Warmup Iteration   9: 0.057 s/op
# Warmup Iteration  10: 0.058 s/op
Iteration   1: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 210749.573 bytes/s; standard:  0.289 s, 60536 bytes, 851 methods; osr:  0.002 s, 824 bytes, 3 methods; nmethods_size: 1283432 bytes; nmethods_code_size: 914752 bytes}
  C2 {speed: 58699.928 bytes/s; standard:  0.064 s, 4268 bytes, 52 methods; osr:  0.012 s, 191 bytes, 4 methods; nmethods_size: 41144 bytes; nmethods_code_size: 26976 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 123112.346 bytes/s; standard:  0.005 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 212416.347 bytes/s; standard:  0.284 s, 59867 bytes, 713 methods; osr:  0.002 s, 824 bytes, 3 methods; nmethods_size: 1250232 bytes; nmethods_code_size: 893696 bytes}
  Tier4 {speed: 58699.928 bytes/s; standard:  0.064 s, 4268 bytes, 52 methods; osr:  0.012 s, 191 bytes, 4 methods; nmethods_size: 41144 bytes; nmethods_code_size: 26976 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.367 s
    Standard compilation   :   0.353 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.014 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.289 s
       Setup time:            0.001 s
       Build HIR:             0.064 s
         Parse:                 0.052 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.049 s
         LIR Gen:               0.011 s
         Linear Scan:           0.038 s
         Other:                 0.001 s
       Code Emission:         0.015 s
       Code Installation:     0.013 s
       Other:                 0.147 s

    C2 Compile Time:        0.077 s
       Parse:                 0.008 s
       Optimize:              0.032 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.002 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.024 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.000 s
         GVN 2:                 0.000 s
         Macro Expand:          0.001 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.004 s
       Matcher:                    0.006 s
         Post Selection Cleanup:   0.000 s
       Scheduler:                  0.006 s
       Regalloc:              0.019 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.000 s
         Build IFG (phys):      0.004 s
         Compute Liveness:      0.007 s
         Regalloc Split:        0.002 s
         Postalloc Copy Rem:    0.002 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.000 s
       Peephole:              0.000 s
       Code Emission:           0.006 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.001 s
         Fill buffer:           0.001 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :      910 methods
    Standard compilation    :      903 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    65819 bytes
    Standard compilation    :    64804 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :   179287 bytes/s

  nmethod code size         :  1324576 bytes
  nmethod total size        :   941728 bytes


Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.058 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.057, 0.057) = 1 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 1 
    [0.057, 0.058) = 1 
    [0.058, 0.058) = 3 
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 0 
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.057 s/op
     p(50.0000) =      0.058 s/op
     p(90.0000) =      0.058 s/op
     p(95.0000) =      0.058 s/op
     p(99.0000) =      0.058 s/op
     p(99.9000) =      0.058 s/op
     p(99.9900) =      0.058 s/op
     p(99.9990) =      0.058 s/op
     p(99.9999) =      0.058 s/op
    p(100.0000) =      0.058 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:00:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.110 s/op
# Warmup Iteration   2: 0.074 s/op
# Warmup Iteration   3: 0.057 s/op
# Warmup Iteration   4: 0.057 s/op
# Warmup Iteration   5: 0.057 s/op
# Warmup Iteration   6: 0.057 s/op
# Warmup Iteration   7: 0.057 s/op
# Warmup Iteration   8: 0.057 s/op
# Warmup Iteration   9: 0.057 s/op
# Warmup Iteration  10: 0.057 s/op
Iteration   1: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.056 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 406244.271 bytes/s; standard:  0.174 s, 70892 bytes, 1000 methods; osr:  0.003 s, 941 bytes, 3 methods; nmethods_size: 1593400 bytes; nmethods_code_size: 1140192 bytes}
  C2 {speed: 58622.622 bytes/s; standard:  0.118 s, 6889 bytes, 83 methods; osr:  0.022 s, 1322 bytes, 7 methods; nmethods_size: 77488 bytes; nmethods_code_size: 49760 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 140031.528 bytes/s; standard:  0.005 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 413977.841 bytes/s; standard:  0.169 s, 70193 bytes, 856 methods; osr:  0.003 s, 941 bytes, 3 methods; nmethods_size: 1558840 bytes; nmethods_code_size: 1118304 bytes}
  Tier4 {speed: 58622.622 bytes/s; standard:  0.118 s, 6889 bytes, 83 methods; osr:  0.022 s, 1322 bytes, 7 methods; nmethods_size: 77488 bytes; nmethods_code_size: 49760 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.317 s
    Standard compilation   :   0.292 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.025 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.175 s
       Setup time:            0.001 s
       Build HIR:             0.077 s
         Parse:                 0.064 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.057 s
         LIR Gen:               0.012 s
         Linear Scan:           0.044 s
         Other:                 0.001 s
       Code Emission:         0.018 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.141 s
       Parse:                 0.023 s
       Optimize:              0.055 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.001 s
           Box elimination:     0.001 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.039 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.009 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.010 s
       Regalloc:              0.032 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.007 s
         Compute Liveness:      0.012 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.003 s
         Other:                 0.001 s

  Total compiled methods    :     1093 methods
    Standard compilation    :     1083 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    80044 bytes
    Standard compilation    :    77781 bytes
    On stack replacement    :     2263 bytes
  Average compilation speed :   252594 bytes/s

  nmethod code size         :  1670888 bytes
  nmethod total size        :  1189952 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.057 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.056, 0.056) = 0 
    [0.056, 0.056) = 1 
    [0.056, 0.056) = 0 
    [0.056, 0.057) = 0 
    [0.057, 0.057) = 2 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 1 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 1 
    [0.057, 0.057) = 2 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 2 
    [0.057, 0.057) = 0 
    [0.057, 0.057) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.056 s/op
     p(50.0000) =      0.057 s/op
     p(90.0000) =      0.057 s/op
     p(95.0000) =      0.057 s/op
     p(99.0000) =      0.057 s/op
     p(99.9000) =      0.057 s/op
     p(99.9900) =      0.057 s/op
     p(99.9990) =      0.057 s/op
     p(99.9999) =      0.057 s/op
    p(100.0000) =      0.057 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:00:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.113 s/op
# Warmup Iteration   2: 0.074 s/op
# Warmup Iteration   3: 0.057 s/op
# Warmup Iteration   4: 0.057 s/op
# Warmup Iteration   5: 0.058 s/op
# Warmup Iteration   6: 0.058 s/op
# Warmup Iteration   7: 0.058 s/op
# Warmup Iteration   8: 0.058 s/op
# Warmup Iteration   9: 0.058 s/op
# Warmup Iteration  10: 0.058 s/op
Iteration   1: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 388771.141 bytes/s; standard:  0.181 s, 70616 bytes, 1000 methods; osr:  0.003 s, 941 bytes, 3 methods; nmethods_size: 1600400 bytes; nmethods_code_size: 1144640 bytes}
  C2 {speed: 60975.317 bytes/s; standard:  0.107 s, 6630 bytes, 79 methods; osr:  0.024 s, 1322 bytes, 7 methods; nmethods_size: 72456 bytes; nmethods_code_size: 46176 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 126474.518 bytes/s; standard:  0.006 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 396891.013 bytes/s; standard:  0.175 s, 69917 bytes, 856 methods; osr:  0.003 s, 941 bytes, 3 methods; nmethods_size: 1565840 bytes; nmethods_code_size: 1122752 bytes}
  Tier4 {speed: 60975.317 bytes/s; standard:  0.107 s, 6630 bytes, 79 methods; osr:  0.024 s, 1322 bytes, 7 methods; nmethods_size: 72456 bytes; nmethods_code_size: 46176 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.315 s
    Standard compilation   :   0.288 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.027 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.182 s
       Setup time:            0.001 s
       Build HIR:             0.081 s
         Parse:                 0.066 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.060 s
         LIR Gen:               0.013 s
         Linear Scan:           0.047 s
         Other:                 0.001 s
       Code Emission:         0.019 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.132 s
       Parse:                 0.023 s
       Optimize:              0.051 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.001 s
           Box elimination:     0.001 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.036 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.005 s
       Matcher:                    0.009 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.009 s
       Regalloc:              0.030 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.007 s
         Compute Liveness:      0.011 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.004 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.002 s

  Total compiled methods    :     1089 methods
    Standard compilation    :     1079 methods
    On stack replacement    :       10 methods
  Total compiled bytecodes  :    79509 bytes
    Standard compilation    :    77246 bytes
    On stack replacement    :     2263 bytes
  Average compilation speed :   252458 bytes/s

  nmethod code size         :  1672856 bytes
  nmethod total size        :  1190816 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.058 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 2 
    [0.058, 0.058) = 0 
    [0.058, 0.058) = 0 
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 0 
    [0.058, 0.058) = 2 
    [0.058, 0.058) = 1 
    [0.058, 0.058) = 2 
    [0.058, 0.058) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.058 s/op
     p(50.0000) =      0.058 s/op
     p(90.0000) =      0.058 s/op
     p(95.0000) =      0.058 s/op
     p(99.0000) =      0.058 s/op
     p(99.9000) =      0.058 s/op
     p(99.9900) =      0.058 s/op
     p(99.9990) =      0.058 s/op
     p(99.9999) =      0.058 s/op
    p(100.0000) =      0.058 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.074 s/op
# Warmup Iteration   2: 0.069 s/op
# Warmup Iteration   3: 0.066 s/op
# Warmup Iteration   4: 0.066 s/op
# Warmup Iteration   5: 0.067 s/op
# Warmup Iteration   6: 0.066 s/op
# Warmup Iteration   7: 0.066 s/op
# Warmup Iteration   8: 0.067 s/op
# Warmup Iteration   9: 0.066 s/op
# Warmup Iteration  10: 0.066 s/op
Iteration   1: 0.067 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.068 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.066 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.067 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.068 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 415914.913 bytes/s; standard:  0.145 s, 60343 bytes, 854 methods; osr:  0.002 s, 824 bytes, 3 methods; nmethods_size: 1280368 bytes; nmethods_code_size: 912096 bytes}
  C2 {speed: 63098.085 bytes/s; standard:  0.062 s, 4258 bytes, 51 methods; osr:  0.009 s, 191 bytes, 4 methods; nmethods_size: 41264 bytes; nmethods_code_size: 27360 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 135318.517 bytes/s; standard:  0.005 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 425675.792 bytes/s; standard:  0.140 s, 59674 bytes, 716 methods; osr:  0.002 s, 824 bytes, 3 methods; nmethods_size: 1247168 bytes; nmethods_code_size: 891040 bytes}
  Tier4 {speed: 63098.085 bytes/s; standard:  0.062 s, 4258 bytes, 51 methods; osr:  0.009 s, 191 bytes, 4 methods; nmethods_size: 41264 bytes; nmethods_code_size: 27360 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.218 s
    Standard compilation   :   0.207 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.010 s, Average : 0.001 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.146 s
       Setup time:            0.001 s
       Build HIR:             0.063 s
         Parse:                 0.051 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.002 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.048 s
         LIR Gen:               0.010 s
         Linear Scan:           0.037 s
         Other:                 0.001 s
       Code Emission:         0.015 s
       Code Installation:     0.014 s
       Other:                 0.004 s

    C2 Compile Time:        0.072 s
       Parse:                 0.008 s
       Optimize:              0.031 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.002 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.023 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.000 s
         GVN 2:                 0.000 s
         Macro Expand:          0.001 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.003 s
       Matcher:                    0.005 s
         Post Selection Cleanup:   0.000 s
       Scheduler:                  0.006 s
       Regalloc:              0.017 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.000 s
         Build IFG (phys):      0.004 s
         Compute Liveness:      0.006 s
         Regalloc Split:        0.002 s
         Postalloc Copy Rem:    0.002 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.000 s
       Peephole:              0.000 s
       Code Emission:           0.004 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.001 s
         Fill buffer:           0.001 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      912 methods
    Standard compilation    :      905 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    65616 bytes
    Standard compilation    :    64601 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :   300928 bytes/s

  nmethod code size         :  1321632 bytes
  nmethod total size        :   939456 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.067 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.065, 0.065) = 0 
    [0.065, 0.066) = 0 
    [0.066, 0.066) = 0 
    [0.066, 0.066) = 1 
    [0.066, 0.066) = 4 
    [0.066, 0.067) = 1 
    [0.067, 0.067) = 0 
    [0.067, 0.067) = 0 
    [0.067, 0.067) = 2 
    [0.067, 0.068) = 0 
    [0.068, 0.068) = 0 
    [0.068, 0.068) = 1 
    [0.068, 0.068) = 1 
    [0.068, 0.069) = 0 
    [0.069, 0.069) = 0 
    [0.069, 0.069) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.066 s/op
     p(50.0000) =      0.066 s/op
     p(90.0000) =      0.068 s/op
     p(95.0000) =      0.068 s/op
     p(99.0000) =      0.068 s/op
     p(99.9000) =      0.068 s/op
     p(99.9900) =      0.068 s/op
     p(99.9990) =      0.068 s/op
     p(99.9999) =      0.068 s/op
    p(100.0000) =      0.068 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt    Score    Error   Units
AxpyBenchmark.autoVec                            ss   10    0.058 ±  0.001    s/op
AxpyBenchmark.autoVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.explicitVec                        ss   10    0.057 ±  0.001    s/op
AxpyBenchmark.explicitVec:·gc.alloc.rate         ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
AxpyBenchmark.fullVec                            ss   10    0.058 ±  0.001    s/op
AxpyBenchmark.fullVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.serial                             ss   10    0.067 ±  0.001    s/op
AxpyBenchmark.serial:·gc.alloc.rate              ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.serial:·gc.alloc.rate.norm         ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-15_20:21:14/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 441079.611 bytes/s; standard:  0.239 s, 105207 bytes, 1262 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2142128 bytes; nmethods_code_size: 1512352 bytes}
  C2 {speed: 74238.536 bytes/s; standard:  0.200 s, 15099 bytes, 116 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 128472 bytes; nmethods_code_size: 80992 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 135928.126 bytes/s; standard:  0.005 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 447966.655 bytes/s; standard:  0.233 s, 104487 bytes, 1110 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 2105496 bytes; nmethods_code_size: 1489248 bytes}
  Tier4 {speed: 74238.536 bytes/s; standard:  0.200 s, 15099 bytes, 116 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 128472 bytes; nmethods_code_size: 80992 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.445 s
    Standard compilation   :   0.439 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.007 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.237 s
       Setup time:            0.001 s
       Build HIR:             0.094 s
         Parse:                 0.073 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.085 s
         LIR Gen:               0.018 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.026 s
       Code Installation:     0.023 s
       Other:                 0.009 s

    C2 Compile Time:        0.207 s
       Parse:                 0.032 s
       Optimize:              0.067 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.009 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.043 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.008 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.018 s
       Regalloc:              0.064 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.014 s
         Compute Liveness:      0.023 s
         Regalloc Split:        0.008 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.011 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1382 methods
    Standard compilation    :     1378 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   121112 bytes
    Standard compilation    :   120306 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :   271860 bytes/s

  nmethod code size         :  2270600 bytes
  nmethod total size        :  1593344 bytes
