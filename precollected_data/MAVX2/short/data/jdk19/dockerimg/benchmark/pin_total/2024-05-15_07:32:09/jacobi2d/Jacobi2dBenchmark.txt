# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 37.393 s/op
# Warmup Iteration   2: 36.782 s/op
# Warmup Iteration   3: 30.220 s/op
# Warmup Iteration   4: 34.555 s/op
# Warmup Iteration   5: 36.505 s/op
# Warmup Iteration   6: 36.609 s/op
# Warmup Iteration   7: 36.603 s/op
# Warmup Iteration   8: 36.701 s/op
# Warmup Iteration   9: 36.888 s/op
# Warmup Iteration  10: 7.638 s/op
Iteration   1: 7.647 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.065 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7.695 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7.654 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7.659 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7.628 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7.636 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7.608 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7.700 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7.615 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4264.511 bytes/s; standard: 14.955 s, 63294 bytes, 897 methods; osr:  0.145 s, 1099 bytes, 4 methods; nmethods_size: 1338256 bytes; nmethods_code_size: 952480 bytes}
  C2 {speed: 294.842 bytes/s; standard: 16.497 s, 5728 bytes, 61 methods; osr:  4.968 s, 601 bytes, 5 methods; nmethods_size: 61896 bytes; nmethods_code_size: 42528 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2136.422 bytes/s; standard:  0.330 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34840 bytes; nmethods_code_size: 22080 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4311.989 bytes/s; standard: 14.626 s, 62590 bytes, 752 methods; osr:  0.145 s, 1099 bytes, 4 methods; nmethods_size: 1303416 bytes; nmethods_code_size: 930400 bytes}
  Tier4 {speed: 294.842 bytes/s; standard: 16.497 s, 5728 bytes, 61 methods; osr:  4.968 s, 601 bytes, 5 methods; nmethods_size: 61896 bytes; nmethods_code_size: 42528 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  36.565 s
    Standard compilation   :  31.453 s, Average : 0.033 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   5.113 s, Average : 0.568 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       15.063 s
       Setup time:            0.071 s
       Build HIR:             7.899 s
         Parse:                 6.607 s
         Optimize blocks:       0.008 s
         GVN:                   0.426 s
         Null checks elim:      0.277 s
         Range checks elim:     0.234 s
         Other:                 0.347 s
       Emit LIR:              4.319 s
         LIR Gen:               1.803 s
         Linear Scan:           2.469 s
         Other:                 0.047 s
       Code Emission:         1.396 s
       Code Installation:     1.005 s
       Other:                 0.374 s

    C2 Compile Time:       23.809 s
       Parse:                 4.564 s
       Optimize:              8.619 s
         Escape Analysis:       0.415 s
           Conn Graph:            0.390 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.046 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.334 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.117 s
         GVN 2:                 0.046 s
         Macro Expand:          0.683 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.218 s
         Other:                 0.758 s
       Matcher:                    2.104 s
         Post Selection Cleanup:   0.141 s
       Scheduler:                  2.061 s
       Regalloc:              3.599 s
         Ctor Chaitin:          0.005 s
         Build IFG (virt):      0.100 s
         Build IFG (phys):      0.519 s
         Compute Liveness:      1.185 s
         Regalloc Split:        0.473 s
         Postalloc Copy Rem:    0.841 s
         Merge multidefs:       0.074 s
         Fixup Spills:          0.045 s
         Compact:               0.011 s
         Coalesce 1:            0.209 s
         Coalesce 2:            0.062 s
         Coalesce 3:            0.042 s
         Cache LRG:             0.005 s
         Simplify:              0.066 s
         Select:                0.108 s
       Block Ordering:        0.173 s
       Peephole:              0.035 s
       Code Emission:           2.067 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.628 s
         Build OOP maps:        0.329 s
         Fill buffer:           0.553 s
         Code Installation:     0.049 s
         Other:                 0.509 s
       Other:                 0.537 s

  Total compiled methods    :      967 methods
    Standard compilation    :      958 methods
    On stack replacement    :        9 methods
  Total compiled bytecodes  :    70722 bytes
    Standard compilation    :    69022 bytes
    On stack replacement    :     1700 bytes
  Average compilation speed :     1934 bytes/s

  nmethod code size         :  1400152 bytes
  nmethod total size        :   995008 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =      7.691 ±(99.9%) 0.204 s/op

  Histogram, s/op:
    [7.600, 7.625) = 2 
    [7.625, 7.650) = 3 
    [7.650, 7.675) = 2 
    [7.675, 7.700) = 2 
    [7.700, 7.725) = 0 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 0 
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 0 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.608 s/op
     p(50.0000) =      7.650 s/op
     p(90.0000) =      8.029 s/op
     p(95.0000) =      8.065 s/op
     p(99.0000) =      8.065 s/op
     p(99.9000) =      8.065 s/op
     p(99.9900) =      8.065 s/op
     p(99.9990) =      8.065 s/op
     p(99.9999) =      8.065 s/op
    p(100.0000) =      8.065 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm":
  1742.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1048.000, 1742.400, 7960.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5045.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:23:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 16.245 s/op
# Warmup Iteration   2: 3.065 s/op
# Warmup Iteration   3: 2.967 s/op
# Warmup Iteration   4: 3.011 s/op
# Warmup Iteration   5: 3.002 s/op
# Warmup Iteration   6: 2.945 s/op
# Warmup Iteration   7: 3.003 s/op
# Warmup Iteration   8: 2.972 s/op
# Warmup Iteration   9: 3.088 s/op
# Warmup Iteration  10: 3.006 s/op
Iteration   1: 2.964 s/op
                 ·gc.alloc.rate:      0.002 MB/sec
                 ·gc.alloc.rate.norm: 7976.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.949 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.990 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.951 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.989 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.950 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 3.003 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.981 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.131 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4212.028 bytes/s; standard: 17.076 s, 71882 bytes, 1046 methods; osr:  0.337 s, 1463 bytes, 4 methods; nmethods_size: 1685616 bytes; nmethods_code_size: 1207936 bytes}
  C2 {speed: 389.145 bytes/s; standard: 25.189 s, 9847 bytes, 97 methods; osr:  3.954 s, 1494 bytes, 7 methods; nmethods_size: 96216 bytes; nmethods_code_size: 62688 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3068.323 bytes/s; standard:  0.239 s, 734 bytes, 151 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36200 bytes; nmethods_code_size: 22912 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4227.959 bytes/s; standard: 16.837 s, 71148 bytes, 895 methods; osr:  0.337 s, 1463 bytes, 4 methods; nmethods_size: 1649416 bytes; nmethods_code_size: 1185024 bytes}
  Tier4 {speed: 389.145 bytes/s; standard: 25.189 s, 9847 bytes, 97 methods; osr:  3.954 s, 1494 bytes, 7 methods; nmethods_size: 96216 bytes; nmethods_code_size: 62688 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  46.589 s
    Standard compilation   :  42.265 s, Average : 0.037 s
    Bailed out compilation :   0.033 s, Average : 0.033 s
    On stack replacement   :   4.291 s, Average : 0.390 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       17.393 s
       Setup time:            0.104 s
       Build HIR:             9.547 s
         Parse:                 8.284 s
         Optimize blocks:       0.008 s
         GVN:                   0.463 s
         Null checks elim:      0.257 s
         Range checks elim:     0.239 s
         Other:                 0.295 s
       Emit LIR:              5.228 s
         LIR Gen:               2.144 s
         Linear Scan:           3.031 s
         Other:                 0.053 s
       Code Emission:         1.401 s
       Code Installation:     0.789 s
       Other:                 0.325 s

    C2 Compile Time:       31.500 s
       Parse:                 6.751 s
       Optimize:             11.364 s
         Escape Analysis:       0.556 s
           Conn Graph:            0.449 s
           Macro Eliminate:       0.042 s
         GVN 1:                 1.070 s
         Incremental Inline:    0.179 s
           IdealLoop:             0.000 s
          (IGVN:                  0.045 s)
          (Inline:                0.108 s)
          (Prune Useless:         0.021 s)
           Other:                 0.179 s
         Vector:                0.355 s
           Box elimination:     0.351 s
             IGVN:              0.050 s
             Prune Useless:     0.027 s
         Renumber Live:         0.021 s
         IdealLoop:             6.727 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.183 s
         GVN 2:                 0.049 s
         Macro Expand:          0.840 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.254 s
         Other:                 1.129 s
       Matcher:                    2.840 s
         Post Selection Cleanup:   0.171 s
       Scheduler:                  2.544 s
       Regalloc:              5.080 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.126 s
         Build IFG (phys):      0.719 s
         Compute Liveness:      1.747 s
         Regalloc Split:        0.692 s
         Postalloc Copy Rem:    1.254 s
         Merge multidefs:       0.110 s
         Fixup Spills:          0.063 s
         Compact:               0.011 s
         Coalesce 1:            0.274 s
         Coalesce 2:            0.089 s
         Coalesce 3:            0.021 s
         Cache LRG:             0.008 s
         Simplify:              0.086 s
         Select:                0.139 s
       Block Ordering:        0.220 s
       Peephole:              0.044 s
       Code Emission:           2.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.760 s
         Build OOP maps:        0.486 s
         Fill buffer:           0.586 s
         Code Installation:     0.050 s
         Other:                 0.131 s
       Other:                 0.594 s

  Total compiled methods    :     1154 methods
    Standard compilation    :     1143 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    84686 bytes
    Standard compilation    :    81729 bytes
    On stack replacement    :     2957 bytes
  Average compilation speed :     1817 bytes/s

  nmethod code size         :  1781832 bytes
  nmethod total size        :  1270624 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =      2.992 ±(99.9%) 0.081 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 2 
    [2.950, 2.975) = 2 
    [2.975, 3.000) = 3 
    [3.000, 3.025) = 2 
    [3.025, 3.050) = 0 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 0 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 1 
    [3.150, 3.175) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.949 s/op
     p(50.0000) =      2.985 s/op
     p(90.0000) =      3.119 s/op
     p(95.0000) =      3.131 s/op
     p(99.0000) =      3.131 s/op
     p(99.9000) =      3.131 s/op
     p(99.9900) =      3.131 s/op
     p(99.9990) =      3.131 s/op
     p(99.9999) =      3.131 s/op
    p(100.0000) =      3.131 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻³ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm":
  1758.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1064.000, 1758.400, 7976.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5061.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:10:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 16.569 s/op
# Warmup Iteration   2: 3.149 s/op
# Warmup Iteration   3: 2.956 s/op
# Warmup Iteration   4: 2.991 s/op
# Warmup Iteration   5: 2.982 s/op
# Warmup Iteration   6: 2.952 s/op
# Warmup Iteration   7: 2.949 s/op
# Warmup Iteration   8: 2.959 s/op
# Warmup Iteration   9: 3.011 s/op
# Warmup Iteration  10: 2.982 s/op
Iteration   1: 2.959 s/op
                 ·gc.alloc.rate:      0.002 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.978 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.026 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.973 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.988 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 3.075 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.952 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.949 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 3.021 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 3.121 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3852.186 bytes/s; standard: 18.639 s, 71233 bytes, 1029 methods; osr:  0.233 s, 1463 bytes, 4 methods; nmethods_size: 1684264 bytes; nmethods_code_size: 1206688 bytes}
  C2 {speed: 332.881 bytes/s; standard: 26.818 s, 9639 bytes, 93 methods; osr:  6.900 s, 1585 bytes, 8 methods; nmethods_size: 95544 bytes; nmethods_code_size: 61920 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2332.957 bytes/s; standard:  0.315 s, 734 bytes, 151 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36200 bytes; nmethods_code_size: 22912 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3877.944 bytes/s; standard: 18.324 s, 70499 bytes, 878 methods; osr:  0.233 s, 1463 bytes, 4 methods; nmethods_size: 1648064 bytes; nmethods_code_size: 1183776 bytes}
  Tier4 {speed: 332.881 bytes/s; standard: 26.818 s, 9639 bytes, 93 methods; osr:  6.900 s, 1585 bytes, 8 methods; nmethods_size: 95544 bytes; nmethods_code_size: 61920 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  52.622 s
    Standard compilation   :  45.456 s, Average : 0.041 s
    Bailed out compilation :   0.033 s, Average : 0.033 s
    On stack replacement   :   7.133 s, Average : 0.594 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       18.856 s
       Setup time:            0.111 s
       Build HIR:            10.456 s
         Parse:                 8.682 s
         Optimize blocks:       0.007 s
         GVN:                   0.641 s
         Null checks elim:      0.430 s
         Range checks elim:     0.348 s
         Other:                 0.349 s
       Emit LIR:              5.193 s
         LIR Gen:               2.096 s
         Linear Scan:           3.041 s
         Other:                 0.056 s
       Code Emission:         1.558 s
       Code Installation:     0.814 s
       Other:                 0.724 s

    C2 Compile Time:       36.119 s
       Parse:                 6.444 s
       Optimize:             11.830 s
         Escape Analysis:       0.569 s
           Conn Graph:            0.467 s
           Macro Eliminate:       0.032 s
         GVN 1:                 1.181 s
         Incremental Inline:    0.239 s
           IdealLoop:             0.000 s
          (IGVN:                  0.058 s)
          (Inline:                0.147 s)
          (Prune Useless:         0.028 s)
           Other:                 0.239 s
         Vector:                0.250 s
           Box elimination:     0.250 s
             IGVN:              0.044 s
             Prune Useless:     0.028 s
         Renumber Live:         0.023 s
         IdealLoop:             7.146 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.202 s
         GVN 2:                 0.042 s
         Macro Expand:          0.800 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.246 s
         Other:                 1.130 s
       Matcher:                    2.838 s
         Post Selection Cleanup:   0.196 s
       Scheduler:                  2.318 s
       Regalloc:              5.162 s
         Ctor Chaitin:          0.014 s
         Build IFG (virt):      0.097 s
         Build IFG (phys):      0.767 s
         Compute Liveness:      1.756 s
         Regalloc Split:        0.661 s
         Postalloc Copy Rem:    1.201 s
         Merge multidefs:       0.097 s
         Fixup Spills:          0.071 s
         Compact:               0.013 s
         Coalesce 1:            0.242 s
         Coalesce 2:            0.104 s
         Coalesce 3:            0.041 s
         Cache LRG:             0.010 s
         Simplify:              0.101 s
         Select:                0.147 s
       Block Ordering:        0.198 s
       Peephole:              0.048 s
       Code Emission:           6.593 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.826 s
         Build OOP maps:        0.437 s
         Fill buffer:           0.668 s
         Code Installation:     0.082 s
         Other:                 4.580 s
       Other:                 0.607 s

  Total compiled methods    :     1134 methods
    Standard compilation    :     1122 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    83920 bytes
    Standard compilation    :    80872 bytes
    On stack replacement    :     3048 bytes
  Average compilation speed :     1594 bytes/s

  nmethod code size         :  1779808 bytes
  nmethod total size        :  1268608 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =      3.004 ±(99.9%) 0.086 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 1 
    [2.950, 2.975) = 3 
    [2.975, 3.000) = 2 
    [3.000, 3.025) = 1 
    [3.025, 3.050) = 1 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 1 
    [3.100, 3.125) = 1 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.949 s/op
     p(50.0000) =      2.983 s/op
     p(90.0000) =      3.116 s/op
     p(95.0000) =      3.121 s/op
     p(99.0000) =      3.121 s/op
     p(99.9000) =      3.121 s/op
     p(99.9900) =      3.121 s/op
     p(99.9990) =      3.121 s/op
     p(99.9999) =      3.121 s/op
    p(100.0000) =      3.121 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻³ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm":
  1742.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1048.000, 1742.400, 7960.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5045.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:04:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 39.216 s/op
# Warmup Iteration   2: 38.668 s/op
# Warmup Iteration   3: 32.129 s/op
# Warmup Iteration   4: 36.439 s/op
# Warmup Iteration   5: 38.342 s/op
# Warmup Iteration   6: 38.271 s/op
# Warmup Iteration   7: 38.230 s/op
# Warmup Iteration   8: 38.294 s/op
# Warmup Iteration   9: 38.839 s/op
# Warmup Iteration  10: 11.323 s/op
Iteration   1: 11.303 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.301 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.349 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.313 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.306 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 11.308 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 11.293 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 11.299 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 11.434 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 11.296 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4007.560 bytes/s; standard: 15.934 s, 63343 bytes, 902 methods; osr:  0.146 s, 1099 bytes, 4 methods; nmethods_size: 1343424 bytes; nmethods_code_size: 956736 bytes}
  C2 {speed: 296.943 bytes/s; standard: 18.933 s, 5875 bytes, 64 methods; osr:  2.570 s, 510 bytes, 4 methods; nmethods_size: 63248 bytes; nmethods_code_size: 43328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2463.293 bytes/s; standard:  0.286 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34840 bytes; nmethods_code_size: 22080 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4035.504 bytes/s; standard: 15.648 s, 62639 bytes, 757 methods; osr:  0.146 s, 1099 bytes, 4 methods; nmethods_size: 1308584 bytes; nmethods_code_size: 934656 bytes}
  Tier4 {speed: 296.943 bytes/s; standard: 18.933 s, 5875 bytes, 64 methods; osr:  2.570 s, 510 bytes, 4 methods; nmethods_size: 63248 bytes; nmethods_code_size: 43328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  37.623 s
    Standard compilation   :  34.867 s, Average : 0.036 s
    Bailed out compilation :   0.041 s, Average : 0.041 s
    On stack replacement   :   2.716 s, Average : 0.339 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       16.040 s
       Setup time:            0.086 s
       Build HIR:             8.516 s
         Parse:                 7.118 s
         Optimize blocks:       0.007 s
         GVN:                   0.520 s
         Null checks elim:      0.289 s
         Range checks elim:     0.278 s
         Other:                 0.305 s
       Emit LIR:              4.965 s
         LIR Gen:               2.414 s
         Linear Scan:           2.469 s
         Other:                 0.081 s
       Code Emission:         1.240 s
       Code Installation:     0.985 s
       Other:                 0.248 s

    C2 Compile Time:       23.859 s
       Parse:                 4.311 s
       Optimize:              8.550 s
         Escape Analysis:       0.354 s
           Conn Graph:            0.330 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.125 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.172 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.155 s
         GVN 2:                 0.029 s
         Macro Expand:          0.586 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.187 s
         Other:                 0.940 s
       Matcher:                    2.097 s
         Post Selection Cleanup:   0.182 s
       Scheduler:                  2.033 s
       Regalloc:              4.051 s
         Ctor Chaitin:          0.015 s
         Build IFG (virt):      0.134 s
         Build IFG (phys):      0.559 s
         Compute Liveness:      1.350 s
         Regalloc Split:        0.575 s
         Postalloc Copy Rem:    0.852 s
         Merge multidefs:       0.094 s
         Fixup Spills:          0.040 s
         Compact:               0.013 s
         Coalesce 1:            0.223 s
         Coalesce 2:            0.078 s
         Coalesce 3:            0.033 s
         Cache LRG:             0.008 s
         Simplify:              0.068 s
         Select:                0.114 s
       Block Ordering:        0.217 s
       Peephole:              0.040 s
       Code Emission:           1.926 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.601 s
         Build OOP maps:        0.364 s
         Fill buffer:           0.529 s
         Code Installation:     0.047 s
         Other:                 0.385 s
       Other:                 0.587 s

  Total compiled methods    :      974 methods
    Standard compilation    :      966 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    70827 bytes
    Standard compilation    :    69218 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :     1882 bytes/s

  nmethod code size         :  1406672 bytes
  nmethod total size        :  1000064 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =     11.320 ±(99.9%) 0.065 s/op

  Histogram, s/op:
    [11.200, 11.225) = 0 
    [11.225, 11.250) = 0 
    [11.250, 11.275) = 0 
    [11.275, 11.300) = 3 
    [11.300, 11.325) = 5 
    [11.325, 11.350) = 1 
    [11.350, 11.375) = 0 
    [11.375, 11.400) = 0 
    [11.400, 11.425) = 0 
    [11.425, 11.450) = 1 
    [11.450, 11.475) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.293 s/op
     p(50.0000) =     11.305 s/op
     p(90.0000) =     11.426 s/op
     p(95.0000) =     11.434 s/op
     p(99.0000) =     11.434 s/op
     p(99.9000) =     11.434 s/op
     p(99.9900) =     11.434 s/op
     p(99.9990) =     11.434 s/op
     p(99.9999) =     11.434 s/op
    p(100.0000) =     11.434 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate.norm":
  1745.600 ±(99.9%) 3301.228 B/op [Average]
  (min, avg, max) = (1048.000, 1745.600, 7960.000), stdev = 2183.558
  CI (99.9%): [≈ 0, 5046.828] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:21:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt     Score      Error   Units
Jacobi2dBenchmark.autoVec                            ss   10     7.691 ±    0.204    s/op
Jacobi2dBenchmark.autoVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1742.400 ± 3302.902    B/op
Jacobi2dBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.explicitVec                        ss   10     2.992 ±    0.081    s/op
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate         ss   10    ≈ 10⁻³             MB/sec
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1758.400 ± 3302.902    B/op
Jacobi2dBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
Jacobi2dBenchmark.fullVec                            ss   10     3.004 ±    0.086    s/op
Jacobi2dBenchmark.fullVec:·gc.alloc.rate             ss   10    ≈ 10⁻³             MB/sec
Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1742.400 ± 3302.902    B/op
Jacobi2dBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.serial                             ss   10    11.320 ±    0.065    s/op
Jacobi2dBenchmark.serial:·gc.alloc.rate              ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.serial:·gc.alloc.rate.norm         ss   10  1745.600 ± 3301.228    B/op
Jacobi2dBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_total/2024-05-15_07:32:09/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5779.792 bytes/s; standard: 18.496 s, 107215 bytes, 1255 methods; osr:  0.166 s, 649 bytes, 1 methods; nmethods_size: 2161208 bytes; nmethods_code_size: 1529120 bytes}
  C2 {speed: 763.779 bytes/s; standard: 24.169 s, 18742 bytes, 123 methods; osr:  0.456 s, 66 bytes, 2 methods; nmethods_size: 161480 bytes; nmethods_code_size: 100960 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2873.617 bytes/s; standard:  0.248 s, 713 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36136 bytes; nmethods_code_size: 22784 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5818.951 bytes/s; standard: 18.248 s, 106502 bytes, 1105 methods; osr:  0.166 s, 649 bytes, 1 methods; nmethods_size: 2125072 bytes; nmethods_code_size: 1506336 bytes}
  Tier4 {speed: 763.779 bytes/s; standard: 24.169 s, 18742 bytes, 123 methods; osr:  0.456 s, 66 bytes, 2 methods; nmethods_size: 161480 bytes; nmethods_code_size: 100960 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  43.321 s
    Standard compilation   :  42.665 s, Average : 0.031 s
    Bailed out compilation :   0.033 s, Average : 0.033 s
    On stack replacement   :   0.622 s, Average : 0.207 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       18.631 s
       Setup time:            0.105 s
       Build HIR:             9.872 s
         Parse:                 8.063 s
         Optimize blocks:       0.007 s
         GVN:                   0.638 s
         Null checks elim:      0.350 s
         Range checks elim:     0.311 s
         Other:                 0.502 s
       Emit LIR:              5.929 s
         LIR Gen:               2.161 s
         Linear Scan:           3.703 s
         Other:                 0.065 s
       Code Emission:         1.630 s
       Code Installation:     0.669 s
       Other:                 0.426 s

    C2 Compile Time:       26.977 s
       Parse:                 5.454 s
       Optimize:              8.215 s
         Escape Analysis:       0.444 s
           Conn Graph:            0.419 s
           Macro Eliminate:       0.002 s
         GVN 1:                 1.129 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.014 s
         IdealLoop:             4.495 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.194 s
         GVN 2:                 0.047 s
         Macro Expand:          0.728 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.239 s
         Other:                 0.952 s
       Matcher:                    2.644 s
         Post Selection Cleanup:   0.244 s
       Scheduler:                  2.303 s
       Regalloc:              5.495 s
         Ctor Chaitin:          0.017 s
         Build IFG (virt):      0.115 s
         Build IFG (phys):      0.775 s
         Compute Liveness:      1.524 s
         Regalloc Split:        0.791 s
         Postalloc Copy Rem:    1.459 s
         Merge multidefs:       0.114 s
         Fixup Spills:          0.056 s
         Compact:               0.009 s
         Coalesce 1:            0.292 s
         Coalesce 2:            0.112 s
         Coalesce 3:            0.027 s
         Cache LRG:             0.009 s
         Simplify:              0.111 s
         Select:                0.159 s
       Block Ordering:        0.261 s
       Peephole:              0.046 s
       Code Emission:           1.928 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.748 s
         Build OOP maps:        0.459 s
         Fill buffer:           0.557 s
         Code Installation:     0.049 s
         Other:                 0.115 s
       Other:                 0.536 s

  Total compiled methods    :     1381 methods
    Standard compilation    :     1378 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   126672 bytes
    Standard compilation    :   125957 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     2924 bytes/s

  nmethod code size         :  2322688 bytes
  nmethod total size        :  1630080 bytes
