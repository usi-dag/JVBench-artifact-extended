# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 12.851 s/op
# Warmup Iteration   2: 11.631 s/op
# Warmup Iteration   3: 11.944 s/op
# Warmup Iteration   4: 12.161 s/op
# Warmup Iteration   5: 11.599 s/op
# Warmup Iteration   6: 11.585 s/op
# Warmup Iteration   7: 11.660 s/op
# Warmup Iteration   8: 11.648 s/op
# Warmup Iteration   9: 11.644 s/op
# Warmup Iteration  10: 5.818 s/op
Iteration   1: 5.828 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.818 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.807 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.806 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.818 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.774 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.768 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.766 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.799 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.810 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6628.340 bytes/s; standard:  9.905 s, 65366 bytes, 928 methods; osr:  0.122 s, 1099 bytes, 4 methods; nmethods_size: 1400184 bytes; nmethods_code_size: 997472 bytes}
  C2 {speed: 461.806 bytes/s; standard: 13.106 s, 5937 bytes, 64 methods; osr:  0.855 s, 510 bytes, 4 methods; nmethods_size: 63056 bytes; nmethods_code_size: 43040 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3108.173 bytes/s; standard:  0.231 s, 719 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35488 bytes; nmethods_code_size: 22464 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6711.466 bytes/s; standard:  9.674 s, 64647 bytes, 780 methods; osr:  0.122 s, 1099 bytes, 4 methods; nmethods_size: 1364696 bytes; nmethods_code_size: 975008 bytes}
  Tier4 {speed: 461.806 bytes/s; standard: 13.106 s, 5937 bytes, 64 methods; osr:  0.855 s, 510 bytes, 4 methods; nmethods_size: 63056 bytes; nmethods_code_size: 43040 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  23.988 s
    Standard compilation   :  23.011 s, Average : 0.023 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.977 s, Average : 0.122 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.006 s
       Setup time:            0.016 s
       Build HIR:             6.042 s
         Parse:                 5.212 s
         Optimize blocks:       0.005 s
         GVN:                   0.242 s
         Null checks elim:      0.182 s
         Range checks elim:     0.224 s
         Other:                 0.177 s
       Emit LIR:              2.406 s
         LIR Gen:               1.091 s
         Linear Scan:           1.283 s
         Other:                 0.032 s
       Code Emission:         0.847 s
       Code Installation:     0.471 s
       Other:                 0.224 s

    C2 Compile Time:       15.854 s
       Parse:                 3.627 s
       Optimize:              5.605 s
         Escape Analysis:       0.322 s
           Conn Graph:            0.297 s
           Macro Eliminate:       0.001 s
         GVN 1:                 0.839 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             3.038 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.098 s
         GVN 2:                 0.017 s
         Macro Expand:          0.542 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.136 s
         Other:                 0.611 s
       Matcher:                    1.457 s
         Post Selection Cleanup:   0.120 s
       Scheduler:                  1.122 s
       Regalloc:              2.101 s
         Ctor Chaitin:          0.007 s
         Build IFG (virt):      0.069 s
         Build IFG (phys):      0.314 s
         Compute Liveness:      0.566 s
         Regalloc Split:        0.620 s
         Postalloc Copy Rem:    0.187 s
         Merge multidefs:       0.045 s
         Fixup Spills:          0.047 s
         Compact:               0.025 s
         Coalesce 1:            0.125 s
         Coalesce 2:            0.065 s
         Coalesce 3:            0.014 s
         Cache LRG:             0.001 s
         Simplify:              0.025 s
         Select:                0.044 s
       Block Ordering:        0.147 s
       Peephole:              0.025 s
       Code Emission:           1.336 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.505 s
         Build OOP maps:        0.126 s
         Fill buffer:           0.425 s
         Code Installation:     0.062 s
         Other:                 0.218 s
       Other:                 0.374 s

  Total compiled methods    :     1000 methods
    Standard compilation    :      992 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72912 bytes
    Standard compilation    :    71303 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :     3039 bytes/s

  nmethod code size         :  1463240 bytes
  nmethod total size        :  1040512 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =      5.799 ±(99.9%) 0.034 s/op

  Histogram, s/op:
    [5.760, 5.765) = 0 
    [5.765, 5.770) = 2 
    [5.770, 5.775) = 1 
    [5.775, 5.780) = 0 
    [5.780, 5.785) = 0 
    [5.785, 5.790) = 0 
    [5.790, 5.795) = 0 
    [5.795, 5.800) = 1 
    [5.800, 5.805) = 0 
    [5.805, 5.810) = 3 
    [5.810, 5.815) = 0 
    [5.815, 5.820) = 2 
    [5.820, 5.825) = 0 
    [5.825, 5.830) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.766 s/op
     p(50.0000) =      5.806 s/op
     p(90.0000) =      5.827 s/op
     p(95.0000) =      5.828 s/op
     p(99.0000) =      5.828 s/op
     p(99.9000) =      5.828 s/op
     p(99.9900) =      5.828 s/op
     p(99.9990) =      5.828 s/op
     p(99.9999) =      5.828 s/op
    p(100.0000) =      5.828 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm":
  1745.600 ±(99.9%) 3318.201 B/op [Average]
  (min, avg, max) = (1048.000, 1745.600, 7992.000), stdev = 2194.784
  CI (99.9%): [≈ 0, 5063.801] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:10:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5.448 s/op
# Warmup Iteration   2: 2.696 s/op
# Warmup Iteration   3: 2.687 s/op
# Warmup Iteration   4: 2.687 s/op
# Warmup Iteration   5: 2.693 s/op
# Warmup Iteration   6: 2.686 s/op
# Warmup Iteration   7: 2.693 s/op
# Warmup Iteration   8: 2.684 s/op
# Warmup Iteration   9: 2.688 s/op
# Warmup Iteration  10: 2.685 s/op
Iteration   1: 2.711 s/op
                 ·gc.alloc.rate:      0.002 MB/sec
                 ·gc.alloc.rate.norm: 7976.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.683 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.688 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.686 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.696 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.689 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.700 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.686 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.693 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.686 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5763.007 bytes/s; standard: 12.599 s, 73223 bytes, 1059 methods; osr:  0.426 s, 1845 bytes, 5 methods; nmethods_size: 1717128 bytes; nmethods_code_size: 1226432 bytes}
  C2 {speed: 602.008 bytes/s; standard: 18.014 s, 10328 bytes, 106 methods; osr:  1.624 s, 1494 bytes, 7 methods; nmethods_size: 102232 bytes; nmethods_code_size: 66272 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3877.361 bytes/s; standard:  0.193 s, 749 bytes, 154 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36848 bytes; nmethods_code_size: 23296 bytes}
  Tier2 {speed: 1165.972 bytes/s; standard:  0.760 s, 886 bytes, 19 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 21424 bytes; nmethods_code_size: 12160 bytes}
  Tier3 {speed: 6082.524 bytes/s; standard: 11.646 s, 71588 bytes, 886 methods; osr:  0.426 s, 1845 bytes, 5 methods; nmethods_size: 1658856 bytes; nmethods_code_size: 1190976 bytes}
  Tier4 {speed: 602.008 bytes/s; standard: 18.014 s, 10328 bytes, 106 methods; osr:  1.624 s, 1494 bytes, 7 methods; nmethods_size: 102232 bytes; nmethods_code_size: 66272 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  32.772 s
    Standard compilation   :  30.613 s, Average : 0.026 s
    Bailed out compilation :   0.108 s, Average : 0.108 s
    On stack replacement   :   2.050 s, Average : 0.171 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.109 s
       Setup time:            0.021 s
       Build HIR:             8.494 s
         Parse:                 7.482 s
         Optimize blocks:       0.023 s
         GVN:                   0.325 s
         Null checks elim:      0.202 s
         Range checks elim:     0.230 s
         Other:                 0.231 s
       Emit LIR:              2.769 s
         LIR Gen:               1.566 s
         Linear Scan:           1.138 s
         Other:                 0.065 s
       Code Emission:         0.972 s
       Code Installation:     0.623 s
       Other:                 0.231 s

    C2 Compile Time:       21.403 s
       Parse:                 6.149 s
       Optimize:              7.458 s
         Escape Analysis:       0.589 s
           Conn Graph:            0.498 s
           Macro Eliminate:       0.032 s
         GVN 1:                 0.878 s
         Incremental Inline:    0.152 s
           IdealLoop:             0.000 s
          (IGVN:                  0.030 s)
          (Inline:                0.102 s)
          (Prune Useless:         0.014 s)
           Other:                 0.152 s
         Vector:                0.374 s
           Box elimination:     0.373 s
             IGVN:              0.085 s
             Prune Useless:     0.014 s
         Renumber Live:         0.013 s
         IdealLoop:             3.626 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.152 s
         GVN 2:                 0.022 s
         Macro Expand:          0.678 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.209 s
         Other:                 0.764 s
       Matcher:                    1.778 s
         Post Selection Cleanup:   0.125 s
       Scheduler:                  1.413 s
       Regalloc:              2.110 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.060 s
         Build IFG (phys):      0.285 s
         Compute Liveness:      0.643 s
         Regalloc Split:        0.420 s
         Postalloc Copy Rem:    0.240 s
         Merge multidefs:       0.037 s
         Fixup Spills:          0.075 s
         Compact:               0.005 s
         Coalesce 1:            0.183 s
         Coalesce 2:            0.081 s
         Coalesce 3:            0.031 s
         Cache LRG:             0.001 s
         Simplify:              0.040 s
         Select:                0.036 s
       Block Ordering:        0.233 s
       Peephole:              0.036 s
       Code Emission:           1.833 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.809 s
         Build OOP maps:        0.185 s
         Fill buffer:           0.572 s
         Code Installation:     0.075 s
         Other:                 0.192 s
       Other:                 0.318 s

  Total compiled methods    :     1177 methods
    Standard compilation    :     1165 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    86890 bytes
    Standard compilation    :    83551 bytes
    On stack replacement    :     3339 bytes
  Average compilation speed :     2651 bytes/s

  nmethod code size         :  1819360 bytes
  nmethod total size        :  1292704 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =      2.692 ±(99.9%) 0.013 s/op

  Histogram, s/op:
    [2.680, 2.683) = 0 
    [2.683, 2.685) = 1 
    [2.685, 2.688) = 3 
    [2.688, 2.690) = 2 
    [2.690, 2.693) = 0 
    [2.693, 2.695) = 1 
    [2.695, 2.698) = 1 
    [2.698, 2.700) = 1 
    [2.700, 2.703) = 0 
    [2.703, 2.705) = 0 
    [2.705, 2.708) = 0 
    [2.708, 2.710) = 0 
    [2.710, 2.713) = 1 
    [2.713, 2.715) = 0 
    [2.715, 2.718) = 0 
    [2.718, 2.720) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.683 s/op
     p(50.0000) =      2.688 s/op
     p(90.0000) =      2.710 s/op
     p(95.0000) =      2.711 s/op
     p(99.0000) =      2.711 s/op
     p(99.9000) =      2.711 s/op
     p(99.9900) =      2.711 s/op
     p(99.9990) =      2.711 s/op
     p(99.9999) =      2.711 s/op
    p(100.0000) =      2.711 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.001] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm":
  1758.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1064.000, 1758.400, 7976.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5061.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:04:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5.484 s/op
# Warmup Iteration   2: 2.778 s/op
# Warmup Iteration   3: 2.720 s/op
# Warmup Iteration   4: 2.712 s/op
# Warmup Iteration   5: 2.710 s/op
# Warmup Iteration   6: 2.713 s/op
# Warmup Iteration   7: 2.716 s/op
# Warmup Iteration   8: 2.711 s/op
# Warmup Iteration   9: 2.711 s/op
# Warmup Iteration  10: 2.706 s/op
Iteration   1: 2.719 s/op
                 ·gc.alloc.rate:      0.002 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.713 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.708 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.711 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.726 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 2.711 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 2.712 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 2.708 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 2.709 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 2.715 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 5805.657 bytes/s; standard: 12.743 s, 74670 bytes, 1062 methods; osr:  0.370 s, 1463 bytes, 4 methods; nmethods_size: 1703720 bytes; nmethods_code_size: 1216192 bytes}
  C2 {speed: 568.474 bytes/s; standard: 17.286 s, 10416 bytes, 107 methods; osr:  3.825 s, 1585 bytes, 8 methods; nmethods_size: 104144 bytes; nmethods_code_size: 67008 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4295.223 bytes/s; standard:  0.171 s, 734 bytes, 151 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36200 bytes; nmethods_code_size: 22912 bytes}
  Tier2 {speed: 707.370 bytes/s; standard:  1.241 s, 878 bytes, 27 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 17856 bytes; nmethods_code_size: 10144 bytes}
  Tier3 {speed: 6368.508 bytes/s; standard: 11.331 s, 73058 bytes, 884 methods; osr:  0.370 s, 1463 bytes, 4 methods; nmethods_size: 1649664 bytes; nmethods_code_size: 1183136 bytes}
  Tier4 {speed: 568.474 bytes/s; standard: 17.286 s, 10416 bytes, 107 methods; osr:  3.825 s, 1585 bytes, 8 methods; nmethods_size: 104144 bytes; nmethods_code_size: 67008 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  34.224 s
    Standard compilation   :  30.029 s, Average : 0.026 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.195 s, Average : 0.350 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       13.096 s
       Setup time:            0.025 s
       Build HIR:             8.548 s
         Parse:                 7.476 s
         Optimize blocks:       0.121 s
         GVN:                   0.280 s
         Null checks elim:      0.209 s
         Range checks elim:     0.194 s
         Other:                 0.268 s
       Emit LIR:              2.871 s
         LIR Gen:               1.669 s
         Linear Scan:           1.136 s
         Other:                 0.066 s
       Code Emission:         0.910 s
       Code Installation:     0.569 s
       Other:                 0.174 s

    C2 Compile Time:       22.854 s
       Parse:                 6.980 s
       Optimize:              7.996 s
         Escape Analysis:       0.567 s
           Conn Graph:            0.467 s
           Macro Eliminate:       0.104 s
         GVN 1:                 0.811 s
         Incremental Inline:    0.114 s
           IdealLoop:             0.000 s
          (IGVN:                  0.014 s)
          (Inline:                0.082 s)
          (Prune Useless:         0.015 s)
           Other:                 0.114 s
         Vector:                0.275 s
           Box elimination:     0.274 s
             IGVN:              0.029 s
             Prune Useless:     0.002 s
         Renumber Live:         0.008 s
         IdealLoop:             4.334 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.112 s
         GVN 2:                 0.019 s
         Macro Expand:          0.607 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.196 s
         Other:                 0.951 s
       Matcher:                    1.690 s
         Post Selection Cleanup:   0.138 s
       Scheduler:                  1.543 s
       Regalloc:              2.171 s
         Ctor Chaitin:          0.005 s
         Build IFG (virt):      0.056 s
         Build IFG (phys):      0.351 s
         Compute Liveness:      0.663 s
         Regalloc Split:        0.524 s
         Postalloc Copy Rem:    0.216 s
         Merge multidefs:       0.040 s
         Fixup Spills:          0.072 s
         Compact:               0.009 s
         Coalesce 1:            0.200 s
         Coalesce 2:            0.064 s
         Coalesce 3:            0.018 s
         Cache LRG:             0.001 s
         Simplify:              0.025 s
         Select:                0.039 s
       Block Ordering:        0.167 s
       Peephole:              0.028 s
       Code Emission:           1.831 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.761 s
         Build OOP maps:        0.144 s
         Fill buffer:           0.597 s
         Code Installation:     0.071 s
         Other:                 0.258 s
       Other:                 0.379 s

  Total compiled methods    :     1181 methods
    Standard compilation    :     1169 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    88134 bytes
    Standard compilation    :    85086 bytes
    On stack replacement    :     3048 bytes
  Average compilation speed :     2575 bytes/s

  nmethod code size         :  1807864 bytes
  nmethod total size        :  1283200 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =      2.713 ±(99.9%) 0.008 s/op

  Histogram, s/op:
    [2.700, 2.703) = 0 
    [2.703, 2.705) = 0 
    [2.705, 2.708) = 0 
    [2.708, 2.710) = 3 
    [2.710, 2.713) = 3 
    [2.713, 2.715) = 1 
    [2.715, 2.718) = 1 
    [2.718, 2.720) = 1 
    [2.720, 2.723) = 0 
    [2.723, 2.725) = 0 
    [2.725, 2.728) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.708 s/op
     p(50.0000) =      2.712 s/op
     p(90.0000) =      2.725 s/op
     p(95.0000) =      2.726 s/op
     p(99.0000) =      2.726 s/op
     p(99.9000) =      2.726 s/op
     p(99.9900) =      2.726 s/op
     p(99.9990) =      2.726 s/op
     p(99.9999) =      2.726 s/op
    p(100.0000) =      2.726 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.001] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm":
  1742.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1048.000, 1742.400, 7960.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5045.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:02:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 12.900 s/op
# Warmup Iteration   2: 11.960 s/op
# Warmup Iteration   3: 11.925 s/op
# Warmup Iteration   4: 12.270 s/op
# Warmup Iteration   5: 11.957 s/op
# Warmup Iteration   6: 11.927 s/op
# Warmup Iteration   7: 11.948 s/op
# Warmup Iteration   8: 11.940 s/op
# Warmup Iteration   9: 11.957 s/op
# Warmup Iteration  10: 6.077 s/op
Iteration   1: 6.074 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.081 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.071 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.065 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.088 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.067 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.069 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.068 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.081 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.085 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6380.674 bytes/s; standard: 10.252 s, 64955 bytes, 921 methods; osr:  0.100 s, 1099 bytes, 4 methods; nmethods_size: 1392016 bytes; nmethods_code_size: 991552 bytes}
  C2 {speed: 470.684 bytes/s; standard: 12.706 s, 5790 bytes, 63 methods; osr:  0.679 s, 510 bytes, 4 methods; nmethods_size: 62192 bytes; nmethods_code_size: 42560 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3534.393 bytes/s; standard:  0.203 s, 719 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35488 bytes; nmethods_code_size: 22464 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 6437.727 bytes/s; standard: 10.049 s, 64236 bytes, 773 methods; osr:  0.100 s, 1099 bytes, 4 methods; nmethods_size: 1356528 bytes; nmethods_code_size: 969088 bytes}
  Tier4 {speed: 470.684 bytes/s; standard: 12.706 s, 5790 bytes, 63 methods; osr:  0.679 s, 510 bytes, 4 methods; nmethods_size: 62192 bytes; nmethods_code_size: 42560 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  23.737 s
    Standard compilation   :  22.958 s, Average : 0.023 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.779 s, Average : 0.097 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.338 s
       Setup time:            0.024 s
       Build HIR:             6.447 s
         Parse:                 5.468 s
         Optimize blocks:       0.006 s
         GVN:                   0.305 s
         Null checks elim:      0.215 s
         Range checks elim:     0.173 s
         Other:                 0.281 s
       Emit LIR:              2.392 s
         LIR Gen:               1.362 s
         Linear Scan:           0.987 s
         Other:                 0.042 s
       Code Emission:         0.849 s
       Code Installation:     0.418 s
       Other:                 0.208 s

    C2 Compile Time:       15.052 s
       Parse:                 3.675 s
       Optimize:              5.141 s
         Escape Analysis:       0.277 s
           Conn Graph:            0.258 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.834 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             2.696 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.094 s
         GVN 2:                 0.015 s
         Macro Expand:          0.490 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.179 s
         Other:                 0.556 s
       Matcher:                    1.310 s
         Post Selection Cleanup:   0.086 s
       Scheduler:                  1.093 s
       Regalloc:              1.776 s
         Ctor Chaitin:          0.006 s
         Build IFG (virt):      0.073 s
         Build IFG (phys):      0.258 s
         Compute Liveness:      0.535 s
         Regalloc Split:        0.384 s
         Postalloc Copy Rem:    0.186 s
         Merge multidefs:       0.023 s
         Fixup Spills:          0.042 s
         Compact:               0.006 s
         Coalesce 1:            0.203 s
         Coalesce 2:            0.059 s
         Coalesce 3:            0.012 s
         Cache LRG:             0.001 s
         Simplify:              0.025 s
         Select:                0.035 s
       Block Ordering:        0.161 s
       Peephole:              0.023 s
       Code Emission:           1.467 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.501 s
         Build OOP maps:        0.125 s
         Fill buffer:           0.527 s
         Code Installation:     0.051 s
         Other:                 0.263 s
       Other:                 0.355 s

  Total compiled methods    :      992 methods
    Standard compilation    :      984 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72354 bytes
    Standard compilation    :    70745 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :     3048 bytes/s

  nmethod code size         :  1454208 bytes
  nmethod total size        :  1034112 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =      6.075 ±(99.9%) 0.013 s/op

  Histogram, s/op:
    [6.060, 6.063) = 0 
    [6.063, 6.065) = 1 
    [6.065, 6.068) = 1 
    [6.068, 6.070) = 2 
    [6.070, 6.073) = 1 
    [6.073, 6.075) = 1 
    [6.075, 6.078) = 0 
    [6.078, 6.080) = 0 
    [6.080, 6.083) = 2 
    [6.083, 6.085) = 0 
    [6.085, 6.088) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.065 s/op
     p(50.0000) =      6.072 s/op
     p(90.0000) =      6.088 s/op
     p(95.0000) =      6.088 s/op
     p(99.0000) =      6.088 s/op
     p(99.9000) =      6.088 s/op
     p(99.9900) =      6.088 s/op
     p(99.9990) =      6.088 s/op
     p(99.9999) =      6.088 s/op
    p(100.0000) =      6.088 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate.norm":
  1742.400 ±(99.9%) 3302.902 B/op [Average]
  (min, avg, max) = (1048.000, 1742.400, 7960.000), stdev = 2184.665
  CI (99.9%): [≈ 0, 5045.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:09:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt     Score      Error   Units
Jacobi2dBenchmark.autoVec                            ss   10     5.799 ±    0.034    s/op
Jacobi2dBenchmark.autoVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1745.600 ± 3318.201    B/op
Jacobi2dBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.explicitVec                        ss   10     2.692 ±    0.013    s/op
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate         ss   10     0.001 ±    0.001  MB/sec
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1758.400 ± 3302.902    B/op
Jacobi2dBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
Jacobi2dBenchmark.fullVec                            ss   10     2.713 ±    0.008    s/op
Jacobi2dBenchmark.fullVec:·gc.alloc.rate             ss   10     0.001 ±    0.001  MB/sec
Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1742.400 ± 3302.902    B/op
Jacobi2dBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.serial                             ss   10     6.075 ±    0.013    s/op
Jacobi2dBenchmark.serial:·gc.alloc.rate              ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.serial:·gc.alloc.rate.norm         ss   10  1742.400 ± 3302.902    B/op
Jacobi2dBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_vectorial/2024-05-15_16:29:00/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 9598.366 bytes/s; standard: 11.638 s, 112048 bytes, 1298 methods; osr:  0.103 s, 649 bytes, 1 methods; nmethods_size: 2254640 bytes; nmethods_code_size: 1595936 bytes}
  C2 {speed: 1148.803 bytes/s; standard: 13.346 s, 17926 bytes, 120 methods; osr:  2.395 s, 157 bytes, 3 methods; nmethods_size: 149744 bytes; nmethods_code_size: 94624 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4706.052 bytes/s; standard:  0.153 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 9662.957 bytes/s; standard: 11.485 s, 111328 bytes, 1146 methods; osr:  0.103 s, 649 bytes, 1 methods; nmethods_size: 2218008 bytes; nmethods_code_size: 1572832 bytes}
  Tier4 {speed: 1148.803 bytes/s; standard: 13.346 s, 17926 bytes, 120 methods; osr:  2.395 s, 157 bytes, 3 methods; nmethods_size: 149744 bytes; nmethods_code_size: 94624 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  27.482 s
    Standard compilation   :  24.984 s, Average : 0.018 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.498 s, Average : 0.624 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       11.715 s
       Setup time:            0.049 s
       Build HIR:             7.447 s
         Parse:                 6.555 s
         Optimize blocks:       0.005 s
         GVN:                   0.297 s
         Null checks elim:      0.210 s
         Range checks elim:     0.178 s
         Other:                 0.202 s
       Emit LIR:              2.542 s
         LIR Gen:               1.136 s
         Linear Scan:           1.369 s
         Other:                 0.036 s
       Code Emission:         0.984 s
       Code Installation:     0.548 s
       Other:                 0.145 s

    C2 Compile Time:       17.632 s
       Parse:                 4.271 s
       Optimize:              6.071 s
         Escape Analysis:       0.357 s
           Conn Graph:            0.336 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.929 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.010 s
         IdealLoop:             3.106 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.129 s
         GVN 2:                 0.025 s
         Macro Expand:          0.606 s
         Barrier Expand:        0.005 s
         Graph Reshape:         0.190 s
         Other:                 0.715 s
       Matcher:                    1.560 s
         Post Selection Cleanup:   0.111 s
       Scheduler:                  1.439 s
       Regalloc:              2.252 s
         Ctor Chaitin:          0.004 s
         Build IFG (virt):      0.063 s
         Build IFG (phys):      0.334 s
         Compute Liveness:      0.562 s
         Regalloc Split:        0.402 s
         Postalloc Copy Rem:    0.324 s
         Merge multidefs:       0.070 s
         Fixup Spills:          0.053 s
         Compact:               0.003 s
         Coalesce 1:            0.179 s
         Coalesce 2:            0.098 s
         Coalesce 3:            0.014 s
         Cache LRG:             0.001 s
         Simplify:              0.045 s
         Select:                0.059 s
         Other:                 0.041 s
       Block Ordering:        0.175 s
       Peephole:              0.029 s
       Code Emission:           1.454 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.693 s
         Build OOP maps:        0.164 s
         Fill buffer:           0.435 s
         Code Installation:     0.053 s
         Other:                 0.110 s
       Other:                 0.328 s

  Total compiled methods    :     1422 methods
    Standard compilation    :     1418 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   130780 bytes
    Standard compilation    :   129974 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     4758 bytes/s

  nmethod code size         :  2404384 bytes
  nmethod total size        :  1690560 bytes
