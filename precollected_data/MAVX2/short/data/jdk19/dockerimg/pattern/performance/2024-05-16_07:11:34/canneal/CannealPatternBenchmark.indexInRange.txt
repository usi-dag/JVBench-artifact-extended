# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3.356 s/op
# Warmup Iteration   2: 2.725 s/op
# Warmup Iteration   3: 2.748 s/op
# Warmup Iteration   4: 2.691 s/op
# Warmup Iteration   5: 2.792 s/op
# Warmup Iteration   6: 2.634 s/op
# Warmup Iteration   7: 2.640 s/op
# Warmup Iteration   8: 2.753 s/op
# Warmup Iteration   9: 2.687 s/op
# Warmup Iteration  10: 2.692 s/op
Iteration   1: 2.638 s/op
                 ·gc.alloc.rate:                   1473.825 MB/sec
                 ·gc.alloc.rate.norm:              4849859416.000 B/op
                 ·gc.churn.G1_Eden_Space:          2138.792 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     7038042112.000 B/op
                 ·gc.churn.G1_Survivor_Space:      15.038 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 49485264.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         73.000 ms

Iteration   2: 2.617 s/op
                 ·gc.alloc.rate:                   1482.901 MB/sec
                 ·gc.alloc.rate.norm:              4847229192.000 B/op
                 ·gc.churn.G1_Eden_Space:          1088.114 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3556769792.000 B/op
                 ·gc.churn.G1_Survivor_Space:      1.570 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 5132176.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         16.000 ms

Iteration   3: 2.655 s/op
                 ·gc.alloc.rate:                   1465.399 MB/sec
                 ·gc.alloc.rate.norm:              4849133632.000 B/op
                 ·gc.churn.G1_Eden_Space:          2152.233 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     7121928192.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.641 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2122512.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         25.000 ms

Iteration   4: 2.645 s/op
                 ·gc.alloc.rate:                   1470.008 MB/sec
                 ·gc.alloc.rate.norm:              4848381336.000 B/op
                 ·gc.churn.G1_Eden_Space:          1079.668 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3560964096.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.031 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 103480.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         12.000 ms

Iteration   5: 2.639 s/op
                 ·gc.alloc.rate:                   1472.280 MB/sec
                 ·gc.alloc.rate.norm:              4846417920.000 B/op
                 ·gc.churn.G1_Eden_Space:          1081.776 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3560964096.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 6608.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         12.000 ms

Iteration   6: 2.653 s/op
                 ·gc.alloc.rate:                   1465.721 MB/sec
                 ·gc.alloc.rate.norm:              4847685976.000 B/op
                 ·gc.churn.G1_Eden_Space:          2153.349 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     7121928192.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2704.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         22.000 ms

Iteration   7: 2.570 s/op
                 ·gc.alloc.rate:                   1505.553 MB/sec
                 ·gc.alloc.rate.norm:              4847382376.000 B/op
                 ·gc.churn.G1_Eden_Space:          1106.003 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     3560964096.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1424.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         11.000 ms

Iteration   8: 2.589 s/op
                 ·gc.alloc.rate:               1496.435 MB/sec
                 ·gc.alloc.rate.norm:          4848373792.000 B/op
                 ·gc.churn.G1_Eden_Space:      1099.080 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 3560964096.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     11.000 ms

Iteration   9: 2.586 s/op
                 ·gc.alloc.rate:                   1498.035 MB/sec
                 ·gc.alloc.rate.norm:              4848647896.000 B/op
                 ·gc.churn.G1_Eden_Space:          2200.386 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     7121928192.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 6192.000 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         21.000 ms

Iteration  10: 2.570 s/op
                 ·gc.alloc.rate:               1505.617 MB/sec
                 ·gc.alloc.rate.norm:          4848143248.000 B/op
                 ·gc.churn.G1_Eden_Space:      1105.876 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 3560964096.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     10.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 356778.638 bytes/s; standard:  0.301 s, 106344 bytes, 1422 methods; osr:  0.012 s, 5518 bytes, 10 methods; nmethods_size: 2898688 bytes; nmethods_code_size: 2083168 bytes}
  C2 {speed: 63496.259 bytes/s; standard:  1.024 s, 64219 bytes, 285 methods; osr:  0.225 s, 15081 bytes, 18 methods; nmethods_size: 611328 bytes; nmethods_code_size: 373440 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 140706.483 bytes/s; standard:  0.006 s, 869 bytes, 177 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 42392 bytes; nmethods_code_size: 26816 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 361120.348 bytes/s; standard:  0.295 s, 105475 bytes, 1245 methods; osr:  0.012 s, 5518 bytes, 10 methods; nmethods_size: 2856296 bytes; nmethods_code_size: 2056352 bytes}
  Tier4 {speed: 63496.259 bytes/s; standard:  1.024 s, 64219 bytes, 285 methods; osr:  0.225 s, 15081 bytes, 18 methods; nmethods_size: 611328 bytes; nmethods_code_size: 373440 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.562 s
    Standard compilation   :   1.325 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.238 s, Average : 0.008 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.310 s
       Setup time:            0.001 s
       Build HIR:             0.138 s
         Parse:                 0.114 s
         Optimize blocks:       0.000 s
         GVN:                   0.009 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.103 s
         LIR Gen:               0.021 s
         Linear Scan:           0.081 s
         Other:                 0.001 s
       Code Emission:         0.033 s
       Code Installation:     0.028 s
       Other:                 0.007 s

    C2 Compile Time:        1.249 s
       Parse:                 0.182 s
       Optimize:              0.487 s
         Escape Analysis:       0.014 s
           Conn Graph:            0.009 s
           Macro Eliminate:       0.004 s
         GVN 1:                 0.041 s
         Incremental Inline:    0.009 s
           IdealLoop:             0.000 s
          (IGVN:                  0.002 s)
          (Inline:                0.006 s)
          (Prune Useless:         0.001 s)
           Other:                 0.009 s
         Vector:                0.007 s
           Box elimination:     0.007 s
             IGVN:              0.002 s
             Prune Useless:     0.001 s
         Renumber Live:         0.003 s
         IdealLoop:             0.322 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.005 s
         GVN 2:                 0.003 s
         Macro Expand:          0.018 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.007 s
         Other:                 0.057 s
       Matcher:                    0.068 s
         Post Selection Cleanup:   0.005 s
       Scheduler:                  0.082 s
       Regalloc:              0.366 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.006 s
         Build IFG (phys):      0.080 s
         Compute Liveness:      0.120 s
         Regalloc Split:        0.036 s
         Postalloc Copy Rem:    0.050 s
         Merge multidefs:       0.008 s
         Fixup Spills:          0.001 s
         Compact:               0.001 s
         Coalesce 1:            0.012 s
         Coalesce 2:            0.005 s
         Coalesce 3:            0.005 s
         Cache LRG:             0.001 s
         Simplify:              0.017 s
         Select:                0.022 s
         Other:                 0.003 s
       Block Ordering:        0.005 s
       Peephole:              0.001 s
       Code Emission:           0.053 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.010 s
         Build OOP maps:        0.016 s
         Fill buffer:           0.015 s
         Code Installation:     0.006 s
         Other:                 0.006 s

  Total compiled methods    :     1735 methods
    Standard compilation    :     1707 methods
    On stack replacement    :       28 methods
  Total compiled bytecodes  :   191162 bytes
    Standard compilation    :   170563 bytes
    On stack replacement    :    20599 bytes
  Average compilation speed :   122349 bytes/s

  nmethod code size         :  3510016 bytes
  nmethod total size        :  2456608 bytes


Result "jvbench.canneal.CannealPatternBenchmark.indexInRange":
  N = 10
  mean =      2.616 ±(99.9%) 0.052 s/op

  Histogram, s/op:
    [2.560, 2.570) = 1 
    [2.570, 2.580) = 1 
    [2.580, 2.590) = 2 
    [2.590, 2.600) = 0 
    [2.600, 2.610) = 0 
    [2.610, 2.620) = 1 
    [2.620, 2.630) = 0 
    [2.630, 2.640) = 2 
    [2.640, 2.650) = 1 
    [2.650, 2.660) = 2 

  Percentiles, s/op:
      p(0.0000) =      2.570 s/op
     p(50.0000) =      2.627 s/op
     p(90.0000) =      2.655 s/op
     p(95.0000) =      2.655 s/op
     p(99.0000) =      2.655 s/op
     p(99.9000) =      2.655 s/op
     p(99.9900) =      2.655 s/op
     p(99.9990) =      2.655 s/op
     p(99.9999) =      2.655 s/op
    p(100.0000) =      2.655 s/op

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate":
  1483.577 ±(99.9%) 24.687 MB/sec [Average]
  (min, avg, max) = (1465.399, 1483.577, 1505.617), stdev = 16.329
  CI (99.9%): [1458.891, 1508.264] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  4848125478.400 ±(99.9%) 1502397.119 B/op [Average]
  (min, avg, max) = (4846417920.000, 4848125478.400, 4849859416.000), stdev = 993742.672
  CI (99.9%): [4846623081.281, 4849627875.519] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  1520.528 ±(99.9%) 834.068 MB/sec [Average]
  (min, avg, max) = (1079.668, 1520.528, 2200.386), stdev = 551.684
  CI (99.9%): [686.460, 2354.596] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  4976541696.000 ±(99.9%) 2764531007.152 B/op [Average]
  (min, avg, max) = (3556769792.000, 4976541696.000, 7121928192.000), stdev = 1828566092.274
  CI (99.9%): [2212010688.848, 7741072703.152] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  1.729 ±(99.9%) 7.112 MB/sec [Average]
  (min, avg, max) = (≈ 0, 1.729, 15.038), stdev = 4.704
  CI (99.9%): [≈ 0, 8.840] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  5686036.000 ±(99.9%) 23401721.365 B/op [Average]
  (min, avg, max) = (≈ 0, 5686036.000, 49485264.000), stdev = 15478789.740
  CI (99.9%): [≈ 0, 29087757.365] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.count":
  14.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.516
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.time":
  213.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 21.300, 73.000), stdev = 18.939
  CI (99.9%): [213.000, 213.000] (assumes normal distribution)


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt           Score            Error   Units
CannealPatternBenchmark.indexInRange                                     ss   10           2.616 ±          0.052    s/op
CannealPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10        1483.577 ±         24.687  MB/sec
CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  4848125478.400 ±    1502397.119    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10        1520.528 ±        834.068  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  4976541696.000 ± 2764531007.152    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           1.729 ±          7.112  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10     5686036.000 ±   23401721.365    B/op
CannealPatternBenchmark.indexInRange:·gc.count                           ss   10          14.000                   counts
CannealPatternBenchmark.indexInRange:·gc.time                            ss   10         213.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-16_07:11:34/canneal/CannealPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 484528.257 bytes/s; standard:  0.172 s, 83447 bytes, 1084 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1689392 bytes; nmethods_code_size: 1197152 bytes}
  C2 {speed: 76412.940 bytes/s; standard:  0.145 s, 11269 bytes, 89 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 96384 bytes; nmethods_code_size: 61568 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 153778.738 bytes/s; standard:  0.004 s, 678 bytes, 143 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34408 bytes; nmethods_code_size: 21792 bytes}
  Tier2 {speed: 358569.098 bytes/s; standard:  0.000 s, 51 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 768 bytes; nmethods_code_size: 480 bytes}
  Tier3 {speed: 493262.383 bytes/s; standard:  0.168 s, 82718 bytes, 940 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1654216 bytes; nmethods_code_size: 1174880 bytes}
  Tier4 {speed: 76412.940 bytes/s; standard:  0.145 s, 11269 bytes, 89 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 96384 bytes; nmethods_code_size: 61568 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.322 s
    Standard compilation   :   0.317 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.171 s
       Setup time:            0.001 s
       Build HIR:             0.067 s
         Parse:                 0.051 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.063 s
         LIR Gen:               0.013 s
         Linear Scan:           0.050 s
         Other:                 0.001 s
       Code Emission:         0.019 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.150 s
       Parse:                 0.020 s
       Optimize:              0.045 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.029 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.013 s
       Regalloc:              0.048 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.010 s
         Compute Liveness:      0.016 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.007 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1176 methods
    Standard compilation    :     1173 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    95431 bytes
    Standard compilation    :    94716 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   296460 bytes/s

  nmethod code size         :  1785776 bytes
  nmethod total size        :  1258720 bytes
