# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fma

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.957 s/op
# Warmup Iteration   2: 0.590 s/op
# Warmup Iteration   3: 0.591 s/op
# Warmup Iteration   4: 0.589 s/op
# Warmup Iteration   5: 0.591 s/op
# Warmup Iteration   6: 0.589 s/op
# Warmup Iteration   7: 0.589 s/op
# Warmup Iteration   8: 0.590 s/op
# Warmup Iteration   9: 0.591 s/op
# Warmup Iteration  10: 0.590 s/op
Iteration   1: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.589 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.593 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.594 s/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 349699.639 bytes/s; standard:  0.229 s, 80591 bytes, 1091 methods; osr:  0.009 s, 2703 bytes, 8 methods; nmethods_size: 2094448 bytes; nmethods_code_size: 1488512 bytes}
  C2 {speed: 71239.467 bytes/s; standard:  0.257 s, 19168 bytes, 120 methods; osr:  0.113 s, 7197 bytes, 15 methods; nmethods_size: 163080 bytes; nmethods_code_size: 101824 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 129738.715 bytes/s; standard:  0.006 s, 738 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36416 bytes; nmethods_code_size: 23008 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 355081.239 bytes/s; standard:  0.223 s, 79853 bytes, 939 methods; osr:  0.009 s, 2703 bytes, 8 methods; nmethods_size: 2058032 bytes; nmethods_code_size: 1465504 bytes}
  Tier4 {speed: 71239.467 bytes/s; standard:  0.257 s, 19168 bytes, 120 methods; osr:  0.113 s, 7197 bytes, 15 methods; nmethods_size: 163080 bytes; nmethods_code_size: 101824 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.608 s
    Standard compilation   :   0.486 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.122 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.236 s
       Setup time:            0.001 s
       Build HIR:             0.105 s
         Parse:                 0.085 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.077 s
         LIR Gen:               0.021 s
         Linear Scan:           0.055 s
         Other:                 0.001 s
       Code Emission:         0.028 s
       Code Installation:     0.020 s
       Other:                 0.005 s

    C2 Compile Time:        0.371 s
       Parse:                 0.075 s
       Optimize:              0.152 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.012 s
         Incremental Inline:    0.005 s
           IdealLoop:             0.000 s
          (IGVN:                  0.003 s)
          (Inline:                0.002 s)
          (Prune Useless:         0.001 s)
           Other:                 0.005 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.003 s
             Prune Useless:     0.001 s
         Renumber Live:         0.001 s
         IdealLoop:             0.106 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.011 s
       Matcher:                    0.019 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.022 s
       Regalloc:              0.081 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.018 s
         Compute Liveness:      0.027 s
         Regalloc Split:        0.007 s
         Postalloc Copy Rem:    0.012 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
         Other:                 0.000 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.006 s

  Total compiled methods    :     1234 methods
    Standard compilation    :     1211 methods
    On stack replacement    :       23 methods
  Total compiled bytecodes  :   109659 bytes
    Standard compilation    :    99759 bytes
    On stack replacement    :     9900 bytes
  Average compilation speed :   180278 bytes/s

  nmethod code size         :  2257528 bytes
  nmethod total size        :  1590336 bytes


Result "jvbench.somier.SomierPatternBenchmark.fma":
  N = 10
  mean =      0.590 ±(99.9%) 0.003 s/op

  Histogram, s/op:
    [0.588, 0.588) = 0 
    [0.588, 0.589) = 4 
    [0.589, 0.589) = 4 
    [0.589, 0.590) = 0 
    [0.590, 0.590) = 0 
    [0.590, 0.591) = 0 
    [0.591, 0.591) = 0 
    [0.591, 0.592) = 0 
    [0.592, 0.592) = 0 
    [0.592, 0.593) = 1 
    [0.593, 0.593) = 0 
    [0.593, 0.594) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.589 s/op
     p(50.0000) =      0.589 s/op
     p(90.0000) =      0.594 s/op
     p(95.0000) =      0.594 s/op
     p(99.0000) =      0.594 s/op
     p(99.9000) =      0.594 s/op
     p(99.9900) =      0.594 s/op
     p(99.9990) =      0.594 s/op
     p(99.9999) =      0.594 s/op
    p(100.0000) =      0.594 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate":
  ≈ 10⁻³ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fma:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:00:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2.165 s/op
# Warmup Iteration   2: 1.806 s/op
# Warmup Iteration   3: 1.810 s/op
# Warmup Iteration   4: 1.807 s/op
# Warmup Iteration   5: 1.806 s/op
# Warmup Iteration   6: 1.827 s/op
# Warmup Iteration   7: 1.809 s/op
# Warmup Iteration   8: 1.819 s/op
# Warmup Iteration   9: 1.835 s/op
# Warmup Iteration  10: 1.807 s/op
Iteration   1: 1.805 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.818 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.813 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.810 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.821 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 1.812 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 1.810 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 1.810 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 1.811 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 1.811 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 448988.031 bytes/s; standard:  0.145 s, 64859 bytes, 886 methods; osr:  0.003 s, 1635 bytes, 8 methods; nmethods_size: 1383760 bytes; nmethods_code_size: 976096 bytes}
  C2 {speed: 67577.699 bytes/s; standard:  0.154 s, 10385 bytes, 68 methods; osr:  0.036 s, 2468 bytes, 8 methods; nmethods_size: 88104 bytes; nmethods_code_size: 57504 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 144220.197 bytes/s; standard:  0.005 s, 688 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34160 bytes; nmethods_code_size: 21632 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 459131.896 bytes/s; standard:  0.140 s, 64171 bytes, 744 methods; osr:  0.003 s, 1635 bytes, 8 methods; nmethods_size: 1349600 bytes; nmethods_code_size: 954464 bytes}
  Tier4 {speed: 67577.699 bytes/s; standard:  0.154 s, 10385 bytes, 68 methods; osr:  0.036 s, 2468 bytes, 8 methods; nmethods_size: 88104 bytes; nmethods_code_size: 57504 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.338 s
    Standard compilation   :   0.300 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.039 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.146 s
       Setup time:            0.001 s
       Build HIR:             0.062 s
         Parse:                 0.050 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.002 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.048 s
         LIR Gen:               0.010 s
         Linear Scan:           0.038 s
         Other:                 0.001 s
       Code Emission:         0.015 s
       Code Installation:     0.013 s
       Other:                 0.007 s

    C2 Compile Time:        0.192 s
       Parse:                 0.017 s
       Optimize:              0.094 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.076 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.013 s
       Regalloc:              0.047 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.010 s
         Compute Liveness:      0.016 s
         Regalloc Split:        0.004 s
         Postalloc Copy Rem:    0.006 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
         Other:                 0.000 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      970 methods
    Standard compilation    :      954 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :    79347 bytes
    Standard compilation    :    75244 bytes
    On stack replacement    :     4103 bytes
  Average compilation speed :   234550 bytes/s

  nmethod code size         :  1471864 bytes
  nmethod total size        :  1033600 bytes


Result "jvbench.somier.SomierPatternBenchmark.fmaScalar":
  N = 10
  mean =      1.812 ±(99.9%) 0.007 s/op

  Histogram, s/op:
    [1.800, 1.803) = 0 
    [1.803, 1.805) = 0 
    [1.805, 1.808) = 1 
    [1.808, 1.810) = 1 
    [1.810, 1.813) = 5 
    [1.813, 1.815) = 1 
    [1.815, 1.818) = 0 
    [1.818, 1.820) = 1 
    [1.820, 1.823) = 1 
    [1.823, 1.825) = 0 
    [1.825, 1.828) = 0 
    [1.828, 1.830) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.805 s/op
     p(50.0000) =      1.811 s/op
     p(90.0000) =      1.821 s/op
     p(95.0000) =      1.821 s/op
     p(99.0000) =      1.821 s/op
     p(99.9000) =      1.821 s/op
     p(99.9900) =      1.821 s/op
     p(99.9990) =      1.821 s/op
     p(99.9999) =      1.821 s/op
    p(100.0000) =      1.821 s/op

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.somier.SomierPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             Mode  Cnt    Score    Error   Units
SomierPatternBenchmark.fma                              ss   10    0.590 ±  0.003    s/op
SomierPatternBenchmark.fma:·gc.alloc.rate               ss   10   ≈ 10⁻³           MB/sec
SomierPatternBenchmark.fma:·gc.alloc.rate.norm          ss   10  504.000 ±  0.001    B/op
SomierPatternBenchmark.fma:·gc.count                    ss   10      ≈ 0           counts
SomierPatternBenchmark.fmaScalar                        ss   10    1.812 ±  0.007    s/op
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate         ss   10   ≈ 10⁻⁴           MB/sec
SomierPatternBenchmark.fmaScalar:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
SomierPatternBenchmark.fmaScalar:·gc.count              ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-16_07:11:34/somier/SomierPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 454115.655 bytes/s; standard:  0.196 s, 89098 bytes, 1140 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1839504 bytes; nmethods_code_size: 1302112 bytes}
  C2 {speed: 75181.944 bytes/s; standard:  0.144 s, 11065 bytes, 94 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 95952 bytes; nmethods_code_size: 61152 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 134390.856 bytes/s; standard:  0.005 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 462554.599 bytes/s; standard:  0.191 s, 88415 bytes, 996 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1804880 bytes; nmethods_code_size: 1280192 bytes}
  Tier4 {speed: 75181.944 bytes/s; standard:  0.144 s, 11065 bytes, 94 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 95952 bytes; nmethods_code_size: 61152 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.346 s
    Standard compilation   :   0.341 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.195 s
       Setup time:            0.001 s
       Build HIR:             0.078 s
         Parse:                 0.060 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.072 s
         LIR Gen:               0.015 s
         Linear Scan:           0.057 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.018 s
       Other:                 0.005 s

    C2 Compile Time:        0.149 s
       Parse:                 0.021 s
       Optimize:              0.044 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.029 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.013 s
       Regalloc:              0.048 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.009 s
         Compute Liveness:      0.016 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.007 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1237 methods
    Standard compilation    :     1234 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   100878 bytes
    Standard compilation    :   100163 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   291821 bytes/s

  nmethod code size         :  1935456 bytes
  nmethod total size        :  1363264 bytes
