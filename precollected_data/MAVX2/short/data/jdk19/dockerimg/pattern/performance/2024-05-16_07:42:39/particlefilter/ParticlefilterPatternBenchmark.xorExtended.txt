# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19-xor/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dx=128 -Dy=128 -Dz=24 -Dnp=32768
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8.847 s/op
# Warmup Iteration   2: 8.603 s/op
# Warmup Iteration   3: 5.725 s/op
# Warmup Iteration   4: 5.525 s/op
# Warmup Iteration   5: 5.530 s/op
# Warmup Iteration   6: 5.535 s/op
# Warmup Iteration   7: 5.543 s/op
# Warmup Iteration   8: 5.524 s/op
# Warmup Iteration   9: 5.523 s/op
# Warmup Iteration  10: 5.527 s/op
Iteration   1: 5.521 s/op
                 ·gc.alloc.rate:      5.626 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.520 s/op
                 ·gc.alloc.rate:      5.627 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.521 s/op
                 ·gc.alloc.rate:      5.626 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.537 s/op
                 ·gc.alloc.rate:      5.611 MB/sec
                 ·gc.alloc.rate.norm: 35522632.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.520 s/op
                 ·gc.alloc.rate:      5.627 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.519 s/op
                 ·gc.alloc.rate:                   5.631 MB/sec
                 ·gc.alloc.rate.norm:              35549256.000 B/op
                 ·gc.churn.G1_Eden_Space:          48.503 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     306184192.000 B/op
                 ·gc.churn.G1_Old_Gen:             23.919 MB/sec
                 ·gc.churn.G1_Old_Gen.norm:        150994944.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.038 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 242024.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   7: 5.544 s/op
                 ·gc.alloc.rate:      5.604 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.535 s/op
                 ·gc.alloc.rate:      5.613 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.524 s/op
                 ·gc.alloc.rate:      5.623 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.522 s/op
                 ·gc.alloc.rate:      5.625 MB/sec
                 ·gc.alloc.rate.norm: 35522600.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 363609.306 bytes/s; standard:  0.206 s, 76751 bytes, 1133 methods; osr:  0.022 s, 6250 bytes, 8 methods; nmethods_size: 2115432 bytes; nmethods_code_size: 1499968 bytes}
  C2 {speed: 44184.457 bytes/s; standard:  0.475 s, 20845 bytes, 150 methods; osr:  0.319 s, 14279 bytes, 16 methods; nmethods_size: 301128 bytes; nmethods_code_size: 196416 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 150482.810 bytes/s; standard:  0.005 s, 714 bytes, 147 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35272 bytes; nmethods_code_size: 22336 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 368133.307 bytes/s; standard:  0.202 s, 76037 bytes, 986 methods; osr:  0.022 s, 6250 bytes, 8 methods; nmethods_size: 2080160 bytes; nmethods_code_size: 1477632 bytes}
  Tier4 {speed: 44184.457 bytes/s; standard:  0.475 s, 20845 bytes, 150 methods; osr:  0.319 s, 14279 bytes, 16 methods; nmethods_size: 301128 bytes; nmethods_code_size: 196416 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.023 s
    Standard compilation   :   0.682 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.341 s, Average : 0.014 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.226 s
       Setup time:            0.001 s
       Build HIR:             0.098 s
         Parse:                 0.081 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.077 s
         LIR Gen:               0.016 s
         Linear Scan:           0.060 s
         Other:                 0.001 s
       Code Emission:         0.025 s
       Code Installation:     0.020 s
       Other:                 0.005 s

    C2 Compile Time:        0.796 s
       Parse:                 0.090 s
       Optimize:              0.366 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.016 s
         Incremental Inline:    0.011 s
           IdealLoop:             0.000 s
          (IGVN:                  0.006 s)
          (Inline:                0.003 s)
          (Prune Useless:         0.002 s)
           Other:                 0.011 s
         Vector:                0.006 s
           Box elimination:     0.006 s
             IGVN:              0.002 s
             Prune Useless:     0.002 s
         Renumber Live:         0.001 s
         IdealLoop:             0.281 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.016 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.025 s
       Matcher:                    0.030 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.036 s
       Regalloc:              0.235 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.004 s
         Build IFG (phys):      0.055 s
         Compute Liveness:      0.066 s
         Regalloc Split:        0.025 s
         Postalloc Copy Rem:    0.025 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.001 s
         Compact:               0.000 s
         Coalesce 1:            0.012 s
         Coalesce 2:            0.008 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.001 s
         Simplify:              0.012 s
         Select:                0.015 s
         Other:                 0.006 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.033 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.007 s
         Fill buffer:           0.007 s
         Code Installation:     0.003 s
         Other:                 0.012 s
       Other:                 0.000 s

  Total compiled methods    :     1307 methods
    Standard compilation    :     1283 methods
    On stack replacement    :       24 methods
  Total compiled bytecodes  :   118125 bytes
    Standard compilation    :    97596 bytes
    On stack replacement    :    20529 bytes
  Average compilation speed :   115445 bytes/s

  nmethod code size         :  2416560 bytes
  nmethod total size        :  1696384 bytes


Result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended":
  N = 10
  mean =      5.526 ±(99.9%) 0.014 s/op

  Histogram, s/op:
    [5.510, 5.513) = 0 
    [5.513, 5.515) = 0 
    [5.515, 5.518) = 0 
    [5.518, 5.520) = 2 
    [5.520, 5.523) = 4 
    [5.523, 5.525) = 1 
    [5.525, 5.528) = 0 
    [5.528, 5.530) = 0 
    [5.530, 5.533) = 0 
    [5.533, 5.535) = 1 
    [5.535, 5.538) = 1 
    [5.538, 5.540) = 0 
    [5.540, 5.542) = 0 
    [5.542, 5.545) = 1 
    [5.545, 5.547) = 0 
    [5.547, 5.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.519 s/op
     p(50.0000) =      5.521 s/op
     p(90.0000) =      5.543 s/op
     p(95.0000) =      5.544 s/op
     p(99.0000) =      5.544 s/op
     p(99.9000) =      5.544 s/op
     p(99.9900) =      5.544 s/op
     p(99.9990) =      5.544 s/op
     p(99.9999) =      5.544 s/op
    p(100.0000) =      5.544 s/op

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate":
  5.621 ±(99.9%) 0.013 MB/sec [Average]
  (min, avg, max) = (5.604, 5.621, 5.631), stdev = 0.009
  CI (99.9%): [5.608, 5.635] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate.norm":
  35525268.800 ±(99.9%) 12742.310 B/op [Average]
  (min, avg, max) = (35522600.000, 35525268.800, 35549256.000), stdev = 8428.249
  CI (99.9%): [35512526.490, 35538011.110] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Eden_Space":
  4.850 ±(99.9%) 23.189 MB/sec [Average]
  (min, avg, max) = (≈ 0, 4.850, 48.503), stdev = 15.338
  CI (99.9%): [≈ 0, 28.039] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Eden_Space.norm":
  30618419.200 ±(99.9%) 146383985.715 B/op [Average]
  (min, avg, max) = (≈ 0, 30618419.200, 306184192.000), stdev = 96823943.026
  CI (99.9%): [≈ 0, 177002404.915] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Old_Gen":
  2.392 ±(99.9%) 11.436 MB/sec [Average]
  (min, avg, max) = (≈ 0, 2.392, 23.919), stdev = 7.564
  CI (99.9%): [≈ 0, 13.828] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Old_Gen.norm":
  15099494.400 ±(99.9%) 72189362.818 B/op [Average]
  (min, avg, max) = (≈ 0, 15099494.400, 150994944.000), stdev = 47748793.821
  CI (99.9%): [≈ 0, 87288857.218] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.004, 0.038), stdev = 0.012
  CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Survivor_Space.norm":
  24202.400 ±(99.9%) 115709.559 B/op [Average]
  (min, avg, max) = (≈ 0, 24202.400, 242024.000), stdev = 76534.709
  CI (99.9%): [≈ 0, 139911.959] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.particlefilter.ParticlefilterPatternBenchmark.xorExtended:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                    Mode  Cnt         Score           Error   Units
ParticlefilterPatternBenchmark.xorExtended                                     ss   10         5.526 ±         0.014    s/op
ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate                      ss   10         5.621 ±         0.013  MB/sec
ParticlefilterPatternBenchmark.xorExtended:·gc.alloc.rate.norm                 ss   10  35525268.800 ±     12742.310    B/op
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Eden_Space             ss   10         4.850 ±        23.189  MB/sec
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Eden_Space.norm        ss   10  30618419.200 ± 146383985.715    B/op
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Old_Gen                ss   10         2.392 ±        11.436  MB/sec
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Old_Gen.norm           ss   10  15099494.400 ±  72189362.818    B/op
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Survivor_Space         ss   10         0.004 ±         0.018  MB/sec
ParticlefilterPatternBenchmark.xorExtended:·gc.churn.G1_Survivor_Space.norm    ss   10     24202.400 ±    115709.559    B/op
ParticlefilterPatternBenchmark.xorExtended:·gc.count                           ss   10         1.000                  counts
ParticlefilterPatternBenchmark.xorExtended:·gc.time                            ss   10         1.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-16_07:42:39/particlefilter/ParticlefilterPatternBenchmark.xorExtended.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 471167.206 bytes/s; standard:  0.173 s, 81540 bytes, 1075 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1649752 bytes; nmethods_code_size: 1170528 bytes}
  C2 {speed: 72917.564 bytes/s; standard:  0.153 s, 11366 bytes, 91 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 99640 bytes; nmethods_code_size: 63232 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 140511.301 bytes/s; standard:  0.005 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 480431.307 bytes/s; standard:  0.168 s, 80872 bytes, 934 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1615840 bytes; nmethods_code_size: 1149056 bytes}
  Tier4 {speed: 72917.564 bytes/s; standard:  0.153 s, 11366 bytes, 91 methods; osr:  0.004 s, 66 bytes, 2 methods; nmethods_size: 99640 bytes; nmethods_code_size: 63232 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.331 s
    Standard compilation   :   0.326 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.005 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.172 s
       Setup time:            0.001 s
       Build HIR:             0.068 s
         Parse:                 0.051 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.064 s
         LIR Gen:               0.013 s
         Linear Scan:           0.050 s
         Other:                 0.001 s
       Code Emission:         0.020 s
       Code Installation:     0.016 s
       Other:                 0.004 s

    C2 Compile Time:        0.158 s
       Parse:                 0.022 s
       Optimize:              0.050 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.033 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.006 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.013 s
       Regalloc:              0.050 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.010 s
         Compute Liveness:      0.017 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.003 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1169 methods
    Standard compilation    :     1166 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    93621 bytes
    Standard compilation    :    92906 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   282657 bytes/s

  nmethod code size         :  1749392 bytes
  nmethod total size        :  1233760 bytes
