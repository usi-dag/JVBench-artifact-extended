                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyPatternBenchmark.fma

                              @ 2   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
# Warmup Iteration   1:                                       @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                @ 4   java.lang.Math::fma (237 bytes)   (intrinsic)
                              @ 4   java.lang.Math::fma (237 bytes)   (intrinsic)
                                  @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                  @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                        @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 35   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 69   jdk.internal.vm.vector.VectorSupport::ternaryOp (40 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
  ** missing constant: opr=RShiftI vclass=ConP etype=ConP vlen=ConI
                                      @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 35   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 69   jdk.internal.vm.vector.VectorSupport::ternaryOp (40 bytes)   failed to inline (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                        @ 4   java.lang.Math::fma (237 bytes)   (intrinsic)
                                            @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                            @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                            @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 4   java.lang.Math::fma (237 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 4   java.lang.Math::fma (237 bytes)   (intrinsic)
                              @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 35   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 69   jdk.internal.vm.vector.VectorSupport::ternaryOp (40 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                      @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                        @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                        @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                  @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                      @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                                  @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                    @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                                  @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                  @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                    @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                                  @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                                  @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                    @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                                  @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                  @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                    @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                                  @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.119 s/op
# Warmup Iteration   2:                                     @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 35   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 69   jdk.internal.vm.vector.VectorSupport::ternaryOp (40 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                    @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                    @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 35   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 69   jdk.internal.vm.vector.VectorSupport::ternaryOp (40 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
0.078 s/op
# Warmup Iteration   3: 0.060 s/op
# Warmup Iteration   4: 0.058 s/op
# Warmup Iteration   5:                                     @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
0.061 s/op
# Warmup Iteration   6: 0.057 s/op
# Warmup Iteration   7: 0.057 s/op
# Warmup Iteration   8: 0.059 s/op
# Warmup Iteration   9:                                     @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.060 s/op
# Warmup Iteration  10: 0.058 s/op
Iteration   1: 0.061 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.061 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.061 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.061 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.059 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.061 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.059 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.059 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.059 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.060 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 391303.786 bytes/s; standard:  0.177 s, 69640 bytes, 977 methods; osr:  0.003 s, 952 bytes, 3 methods; nmethods_size: 1541072 bytes; nmethods_code_size: 1099968 bytes}
  C2 {speed: 64925.888 bytes/s; standard:  0.111 s, 7282 bytes, 74 methods; osr:  0.014 s, 881 bytes, 4 methods; nmethods_size: 63992 bytes; nmethods_code_size: 40640 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 130405.849 bytes/s; standard:  0.005 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 399293.088 bytes/s; standard:  0.172 s, 68941 bytes, 833 methods; osr:  0.003 s, 952 bytes, 3 methods; nmethods_size: 1506512 bytes; nmethods_code_size: 1078080 bytes}
  Tier4 {speed: 64925.888 bytes/s; standard:  0.111 s, 7282 bytes, 74 methods; osr:  0.014 s, 881 bytes, 4 methods; nmethods_size: 63992 bytes; nmethods_code_size: 40640 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.306 s
    Standard compilation   :   0.289 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.017 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.178 s
       Setup time:            0.001 s
       Build HIR:             0.078 s
         Parse:                 0.064 s
         Optimize blocks:       0.000 s
         GVN:                   0.005 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.005 s
       Emit LIR:              0.059 s
         LIR Gen:               0.012 s
         Linear Scan:           0.046 s
         Other:                 0.001 s
       Code Emission:         0.019 s
       Code Installation:     0.016 s
       Other:                 0.005 s

    C2 Compile Time:        0.127 s
       Parse:                 0.021 s
       Optimize:              0.049 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.001 s
           Box elimination:     0.001 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.034 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.005 s
       Matcher:                    0.008 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.009 s
       Regalloc:              0.029 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.006 s
         Compute Liveness:      0.011 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.004 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.002 s
       Other:                 0.000 s

  Total compiled methods    :     1058 methods
    Standard compilation    :     1051 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    78755 bytes
    Standard compilation    :    76922 bytes
    On stack replacement    :     1833 bytes
  Average compilation speed :   257259 bytes/s

  nmethod code size         :  1605064 bytes
  nmethod total size        :  1140608 bytes


                                    @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
Result "jvbench.axpy.AxpyPatternBenchmark.fma":
  N = 10
  mean =      0.060 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.058, 0.058) = 0 
    [0.058, 0.059) = 0 
    [0.059, 0.059) = 1 
    [0.059, 0.059) = 1 
    [0.059, 0.059) = 1 
    [0.059, 0.060) = 1 
    [0.060, 0.060) = 0 
    [0.060, 0.060) = 0 
    [0.060, 0.060) = 0 
    [0.060, 0.061) = 1 
    [0.061, 0.061) = 1 
    [0.061, 0.061) = 2 
    [0.061, 0.061) = 0 
    [0.061, 0.062) = 2 
    [0.062, 0.062) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.059 s/op
     p(50.0000) =      0.060 s/op
     p(90.0000) =      0.061 s/op
     p(95.0000) =      0.061 s/op
     p(99.0000) =      0.061 s/op
     p(99.9000) =      0.061 s/op
     p(99.9900) =      0.061 s/op
     p(99.9990) =      0.061 s/op
     p(99.9999) =      0.061 s/op
    p(100.0000) =      0.061 s/op

                                  @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
Secondary result "jvbench.axpy.AxpyPatternBenchmark.fma:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.fma:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.fma:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyPatternBenchmark.fmaScalar

# Run progress: 50.00% complete, ETA 00:00:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
# Warmup Iteration   1:                                   @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.Math::fma (237 bytes)   (intrinsic)
0.069 s/op
# Warmup Iteration   2:                                 @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.Math::fma (237 bytes)   (intrinsic)
                              @ 22   java.lang.Math::fma (237 bytes)   (intrinsic)
0.060 s/op
# Warmup Iteration   3: 0.058 s/op
# Warmup Iteration   4: 0.057 s/op
# Warmup Iteration   5: 0.059 s/op
# Warmup Iteration   6: 0.064 s/op
# Warmup Iteration   7: 0.064 s/op
# Warmup Iteration   8: 0.058 s/op
# Warmup Iteration   9: 0.061 s/op
# Warmup Iteration  10: 0.061 s/op
Iteration   1: 0.060 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2:                                       @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.058 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.057 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.063 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.062 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.056 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 420181.485 bytes/s; standard:  0.144 s, 60775 bytes, 858 methods; osr:  0.003 s, 827 bytes, 3 methods; nmethods_size: 1292192 bytes; nmethods_code_size: 921344 bytes}
  C2 {speed: 66703.740 bytes/s; standard:  0.067 s, 4585 bytes, 52 methods; osr:  0.011 s, 671 bytes, 4 methods; nmethods_size: 41720 bytes; nmethods_code_size: 27424 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 127316.460 bytes/s; standard:  0.005 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 431068.346 bytes/s; standard:  0.139 s, 60106 bytes, 720 methods; osr:  0.003 s, 827 bytes, 3 methods; nmethods_size: 1258992 bytes; nmethods_code_size: 900288 bytes}
  Tier4 {speed: 66703.740 bytes/s; standard:  0.067 s, 4585 bytes, 52 methods; osr:  0.011 s, 671 bytes, 4 methods; nmethods_size: 41720 bytes; nmethods_code_size: 27424 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.225 s
    Standard compilation   :   0.211 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.014 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.145 s
       Setup time:            0.001 s
       Build HIR:             0.063 s
         Parse:                 0.051 s
         Optimize blocks:       0.000 s
         GVN:                   0.004 s
         Null checks elim:      0.003 s
         Range checks elim:     0.001 s
         Other:                 0.004 s
       Emit LIR:              0.049 s
         LIR Gen:               0.010 s
         Linear Scan:           0.038 s
         Other:                 0.001 s
       Code Emission:         0.015 s
       Code Installation:     0.013 s
       Other:                 0.004 s

    C2 Compile Time:        0.080 s
       Parse:                 0.009 s
       Optimize:              0.033 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.002 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.025 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.000 s
         GVN 2:                 0.000 s
         Macro Expand:          0.001 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.004 s
       Matcher:                    0.006 s
         Post Selection Cleanup:   0.000 s
       Scheduler:                  0.006 s
       Regalloc:              0.019 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.000 s
         Build IFG (phys):      0.004 s
         Compute Liveness:      0.007 s
         Regalloc Split:        0.002 s
         Postalloc Copy Rem:    0.002 s
         Merge multidefs:       0.001 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.001 s
       Block Ordering:        0.000 s
       Peephole:              0.000 s
       Code Emission:           0.006 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.001 s
         Build OOP maps:        0.001 s
         Fill buffer:           0.001 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :      917 methods
    Standard compilation    :      910 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    66858 bytes
    Standard compilation    :    65360 bytes
    On stack replacement    :     1498 bytes
  Average compilation speed :   296613 bytes/s

  nmethod code size         :  1333912 bytes
  nmethod total size        :   948768 bytes


Result "jvbench.axpy.AxpyPatternBenchmark.fmaScalar":
  N = 10
  mean =      0.059 ±(99.9%) 0.004 s/op

  Histogram, s/op:
    [0.056, 0.057) = 1 
    [0.057, 0.057) = 0 
    [0.057, 0.058) = 4 
    [0.058, 0.058) = 2 
    [0.058, 0.059) = 0 
    [0.059, 0.059) = 0 
    [0.059, 0.060) = 0 
    [0.060, 0.060) = 0 
    [0.060, 0.061) = 1 
    [0.061, 0.061) = 0 
    [0.061, 0.062) = 0 
    [0.062, 0.062) = 0 
    [0.062, 0.063) = 1 
    [0.063, 0.063) = 0 
    [0.063, 0.064) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.056 s/op
     p(50.0000) =      0.057 s/op
     p(90.0000) =      0.063 s/op
     p(95.0000) =      0.063 s/op
     p(99.0000) =      0.063 s/op
     p(99.9000) =      0.063 s/op
     p(99.9900) =      0.063 s/op
     p(99.9990) =      0.063 s/op
     p(99.9999) =      0.063 s/op
    p(100.0000) =      0.063 s/op

Secondary result "jvbench.axpy.AxpyPatternBenchmark.fmaScalar:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.fmaScalar:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.fmaScalar:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

                              @ 32   java.lang.StringLatin1::indexOfChar (33 bytes)   (intrinsic)
Benchmark                                     @ 4   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                              @ 8   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
                                    Mode  Cnt    Score    Error   Units
AxpyPatternBenchmark.fma                              ss   10    0.060 ±                                @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
  0.002    s/op
AxpyPatternBenchmark.fma:·gc.alloc.rate               ss   10    0.001 ±  0.001  MB/sec
AxpyPatternBenchmark.fma:·gc.alloc.rate.norm          ss   10  504.000 ±  0.001    B/op
AxpyPatternBenchmark.fma:·gc.count                    ss   10      ≈ 0           counts
AxpyPatternBenchmark.fmaScalar                                                  @ 1   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                              @ 7   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
    ss   10    0.059 ±  0.004    s/op
AxpyPatternBenchmark.fmaScalar:·gc.alloc.rate         ss   10                                @ 1   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                                @ 7   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                                @ 4   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                @ 8   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
    0.001 ±  0.001  MB/sec
AxpyPatternBenchmark.fmaScalar:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
AxpyPatternBenchmark.fmaScalar:·gc.count              ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-30_08:14:16/axpy/AxpyPatternBenchmark.fma.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 471298.263 bytes/s; standard:  0.190 s, 89386 bytes, 1141 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1834864 bytes; nmethods_code_size: 1297216 bytes}
  C2 {speed: 64389.508 bytes/s; standard:  0.232 s, 15206 bytes, 98 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 128384 bytes; nmethods_code_size: 80736 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 140355.982 bytes/s; standard:  0.005 s, 683 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34624 bytes; nmethods_code_size: 21920 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 479948.589 bytes/s; standard:  0.185 s, 88703 bytes, 997 methods; osr:  0.001 s, 649 bytes, 1 methods; nmethods_size: 1800240 bytes; nmethods_code_size: 1275296 bytes}
  Tier4 {speed: 64389.508 bytes/s; standard:  0.232 s, 15206 bytes, 98 methods; osr:  0.006 s, 157 bytes, 3 methods; nmethods_size: 128384 bytes; nmethods_code_size: 80736 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.430 s
    Standard compilation   :   0.422 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.008 s, Average : 0.002 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.189 s
       Setup time:            0.001 s
       Build HIR:             0.073 s
         Parse:                 0.056 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.070 s
         LIR Gen:               0.014 s
         Linear Scan:           0.055 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.018 s
       Other:                 0.005 s

    C2 Compile Time:        0.239 s
       Parse:                 0.034 s
       Optimize:              0.062 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.038 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.020 s
       Regalloc:              0.089 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.017 s
         Compute Liveness:      0.030 s
         Regalloc Split:        0.014 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.002 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.004 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.013 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.004 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1243 methods
    Standard compilation    :     1239 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   105398 bytes
    Standard compilation    :   104592 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :   245322 bytes/s

  nmethod code size         :  1963248 bytes
  nmethod total size        :  1377952 bytes
