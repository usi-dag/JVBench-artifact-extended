# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dinput=/lavaMD/input/lavaMD_127776.input
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.734 s/op
# Warmup Iteration   2: 3.671 s/op
# Warmup Iteration   3: 0.862 s/op
# Warmup Iteration   4: 0.846 s/op
# Warmup Iteration   5: 0.847 s/op
# Warmup Iteration   6: 0.846 s/op
# Warmup Iteration   7: 0.845 s/op
# Warmup Iteration   8: 0.858 s/op
# Warmup Iteration   9: 0.849 s/op
# Warmup Iteration  10: 0.849 s/op
Iteration   1: 0.844 s/op
                 ·gc.alloc.rate:      32.363 MB/sec
                 ·gc.alloc.rate.norm: 47673280.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.864 s/op
                 ·gc.alloc.rate:               33.025 MB/sec
                 ·gc.alloc.rate.norm:          47693240.000 B/op
                 ·gc.churn.G1_Eden_Space:      525.687 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 759169024.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 0.845 s/op
                 ·gc.alloc.rate:      33.600 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.846 s/op
                 ·gc.alloc.rate:      33.594 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.845 s/op
                 ·gc.alloc.rate:      33.418 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.844 s/op
                 ·gc.alloc.rate:      33.521 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.847 s/op
                 ·gc.alloc.rate:      33.667 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.846 s/op
                 ·gc.alloc.rate:      33.509 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.846 s/op
                 ·gc.alloc.rate:      33.643 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.845 s/op
                 ·gc.alloc.rate:      33.638 MB/sec
                 ·gc.alloc.rate.norm: 47666664.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 6073.521 bytes/s; standard: 14.800 s, 92883 bytes, 1227 methods; osr:  1.092 s, 3639 bytes, 3 methods; nmethods_size: 2345184 bytes; nmethods_code_size: 1654368 bytes}
  C2 {speed: 960.802 bytes/s; standard: 29.680 s, 23101 bytes, 171 methods; osr:  3.733 s, 9002 bytes, 13 methods; nmethods_size: 257120 bytes; nmethods_code_size: 157088 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3420.302 bytes/s; standard:  0.225 s, 769 bytes, 158 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 37776 bytes; nmethods_code_size: 23872 bytes}
  Tier2 {speed: 982.107 bytes/s; standard:  0.100 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 6144.475 bytes/s; standard: 14.476 s, 92016 bytes, 1068 methods; osr:  1.092 s, 3639 bytes, 3 methods; nmethods_size: 2306432 bytes; nmethods_code_size: 1629952 bytes}
  Tier4 {speed: 960.802 bytes/s; standard: 29.680 s, 23101 bytes, 171 methods; osr:  3.733 s, 9002 bytes, 13 methods; nmethods_size: 257120 bytes; nmethods_code_size: 157088 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  49.338 s
    Standard compilation   :  44.480 s, Average : 0.032 s
    Bailed out compilation :   0.033 s, Average : 0.033 s
    On stack replacement   :   4.825 s, Average : 0.302 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       15.875 s
       Setup time:            0.013 s
       Build HIR:            10.586 s
         Parse:                 9.546 s
         Optimize blocks:       0.016 s
         GVN:                   0.258 s
         Null checks elim:      0.242 s
         Range checks elim:     0.310 s
         Other:                 0.214 s
       Emit LIR:              3.346 s
         LIR Gen:               2.195 s
         Linear Scan:           1.105 s
         Other:                 0.046 s
       Code Emission:         1.085 s
       Code Installation:     0.680 s
       Other:                 0.165 s

    C2 Compile Time:       35.240 s
       Parse:                11.816 s
       Optimize:             11.374 s
         Escape Analysis:       0.876 s
           Conn Graph:            0.714 s
           Macro Eliminate:       0.181 s
         GVN 1:                 1.890 s
         Incremental Inline:    0.175 s
           IdealLoop:             0.000 s
          (IGVN:                  0.034 s)
          (Inline:                0.131 s)
          (Prune Useless:         0.009 s)
           Other:                 0.175 s
         Vector:                0.360 s
           Box elimination:     0.360 s
             IGVN:              0.027 s
             Prune Useless:     0.013 s
         Renumber Live:         0.037 s
         IdealLoop:             4.985 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.175 s
         GVN 2:                 0.645 s
         Macro Expand:          0.792 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.329 s
         Other:                 1.109 s
       Matcher:                    2.218 s
         Post Selection Cleanup:   0.208 s
       Scheduler:                  2.092 s
       Regalloc:              3.055 s
         Ctor Chaitin:          0.016 s
         Build IFG (virt):      0.065 s
         Build IFG (phys):      0.514 s
         Compute Liveness:      0.957 s
         Regalloc Split:        0.678 s
         Postalloc Copy Rem:    0.344 s
         Merge multidefs:       0.041 s
         Fixup Spills:          0.081 s
         Compact:               0.002 s
         Coalesce 1:            0.236 s
         Coalesce 2:            0.101 s
         Coalesce 3:            0.021 s
         Cache LRG:             0.002 s
         Simplify:              0.028 s
         Select:                0.038 s
       Block Ordering:        0.202 s
       Peephole:              0.025 s
       Code Emission:           3.912 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.005 s
         Build OOP maps:        0.213 s
         Fill buffer:           0.790 s
         Code Installation:     0.218 s
         Other:                 1.686 s
       Other:                 0.327 s

  Total compiled methods    :     1414 methods
    Standard compilation    :     1398 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :   128625 bytes
    Standard compilation    :   115984 bytes
    On stack replacement    :    12641 bytes
  Average compilation speed :     2606 bytes/s

  nmethod code size         :  2602304 bytes
  nmethod total size        :  1811456 bytes


Result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange":
  N = 10
  mean =      0.847 ±(99.9%) 0.009 s/op

  Histogram, s/op:
    [0.840, 0.842) = 0 
    [0.842, 0.845) = 5 
    [0.845, 0.847) = 4 
    [0.847, 0.850) = 0 
    [0.850, 0.852) = 0 
    [0.852, 0.855) = 0 
    [0.855, 0.857) = 0 
    [0.857, 0.860) = 0 
    [0.860, 0.862) = 0 
    [0.862, 0.865) = 1 
    [0.865, 0.867) = 0 
    [0.867, 0.870) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.844 s/op
     p(50.0000) =      0.845 s/op
     p(90.0000) =      0.862 s/op
     p(95.0000) =      0.864 s/op
     p(99.0000) =      0.864 s/op
     p(99.9000) =      0.864 s/op
     p(99.9900) =      0.864 s/op
     p(99.9990) =      0.864 s/op
     p(99.9999) =      0.864 s/op
    p(100.0000) =      0.864 s/op

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate":
  33.398 ±(99.9%) 0.619 MB/sec [Average]
  (min, avg, max) = (32.363, 33.398, 33.667), stdev = 0.409
  CI (99.9%): [32.779, 34.017] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  47669983.200 ±(99.9%) 12747.948 B/op [Average]
  (min, avg, max) = (47666664.000, 47669983.200, 47693240.000), stdev = 8431.978
  CI (99.9%): [47657235.252, 47682731.148] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  52.569 ±(99.9%) 251.327 MB/sec [Average]
  (min, avg, max) = (≈ 0, 52.569, 525.687), stdev = 166.237
  CI (99.9%): [≈ 0, 303.895] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  75916902.400 ±(99.9%) 362952074.169 B/op [Average]
  (min, avg, max) = (≈ 0, 75916902.400, 759169024.000), stdev = 240070324.489
  CI (99.9%): [≈ 0, 438868976.569] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.100, 1.000), stdev = 0.316
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "jvbench.lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.200, 2.000), stdev = 0.632
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                Mode  Cnt         Score           Error   Units
lavaMD.LavaMDPatternBenchmark.indexInRange                                 ss   10         0.847 ±         0.009    s/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate                  ss   10        33.398 ±         0.619  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.alloc.rate.norm             ss   10  47669983.200 ±     12747.948    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space         ss   10        52.569 ±       251.327  MB/sec
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm    ss   10  75916902.400 ± 362952074.169    B/op
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.count                       ss   10         1.000                  counts
lavaMD.LavaMDPatternBenchmark.indexInRange:·gc.time                        ss   10         2.000                      ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_vectorial/2024-05-15_18:25:09/lavaMD/LavaMDPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 7862.668 bytes/s; standard: 10.126 s, 79850 bytes, 1063 methods; osr:  0.112 s, 649 bytes, 1 methods; nmethods_size: 1617920 bytes; nmethods_code_size: 1146720 bytes}
  C2 {speed: 749.561 bytes/s; standard: 12.049 s, 10622 bytes, 85 methods; osr:  2.332 s, 157 bytes, 3 methods; nmethods_size: 92328 bytes; nmethods_code_size: 58880 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 4566.879 bytes/s; standard:  0.146 s, 668 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33912 bytes; nmethods_code_size: 21472 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 7910.437 bytes/s; standard:  9.980 s, 79182 bytes, 922 methods; osr:  0.112 s, 649 bytes, 1 methods; nmethods_size: 1584008 bytes; nmethods_code_size: 1125248 bytes}
  Tier4 {speed: 749.561 bytes/s; standard: 12.049 s, 10622 bytes, 85 methods; osr:  2.332 s, 157 bytes, 3 methods; nmethods_size: 92328 bytes; nmethods_code_size: 58880 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  24.619 s
    Standard compilation   :  22.175 s, Average : 0.019 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.444 s, Average : 0.611 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       10.221 s
       Setup time:            0.029 s
       Build HIR:             6.221 s
         Parse:                 5.192 s
         Optimize blocks:       0.004 s
         GVN:                   0.304 s
         Null checks elim:      0.247 s
         Range checks elim:     0.233 s
         Other:                 0.241 s
       Emit LIR:              2.478 s
         LIR Gen:               1.227 s
         Linear Scan:           1.219 s
         Other:                 0.032 s
       Code Emission:         0.924 s
       Code Installation:     0.396 s
       Other:                 0.172 s

    C2 Compile Time:       16.080 s
       Parse:                 3.886 s
       Optimize:              5.761 s
         Escape Analysis:       0.310 s
           Conn Graph:            0.285 s
           Macro Eliminate:       0.002 s
         GVN 1:                 0.930 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.010 s
         IdealLoop:             3.017 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.103 s
         GVN 2:                 0.023 s
         Macro Expand:          0.576 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.170 s
         Other:                 0.620 s
       Matcher:                    1.477 s
         Post Selection Cleanup:   0.100 s
       Scheduler:                  1.169 s
       Regalloc:              1.845 s
         Ctor Chaitin:          0.004 s
         Build IFG (virt):      0.085 s
         Build IFG (phys):      0.228 s
         Compute Liveness:      0.572 s
         Regalloc Split:        0.408 s
         Postalloc Copy Rem:    0.197 s
         Merge multidefs:       0.045 s
         Fixup Spills:          0.047 s
         Compact:               0.003 s
         Coalesce 1:            0.173 s
         Coalesce 2:            0.058 s
         Coalesce 3:            0.018 s
         Cache LRG:             0.001 s
         Simplify:              0.022 s
         Select:                0.035 s
       Block Ordering:        0.155 s
       Peephole:              0.026 s
       Code Emission:           1.338 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.546 s
         Build OOP maps:        0.118 s
         Fill buffer:           0.525 s
         Code Installation:     0.052 s
         Other:                 0.097 s
       Other:                 0.371 s

  Total compiled methods    :     1152 methods
    Standard compilation    :     1148 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :    91278 bytes
    Standard compilation    :    90472 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     3707 bytes/s

  nmethod code size         :  1710248 bytes
  nmethod total size        :  1205600 bytes
