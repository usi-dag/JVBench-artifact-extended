# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -DN_SWAPS=10000 -DTEMP=2000 -DNETLIST=canneal/input/2500000.nets -DN_STEPS=300
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.canneal.CannealPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8.215 s/op
# Warmup Iteration   2: 9.777 s/op
# Warmup Iteration   3: 7.232 s/op
# Warmup Iteration   4: 6.806 s/op
# Warmup Iteration   5: 6.011 s/op
# Warmup Iteration   6: 6.882 s/op
# Warmup Iteration   7: 7.070 s/op
# Warmup Iteration   8: 6.061 s/op
# Warmup Iteration   9: 7.086 s/op
# Warmup Iteration  10: 6.420 s/op
Iteration   1: 6.038 s/op
                 ·gc.alloc.rate:      715.563 MB/sec
                 ·gc.alloc.rate.norm: 4906028712.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.477 s/op
                 ·gc.alloc.rate:               670.185 MB/sec
                 ·gc.alloc.rate.norm:          4903599744.000 B/op
                 ·gc.churn.G1_Eden_Space:      1247.379 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9126805504.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     34.000 ms

Iteration   3: 6.112 s/op
                 ·gc.alloc.rate:      707.348 MB/sec
                 ·gc.alloc.rate.norm: 4904911400.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.891 s/op
                 ·gc.alloc.rate:               632.749 MB/sec
                 ·gc.alloc.rate.norm:          4904403128.000 B/op
                 ·gc.churn.G1_Eden_Space:      1177.508 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9126805504.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     32.000 ms

Iteration   5: 6.804 s/op
                 ·gc.alloc.rate:      640.040 MB/sec
                 ·gc.alloc.rate.norm: 4902678384.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.125 s/op
                 ·gc.alloc.rate:                   705.775 MB/sec
                 ·gc.alloc.rate.norm:              4903762848.000 B/op
                 ·gc.churn.G1_Eden_Space:          1313.578 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     9126805504.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.085 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 591136.000 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         32.000 ms

Iteration   7: 6.889 s/op
                 ·gc.alloc.rate:      632.708 MB/sec
                 ·gc.alloc.rate.norm: 4902744984.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.975 s/op
                 ·gc.alloc.rate:               625.723 MB/sec
                 ·gc.alloc.rate.norm:          4905106184.000 B/op
                 ·gc.churn.G1_Eden_Space:      1164.266 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9126805504.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     34.000 ms

Iteration   9: 6.058 s/op
                 ·gc.alloc.rate:      712.898 MB/sec
                 ·gc.alloc.rate.norm: 4903654312.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.970 s/op
                 ·gc.alloc.rate:               625.966 MB/sec
                 ·gc.alloc.rate.norm:          4903442256.000 B/op
                 ·gc.churn.G1_Eden_Space:      1165.114 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 9126805504.000 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     53.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 166012.265 bytes/s; standard:  0.637 s, 105313 bytes, 1398 methods; osr:  0.022 s, 4162 bytes, 8 methods; nmethods_size: 2820952 bytes; nmethods_code_size: 2026240 bytes}
  C2 {speed: 31613.272 bytes/s; standard:  1.907 s, 58405 bytes, 272 methods; osr:  0.453 s, 16200 bytes, 18 methods; nmethods_size: 545128 bytes; nmethods_code_size: 323072 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 66143.792 bytes/s; standard:  0.013 s, 834 bytes, 170 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 40656 bytes; nmethods_code_size: 25696 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 167959.037 bytes/s; standard:  0.625 s, 104479 bytes, 1228 methods; osr:  0.022 s, 4162 bytes, 8 methods; nmethods_size: 2780296 bytes; nmethods_code_size: 2000544 bytes}
  Tier4 {speed: 31613.272 bytes/s; standard:  1.907 s, 58405 bytes, 272 methods; osr:  0.453 s, 16200 bytes, 18 methods; nmethods_size: 545128 bytes; nmethods_code_size: 323072 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   3.019 s
    Standard compilation   :   2.544 s, Average : 0.002 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.475 s, Average : 0.018 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.653 s
       Setup time:            0.003 s
       Build HIR:             0.277 s
         Parse:                 0.232 s
         Optimize blocks:       0.000 s
         GVN:                   0.017 s
         Null checks elim:      0.009 s
         Range checks elim:     0.002 s
         Other:                 0.016 s
       Emit LIR:              0.236 s
         LIR Gen:               0.074 s
         Linear Scan:           0.161 s
         Other:                 0.002 s
       Code Emission:         0.072 s
       Code Installation:     0.052 s
       Other:                 0.013 s

    C2 Compile Time:        2.360 s
       Parse:                 0.339 s
       Optimize:              0.924 s
         Escape Analysis:       0.027 s
           Conn Graph:            0.019 s
           Macro Eliminate:       0.007 s
         GVN 1:                 0.066 s
         Incremental Inline:    0.045 s
           IdealLoop:             0.000 s
          (IGVN:                  0.007 s)
          (Inline:                0.035 s)
          (Prune Useless:         0.003 s)
           Other:                 0.045 s
         Vector:                0.014 s
           Box elimination:     0.013 s
             IGVN:              0.003 s
             Prune Useless:     0.003 s
         Renumber Live:         0.007 s
         IdealLoop:             0.623 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.009 s
         GVN 2:                 0.005 s
         Macro Expand:          0.032 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.012 s
         Other:                 0.085 s
       Matcher:                    0.129 s
         Post Selection Cleanup:   0.010 s
       Scheduler:                  0.142 s
       Regalloc:              0.714 s
         Ctor Chaitin:          0.001 s
         Build IFG (virt):      0.012 s
         Build IFG (phys):      0.147 s
         Compute Liveness:      0.215 s
         Regalloc Split:        0.063 s
         Postalloc Copy Rem:    0.103 s
         Merge multidefs:       0.037 s
         Fixup Spills:          0.001 s
         Compact:               0.003 s
         Coalesce 1:            0.021 s
         Coalesce 2:            0.010 s
         Coalesce 3:            0.009 s
         Cache LRG:             0.002 s
         Simplify:              0.037 s
         Select:                0.046 s
         Other:                 0.009 s
       Block Ordering:        0.009 s
       Peephole:              0.002 s
       Code Emission:           0.090 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.017 s
         Build OOP maps:        0.031 s
         Fill buffer:           0.027 s
         Code Installation:     0.010 s
         Other:                 0.004 s
       Other:                 0.001 s

  Total compiled methods    :     1696 methods
    Standard compilation    :     1670 methods
    On stack replacement    :       26 methods
  Total compiled bytecodes  :   184080 bytes
    Standard compilation    :   163718 bytes
    On stack replacement    :    20362 bytes
  Average compilation speed :    60966 bytes/s

  nmethod code size         :  3366080 bytes
  nmethod total size        :  2349312 bytes


Result "jvbench.canneal.CannealPatternBenchmark.indexInRange":
  N = 10
  mean =      6.534 ±(99.9%) 0.624 s/op

  Histogram, s/op:
    [6.000, 6.100) = 2 
    [6.100, 6.200) = 2 
    [6.200, 6.300) = 0 
    [6.300, 6.400) = 0 
    [6.400, 6.500) = 1 
    [6.500, 6.600) = 0 
    [6.600, 6.700) = 0 
    [6.700, 6.800) = 0 
    [6.800, 6.900) = 3 

  Percentiles, s/op:
      p(0.0000) =      6.038 s/op
     p(50.0000) =      6.641 s/op
     p(90.0000) =      6.975 s/op
     p(95.0000) =      6.975 s/op
     p(99.0000) =      6.975 s/op
     p(99.9000) =      6.975 s/op
     p(99.9900) =      6.975 s/op
     p(99.9990) =      6.975 s/op
     p(99.9999) =      6.975 s/op
    p(100.0000) =      6.975 s/op

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate":
  666.896 ±(99.9%) 59.777 MB/sec [Average]
  (min, avg, max) = (625.723, 666.896, 715.563), stdev = 39.539
  CI (99.9%): [607.118, 726.673] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  4904033195.200 ±(99.9%) 1616597.162 B/op [Average]
  (min, avg, max) = (4902678384.000, 4904033195.200, 4906028712.000), stdev = 1069278.930
  CI (99.9%): [4902416598.038, 4905649792.362] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  606.784 ±(99.9%) 969.254 MB/sec [Average]
  (min, avg, max) = (≈ 0, 606.784, 1313.578), stdev = 641.101
  CI (99.9%): [≈ 0, 1576.038] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  4563402752.000 ±(99.9%) 7272409883.903 B/op [Average]
  (min, avg, max) = (≈ 0, 4563402752.000, 9126805504.000), stdev = 4810248859.000
  CI (99.9%): [≈ 0, 11835812635.903] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  0.009 ±(99.9%) 0.041 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.009, 0.085), stdev = 0.027
  CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  59113.600 ±(99.9%) 282616.954 B/op [Average]
  (min, avg, max) = (≈ 0, 59113.600, 591136.000), stdev = 186933.617
  CI (99.9%): [≈ 0, 341730.554] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.count":
  5.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.500, 1.000), stdev = 0.527
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)

Secondary result "jvbench.canneal.CannealPatternBenchmark.indexInRange:·gc.time":
  185.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 18.500, 53.000), stdev = 20.403
  CI (99.9%): [185.000, 185.000] (assumes normal distribution)


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                              Mode  Cnt           Score            Error   Units
CannealPatternBenchmark.indexInRange                                     ss   10           6.534 ±          0.624    s/op
CannealPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10         666.896 ±         59.777  MB/sec
CannealPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  4904033195.200 ±    1616597.162    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10         606.784 ±        969.254  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  4563402752.000 ± 7272409883.903    B/op
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           0.009 ±          0.041  MB/sec
CannealPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10       59113.600 ±     282616.954    B/op
CannealPatternBenchmark.indexInRange:·gc.count                           ss   10           5.000                   counts
CannealPatternBenchmark.indexInRange:·gc.time                            ss   10         185.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/performance/2024-05-23_17:00:03/canneal/CannealPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 234649.525 bytes/s; standard:  0.358 s, 84056 bytes, 1081 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1682504 bytes; nmethods_code_size: 1189248 bytes}
  C2 {speed: 33916.781 bytes/s; standard:  0.322 s, 11104 bytes, 87 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 95272 bytes; nmethods_code_size: 59264 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 63683.334 bytes/s; standard:  0.011 s, 673 bytes, 142 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34160 bytes; nmethods_code_size: 21632 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 239846.558 bytes/s; standard:  0.348 s, 83383 bytes, 939 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 1648344 bytes; nmethods_code_size: 1167616 bytes}
  Tier4 {speed: 33916.781 bytes/s; standard:  0.322 s, 11104 bytes, 87 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 95272 bytes; nmethods_code_size: 59264 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.688 s
    Standard compilation   :   0.680 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.007 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.353 s
       Setup time:            0.002 s
       Build HIR:             0.142 s
         Parse:                 0.114 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.126 s
         LIR Gen:               0.029 s
         Linear Scan:           0.095 s
         Other:                 0.002 s
       Code Emission:         0.041 s
       Code Installation:     0.034 s
       Other:                 0.009 s

    C2 Compile Time:        0.332 s
       Parse:                 0.048 s
       Optimize:              0.101 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.010 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.069 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.011 s
       Matcher:                    0.025 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.027 s
       Regalloc:              0.110 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.020 s
         Compute Liveness:      0.036 s
         Regalloc Split:        0.012 s
         Postalloc Copy Rem:    0.018 s
         Merge multidefs:       0.008 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.005 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.017 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.006 s
         Fill buffer:           0.005 s
         Code Installation:     0.002 s
         Other:                 0.001 s

  Total compiled methods    :     1170 methods
    Standard compilation    :     1168 methods
    On stack replacement    :        2 methods
  Total compiled bytecodes  :    95226 bytes
    Standard compilation    :    95160 bytes
    On stack replacement    :       66 bytes
  Average compilation speed :   138499 bytes/s

  nmethod code size         :  1777776 bytes
  nmethod total size        :  1248512 bytes
