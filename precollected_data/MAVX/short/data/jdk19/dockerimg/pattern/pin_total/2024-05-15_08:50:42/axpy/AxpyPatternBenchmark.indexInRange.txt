# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyPatternBenchmark.indexInRange

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 104.769 s/op
# Warmup Iteration   2: 93.692 s/op
# Warmup Iteration   3: 87.958 s/op
# Warmup Iteration   4: 88.534 s/op
# Warmup Iteration   5: 88.726 s/op
# Warmup Iteration   6: 87.626 s/op
# Warmup Iteration   7: 87.557 s/op
# Warmup Iteration   8: 88.416 s/op
# Warmup Iteration   9: 88.507 s/op
# Warmup Iteration  10: 87.619 s/op
Iteration   1: 87.619 s/op
                 ·gc.alloc.rate:               120.181 MB/sec
                 ·gc.alloc.rate.norm:          11182167160.000 B/op
                 ·gc.churn.G1_Eden_Space:      117.385 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 10921967616.000 B/op
                 ·gc.count:                    3.000 counts
                 ·gc.time:                     69.000 ms

Iteration   2: 88.101 s/op
                 ·gc.alloc.rate:               119.622 MB/sec
                 ·gc.alloc.rate.norm:          11182161048.000 B/op
                 ·gc.churn.G1_Eden_Space:      116.839 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 10921967616.000 B/op
                 ·gc.count:                    3.000 counts
                 ·gc.time:                     67.000 ms

Iteration   3: 91.809 s/op
                 ·gc.alloc.rate:                   114.848 MB/sec
                 ·gc.alloc.rate.norm:              11182160264.000 B/op
                 ·gc.churn.G1_Eden_Space:          112.176 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     10921967616.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 7728.000 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         73.000 ms

Iteration   4: 88.158 s/op
                 ·gc.alloc.rate:                   119.629 MB/sec
                 ·gc.alloc.rate.norm:              11182160272.000 B/op
                 ·gc.churn.G1_Eden_Space:          116.846 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     10921967616.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁵ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 640.000 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         67.000 ms

Iteration   5: 87.777 s/op
                 ·gc.alloc.rate:                   120.159 MB/sec
                 ·gc.alloc.rate.norm:              11182186560.000 B/op
                 ·gc.churn.G1_Eden_Space:          156.484 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     14562623488.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 10304.000 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         90.000 ms

Iteration   6: 88.325 s/op
                 ·gc.alloc.rate:                   119.387 MB/sec
                 ·gc.alloc.rate.norm:              11182160296.000 B/op
                 ·gc.churn.G1_Eden_Space:          116.609 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     10921967616.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁵ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2064.000 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         66.000 ms

Iteration   7: 87.862 s/op
                 ·gc.alloc.rate:                   120.007 MB/sec
                 ·gc.alloc.rate.norm:              11182160264.000 B/op
                 ·gc.churn.G1_Eden_Space:          117.214 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     10921967616.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 5272.000 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         65.000 ms

Iteration   8: 87.745 s/op
                 ·gc.alloc.rate:               120.218 MB/sec
                 ·gc.alloc.rate.norm:          11182173056.000 B/op
                 ·gc.churn.G1_Eden_Space:      117.421 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 10921967616.000 B/op
                 ·gc.count:                    3.000 counts
                 ·gc.time:                     65.000 ms

Iteration   9: 87.782 s/op
                 ·gc.alloc.rate:               119.983 MB/sec
                 ·gc.alloc.rate.norm:          11182160184.000 B/op
                 ·gc.churn.G1_Eden_Space:      117.192 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 10921967616.000 B/op
                 ·gc.count:                    3.000 counts
                 ·gc.time:                     64.000 ms

Iteration  10: 87.656 s/op
                 ·gc.alloc.rate:                   120.210 MB/sec
                 ·gc.alloc.rate.norm:              11182160296.000 B/op
                 ·gc.churn.G1_Eden_Space:          117.413 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     10921967616.000 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4408.000 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         64.000 ms


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2128.749 bytes/s; standard: 37.823 s, 80806 bytes, 1182 methods; osr:  0.677 s, 1149 bytes, 3 methods; nmethods_size: 2046000 bytes; nmethods_code_size: 1472320 bytes}
  C2 {speed: 240.001 bytes/s; standard: 66.377 s, 15399 bytes, 140 methods; osr:  3.573 s, 1389 bytes, 4 methods; nmethods_size: 149448 bytes; nmethods_code_size: 88320 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1782.687 bytes/s; standard:  0.415 s, 739 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36384 bytes; nmethods_code_size: 23008 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2132.516 bytes/s; standard: 37.408 s, 80067 bytes, 1030 methods; osr:  0.677 s, 1149 bytes, 3 methods; nmethods_size: 2009616 bytes; nmethods_code_size: 1449312 bytes}
  Tier4 {speed: 240.001 bytes/s; standard: 66.377 s, 15399 bytes, 140 methods; osr:  3.573 s, 1389 bytes, 4 methods; nmethods_size: 149448 bytes; nmethods_code_size: 88320 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   : 108.449 s
    Standard compilation   : 104.200 s, Average : 0.079 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.249 s, Average : 0.607 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       38.374 s
       Setup time:            0.217 s
       Build HIR:            21.682 s
         Parse:                18.833 s
         Optimize blocks:       0.015 s
         GVN:                   0.939 s
         Null checks elim:      0.692 s
         Range checks elim:     0.442 s
         Other:                 0.760 s
       Emit LIR:             10.331 s
         LIR Gen:               3.730 s
         Linear Scan:           6.464 s
         Other:                 0.137 s
       Code Emission:         3.807 s
       Code Installation:     1.558 s
       Other:                 0.779 s

    C2 Compile Time:       75.251 s
       Parse:                21.564 s
       Optimize:             24.128 s
         Escape Analysis:       1.762 s
           Conn Graph:            1.444 s
           Macro Eliminate:       0.190 s
         GVN 1:                 2.747 s
         Incremental Inline:    0.487 s
           IdealLoop:             0.000 s
          (IGVN:                  0.107 s)
          (Inline:                0.300 s)
          (Prune Useless:         0.084 s)
           Other:                 0.487 s
         Vector:                0.866 s
           Box elimination:     0.864 s
             IGVN:              0.148 s
             Prune Useless:     0.142 s
         Renumber Live:         0.040 s
         IdealLoop:            12.463 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.471 s
         GVN 2:                 0.155 s
         Macro Expand:          1.857 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.636 s
         Other:                 2.641 s
       Matcher:                    6.381 s
         Post Selection Cleanup:   0.495 s
       Scheduler:                  5.322 s
       Regalloc:             11.209 s
         Ctor Chaitin:          0.017 s
         Build IFG (virt):      0.216 s
         Build IFG (phys):      1.804 s
         Compute Liveness:      3.114 s
         Regalloc Split:        1.870 s
         Postalloc Copy Rem:    2.478 s
         Merge multidefs:       0.257 s
         Fixup Spills:          0.211 s
         Compact:               0.031 s
         Coalesce 1:            0.591 s
         Coalesce 2:            0.209 s
         Coalesce 3:            0.064 s
         Cache LRG:             0.022 s
         Simplify:              0.200 s
         Select:                0.368 s
       Block Ordering:        0.515 s
       Peephole:              0.072 s
       Code Emission:           4.454 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.979 s
         Build OOP maps:        0.559 s
         Fill buffer:           1.501 s
         Code Installation:     0.183 s
         Other:                 0.232 s
       Other:                 1.423 s

  Total compiled methods    :     1329 methods
    Standard compilation    :     1322 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    98743 bytes
    Standard compilation    :    96205 bytes
    On stack replacement    :     2538 bytes
  Average compilation speed :      910 bytes/s

  nmethod code size         :  2195448 bytes
  nmethod total size        :  1560640 bytes


Result "jvbench.axpy.AxpyPatternBenchmark.indexInRange":
  N = 10
  mean =     88.283 ±(99.9%) 1.905 s/op

  Histogram, s/op:
    [87.000, 87.500) = 0 
    [87.500, 88.000) = 6 
    [88.000, 88.500) = 3 
    [88.500, 89.000) = 0 
    [89.000, 89.500) = 0 
    [89.500, 90.000) = 0 
    [90.000, 90.500) = 0 
    [90.500, 91.000) = 0 
    [91.000, 91.500) = 0 

  Percentiles, s/op:
      p(0.0000) =     87.619 s/op
     p(50.0000) =     87.822 s/op
     p(90.0000) =     91.461 s/op
     p(95.0000) =     91.809 s/op
     p(99.0000) =     91.809 s/op
     p(99.9000) =     91.809 s/op
     p(99.9900) =     91.809 s/op
     p(99.9990) =     91.809 s/op
     p(99.9999) =     91.809 s/op
    p(100.0000) =     91.809 s/op

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.alloc.rate":
  119.424 ±(99.9%) 2.471 MB/sec [Average]
  (min, avg, max) = (114.848, 119.424, 120.218), stdev = 1.634
  CI (99.9%): [116.954, 121.895] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.alloc.rate.norm":
  11182164940.000 ±(99.9%) 13186.261 B/op [Average]
  (min, avg, max) = (11182160184.000, 11182164940.000, 11182186560.000), stdev = 8721.895
  CI (99.9%): [11182151753.739, 11182178126.261] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space":
  120.558 ±(99.9%) 19.233 MB/sec [Average]
  (min, avg, max) = (112.176, 120.558, 156.484), stdev = 12.721
  CI (99.9%): [101.325, 139.790] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm":
  11286033203.200 ±(99.9%) 1740565747.949 B/op [Average]
  (min, avg, max) = (10921967616.000, 11286033203.200, 14562623488.000), stdev = 1151276473.239
  CI (99.9%): [9545467455.251, 13026598951.149] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm":
  3041.600 ±(99.9%) 5640.559 B/op [Average]
  (min, avg, max) = (≈ 0, 3041.600, 10304.000), stdev = 3730.881
  CI (99.9%): [≈ 0, 8682.159] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (3.000, 3.100, 4.000), stdev = 0.316
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyPatternBenchmark.indexInRange:·gc.time":
  690.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (64.000, 69.000, 90.000), stdev = 7.860
  CI (99.9%): [690.000, 690.000] (assumes normal distribution)


# Run complete. Total time: 00:31:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                           Mode  Cnt            Score            Error   Units
AxpyPatternBenchmark.indexInRange                                     ss   10           88.283 ±          1.905    s/op
AxpyPatternBenchmark.indexInRange:·gc.alloc.rate                      ss   10          119.424 ±          2.471  MB/sec
AxpyPatternBenchmark.indexInRange:·gc.alloc.rate.norm                 ss   10  11182164940.000 ±      13186.261    B/op
AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space             ss   10          120.558 ±         19.233  MB/sec
AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Eden_Space.norm        ss   10  11286033203.200 ± 1740565747.949    B/op
AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space         ss   10           ≈ 10⁻⁴                   MB/sec
AxpyPatternBenchmark.indexInRange:·gc.churn.G1_Survivor_Space.norm    ss   10         3041.600 ±       5640.559    B/op
AxpyPatternBenchmark.indexInRange:·gc.count                           ss   10           31.000                   counts
AxpyPatternBenchmark.indexInRange:·gc.time                            ss   10          690.000                       ms

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/pattern/pin_total/2024-05-15_08:50:42/axpy/AxpyPatternBenchmark.indexInRange.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2752.775 bytes/s; standard: 29.909 s, 82601 bytes, 1063 methods; osr:  0.333 s, 649 bytes, 1 methods; nmethods_size: 1663680 bytes; nmethods_code_size: 1178464 bytes}
  C2 {speed: 280.410 bytes/s; standard: 41.690 s, 11897 bytes, 96 methods; osr:  0.972 s, 66 bytes, 2 methods; nmethods_size: 100456 bytes; nmethods_code_size: 62784 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1667.754 bytes/s; standard:  0.365 s, 609 bytes, 128 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 30816 bytes; nmethods_code_size: 19520 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2766.036 bytes/s; standard: 29.544 s, 81992 bytes, 935 methods; osr:  0.333 s, 649 bytes, 1 methods; nmethods_size: 1632864 bytes; nmethods_code_size: 1158944 bytes}
  Tier4 {speed: 280.410 bytes/s; standard: 41.690 s, 11897 bytes, 96 methods; osr:  0.972 s, 66 bytes, 2 methods; nmethods_size: 100456 bytes; nmethods_code_size: 62784 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  73.282 s
    Standard compilation   :  71.599 s, Average : 0.062 s
    Bailed out compilation :   0.377 s, Average : 0.377 s
    On stack replacement   :   1.305 s, Average : 0.435 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       30.471 s
       Setup time:            0.148 s
       Build HIR:            15.639 s
         Parse:                13.120 s
         Optimize blocks:       0.015 s
         GVN:                   0.824 s
         Null checks elim:      0.543 s
         Range checks elim:     0.473 s
         Other:                 0.664 s
       Emit LIR:              8.591 s
         LIR Gen:               3.337 s
         Linear Scan:           5.140 s
         Other:                 0.113 s
       Code Emission:         3.975 s
       Code Installation:     1.462 s
       Other:                 0.656 s

    C2 Compile Time:       48.049 s
       Parse:                10.949 s
       Optimize:             16.283 s
         Escape Analysis:       0.910 s
           Conn Graph:            0.843 s
           Macro Eliminate:       0.004 s
         GVN 1:                 2.433 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.027 s
         IdealLoop:             8.724 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.351 s
         GVN 2:                 0.065 s
         Macro Expand:          1.492 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.454 s
         Other:                 1.790 s
       Matcher:                    4.397 s
         Post Selection Cleanup:   0.380 s
       Scheduler:                  3.988 s
       Regalloc:              7.309 s
         Ctor Chaitin:          0.020 s
         Build IFG (virt):      0.259 s
         Build IFG (phys):      1.028 s
         Compute Liveness:      1.929 s
         Regalloc Split:        1.354 s
         Postalloc Copy Rem:    1.280 s
         Merge multidefs:       0.159 s
         Fixup Spills:          0.129 s
         Compact:               0.016 s
         Coalesce 1:            0.670 s
         Coalesce 2:            0.214 s
         Coalesce 3:            0.043 s
         Cache LRG:             0.015 s
         Simplify:              0.135 s
         Select:                0.212 s
       Block Ordering:        0.521 s
       Peephole:              0.042 s
       Code Emission:           3.648 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.734 s
         Build OOP maps:        0.430 s
         Fill buffer:           1.241 s
         Code Installation:     0.078 s
         Other:                 0.166 s
       Other:                 0.834 s

  Total compiled methods    :     1162 methods
    Standard compilation    :     1159 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :    95213 bytes
    Standard compilation    :    94498 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     1299 bytes/s

  nmethod code size         :  1764136 bytes
  nmethod total size        :  1241248 bytes
