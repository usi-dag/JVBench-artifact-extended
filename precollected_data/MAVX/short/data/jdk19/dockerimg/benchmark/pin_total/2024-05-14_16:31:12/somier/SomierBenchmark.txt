# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 184.551 s/op
# Warmup Iteration   2: 150.960 s/op
# Warmup Iteration   3: 150.141 s/op
# Warmup Iteration   4: 150.089 s/op
# Warmup Iteration   5: 150.129 s/op
# Warmup Iteration   6: 150.088 s/op
# Warmup Iteration   7: 150.076 s/op
# Warmup Iteration   8: 150.260 s/op
# Warmup Iteration   9: 150.193 s/op
# Warmup Iteration  10: 150.158 s/op
Iteration   1: 150.103 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 8056.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 151.279 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 150.151 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 150.260 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 150.301 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 150.200 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 150.168 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 150.099 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 150.168 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 150.180 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2100.714 bytes/s; standard: 29.248 s, 60857 bytes, 843 methods; osr:  0.468 s, 1569 bytes, 8 methods; nmethods_size: 1300792 bytes; nmethods_code_size: 913984 bytes}
  C2 {speed: 165.493 bytes/s; standard: 37.365 s, 6139 bytes, 62 methods; osr:  5.652 s, 980 bytes, 8 methods; nmethods_size: 79952 bytes; nmethods_code_size: 51488 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1153.665 bytes/s; standard:  0.575 s, 663 bytes, 137 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32920 bytes; nmethods_code_size: 20832 bytes}
  Tier2 {speed: 523.463 bytes/s; standard:  0.187 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2129.709 bytes/s; standard: 28.487 s, 60096 bytes, 705 methods; osr:  0.468 s, 1569 bytes, 8 methods; nmethods_size: 1266896 bytes; nmethods_code_size: 892608 bytes}
  Tier4 {speed: 165.493 bytes/s; standard: 37.365 s, 6139 bytes, 62 methods; osr:  5.652 s, 980 bytes, 8 methods; nmethods_size: 79952 bytes; nmethods_code_size: 51488 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  72.733 s
    Standard compilation   :  66.613 s, Average : 0.074 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   6.120 s, Average : 0.383 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       29.616 s
       Setup time:            0.180 s
       Build HIR:            16.025 s
         Parse:                13.479 s
         Optimize blocks:       0.036 s
         GVN:                   0.828 s
         Null checks elim:      0.659 s
         Range checks elim:     0.453 s
         Other:                 0.569 s
       Emit LIR:              7.873 s
         LIR Gen:               3.375 s
         Linear Scan:           4.388 s
         Other:                 0.109 s
       Code Emission:         3.497 s
       Code Installation:     1.447 s
       Other:                 0.595 s

    C2 Compile Time:       48.472 s
       Parse:                 9.922 s
       Optimize:             18.138 s
         Escape Analysis:       1.005 s
           Conn Graph:            0.936 s
           Macro Eliminate:       0.008 s
         GVN 1:                 2.284 s
         Incremental Inline:    0.004 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.004 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:            10.848 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.278 s
         GVN 2:                 0.085 s
         Macro Expand:          1.420 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.595 s
         Other:                 1.619 s
       Matcher:                    4.101 s
         Post Selection Cleanup:   0.231 s
       Scheduler:                  4.089 s
       Regalloc:              6.834 s
         Ctor Chaitin:          0.032 s
         Build IFG (virt):      0.168 s
         Build IFG (phys):      1.101 s
         Compute Liveness:      1.967 s
         Regalloc Split:        1.022 s
         Postalloc Copy Rem:    1.198 s
         Merge multidefs:       0.176 s
         Fixup Spills:          0.119 s
         Compact:               0.022 s
         Coalesce 1:            0.391 s
         Coalesce 2:            0.189 s
         Coalesce 3:            0.061 s
         Cache LRG:             0.013 s
         Simplify:              0.159 s
         Select:                0.287 s
       Block Ordering:        0.426 s
       Peephole:              0.050 s
       Code Emission:           3.619 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.429 s
         Build OOP maps:        0.470 s
         Fill buffer:           1.034 s
         Code Installation:     0.110 s
         Other:                 0.576 s
       Other:                 1.182 s

  Total compiled methods    :      921 methods
    Standard compilation    :      905 methods
    On stack replacement    :       16 methods
  Total compiled bytecodes  :    69545 bytes
    Standard compilation    :    66996 bytes
    On stack replacement    :     2549 bytes
  Average compilation speed :      956 bytes/s

  nmethod code size         :  1380744 bytes
  nmethod total size        :   965472 bytes


Result "jvbench.somier.SomierBenchmark.autoVec":
  N = 10
  mean =    150.291 ±(99.9%) 0.534 s/op

  Histogram, s/op:
    [150.000, 150.125) = 2 
    [150.125, 150.250) = 5 
    [150.250, 150.375) = 2 
    [150.375, 150.500) = 0 
    [150.500, 150.625) = 0 
    [150.625, 150.750) = 0 
    [150.750, 150.875) = 0 
    [150.875, 151.000) = 0 
    [151.000, 151.125) = 0 
    [151.125, 151.250) = 0 
    [151.250, 151.375) = 1 
    [151.375, 151.500) = 0 
    [151.500, 151.625) = 0 
    [151.625, 151.750) = 0 
    [151.750, 151.875) = 0 

  Percentiles, s/op:
      p(0.0000) =    150.099 s/op
     p(50.0000) =    150.174 s/op
     p(90.0000) =    151.181 s/op
     p(95.0000) =    151.279 s/op
     p(99.0000) =    151.279 s/op
     p(99.9000) =    151.279 s/op
     p(99.9900) =    151.279 s/op
     p(99.9990) =    151.279 s/op
     p(99.9999) =    151.279 s/op
    p(100.0000) =    151.279 s/op

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁵ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.alloc.rate.norm":
  1819.200 ±(99.9%) 3313.153 B/op [Average]
  (min, avg, max) = (1112.000, 1819.200, 8056.000), stdev = 2191.446
  CI (99.9%): [≈ 0, 5132.353] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 02:35:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 33.402 s/op
# Warmup Iteration   2: 9.148 s/op
# Warmup Iteration   3: 9.204 s/op
# Warmup Iteration   4: 9.058 s/op
# Warmup Iteration   5: 9.145 s/op
# Warmup Iteration   6: 9.025 s/op
# Warmup Iteration   7: 9.041 s/op
# Warmup Iteration   8: 9.095 s/op
# Warmup Iteration   9: 9.038 s/op
# Warmup Iteration  10: 9.020 s/op
Iteration   1: 9.020 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.079 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.180 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.042 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.290 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.024 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.076 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.037 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.703 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.240 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2133.843 bytes/s; standard: 34.520 s, 72829 bytes, 1007 methods; osr:  0.844 s, 2631 bytes, 8 methods; nmethods_size: 1875136 bytes; nmethods_code_size: 1333824 bytes}
  C2 {speed: 379.412 bytes/s; standard: 50.494 s, 14829 bytes, 102 methods; osr:  9.283 s, 7851 bytes, 13 methods; nmethods_size: 136096 bytes; nmethods_code_size: 83616 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1978.477 bytes/s; standard:  0.347 s, 686 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33752 bytes; nmethods_code_size: 21312 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2135.382 bytes/s; standard: 34.173 s, 72143 bytes, 866 methods; osr:  0.844 s, 2631 bytes, 8 methods; nmethods_size: 1841384 bytes; nmethods_code_size: 1312512 bytes}
  Tier4 {speed: 379.412 bytes/s; standard: 50.494 s, 14829 bytes, 102 methods; osr:  9.283 s, 7851 bytes, 13 methods; nmethods_size: 136096 bytes; nmethods_code_size: 83616 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  95.140 s
    Standard compilation   :  85.014 s, Average : 0.077 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :  10.126 s, Average : 0.482 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       35.251 s
       Setup time:            0.192 s
       Build HIR:            19.365 s
         Parse:                16.863 s
         Optimize blocks:       0.014 s
         GVN:                   0.795 s
         Null checks elim:      0.556 s
         Range checks elim:     0.398 s
         Other:                 0.738 s
       Emit LIR:              9.601 s
         LIR Gen:               3.837 s
         Linear Scan:           5.587 s
         Other:                 0.177 s
       Code Emission:         4.103 s
       Code Installation:     1.399 s
       Other:                 0.591 s

    C2 Compile Time:       65.104 s
       Parse:                16.108 s
       Optimize:             22.378 s
         Escape Analysis:       1.095 s
           Conn Graph:            0.873 s
           Macro Eliminate:       0.061 s
         GVN 1:                 2.538 s
         Incremental Inline:    0.577 s
           IdealLoop:             0.000 s
          (IGVN:                  0.202 s)
          (Inline:                0.269 s)
          (Prune Useless:         0.099 s)
           Other:                 0.577 s
         Vector:                0.813 s
           Box elimination:     0.811 s
             IGVN:              0.216 s
             Prune Useless:     0.103 s
         Renumber Live:         0.077 s
         IdealLoop:            12.218 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.403 s
         GVN 2:                 0.094 s
         Macro Expand:          1.733 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.519 s
         Other:                 2.311 s
       Matcher:                    5.699 s
         Post Selection Cleanup:   0.410 s
       Scheduler:                  4.915 s
       Regalloc:             10.239 s
         Ctor Chaitin:          0.014 s
         Build IFG (virt):      0.287 s
         Build IFG (phys):      1.686 s
         Compute Liveness:      2.855 s
         Regalloc Split:        1.505 s
         Postalloc Copy Rem:    2.141 s
         Merge multidefs:       0.246 s
         Fixup Spills:          0.142 s
         Compact:               0.024 s
         Coalesce 1:            0.537 s
         Coalesce 2:            0.185 s
         Coalesce 3:            0.071 s
         Cache LRG:             0.021 s
         Simplify:              0.226 s
         Select:                0.348 s
       Block Ordering:        0.431 s
       Peephole:              0.046 s
       Code Emission:           3.921 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.911 s
         Build OOP maps:        0.502 s
         Fill buffer:           1.229 s
         Code Installation:     0.106 s
         Other:                 0.174 s
       Other:                 1.261 s

  Total compiled methods    :     1130 methods
    Standard compilation    :     1109 methods
    On stack replacement    :       21 methods
  Total compiled bytecodes  :    98140 bytes
    Standard compilation    :    87658 bytes
    On stack replacement    :    10482 bytes
  Average compilation speed :     1031 bytes/s

  nmethod code size         :  2011232 bytes
  nmethod total size        :  1417440 bytes


Result "jvbench.somier.SomierBenchmark.explicitVec":
  N = 10
  mean =      9.169 ±(99.9%) 0.318 s/op

  Histogram, s/op:
    [9.000, 9.050) = 4 
    [9.050, 9.100) = 2 
    [9.100, 9.150) = 0 
    [9.150, 9.200) = 1 
    [9.200, 9.250) = 1 
    [9.250, 9.300) = 1 
    [9.300, 9.350) = 0 
    [9.350, 9.400) = 0 
    [9.400, 9.450) = 0 
    [9.450, 9.500) = 0 
    [9.500, 9.550) = 0 
    [9.550, 9.600) = 0 
    [9.600, 9.650) = 0 
    [9.650, 9.700) = 0 
    [9.700, 9.750) = 1 
    [9.750, 9.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.020 s/op
     p(50.0000) =      9.078 s/op
     p(90.0000) =      9.662 s/op
     p(95.0000) =      9.703 s/op
     p(99.0000) =      9.703 s/op
     p(99.9000) =      9.703 s/op
     p(99.9900) =      9.703 s/op
     p(99.9990) =      9.703 s/op
     p(99.9999) =      9.703 s/op
    p(100.0000) =      9.703 s/op

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.alloc.rate.norm":
  1745.600 ±(99.9%) 3318.201 B/op [Average]
  (min, avg, max) = (1048.000, 1745.600, 7992.000), stdev = 2194.784
  CI (99.9%): [≈ 0, 5063.801] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:56:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 32.598 s/op
# Warmup Iteration   2: 9.145 s/op
# Warmup Iteration   3: 9.146 s/op
# Warmup Iteration   4: 9.166 s/op
# Warmup Iteration   5: 9.151 s/op
# Warmup Iteration   6: 9.328 s/op
# Warmup Iteration   7: 9.129 s/op
# Warmup Iteration   8: 9.124 s/op
# Warmup Iteration   9: 9.141 s/op
# Warmup Iteration  10: 9.118 s/op
Iteration   1: 9.177 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.730 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.253 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.290 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.438 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.421 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.131 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.127 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.151 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.148 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2102.595 bytes/s; standard: 34.548 s, 72058 bytes, 999 methods; osr:  0.678 s, 2009 bytes, 7 methods; nmethods_size: 1840736 bytes; nmethods_code_size: 1307552 bytes}
  C2 {speed: 394.567 bytes/s; standard: 49.139 s, 15424 bytes, 108 methods; osr: 10.280 s, 8021 bytes, 15 methods; nmethods_size: 143520 bytes; nmethods_code_size: 88544 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1709.101 bytes/s; standard:  0.391 s, 668 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33072 bytes; nmethods_code_size: 20896 bytes}
  Tier2 {speed: 285.383 bytes/s; standard:  0.343 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2125.145 bytes/s; standard: 33.814 s, 71292 bytes, 860 methods; osr:  0.678 s, 2009 bytes, 7 methods; nmethods_size: 1806688 bytes; nmethods_code_size: 1286112 bytes}
  Tier4 {speed: 394.567 bytes/s; standard: 49.139 s, 15424 bytes, 108 methods; osr: 10.280 s, 8021 bytes, 15 methods; nmethods_size: 143520 bytes; nmethods_code_size: 88544 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  94.646 s
    Standard compilation   :  83.688 s, Average : 0.076 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :  10.959 s, Average : 0.498 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       35.128 s
       Setup time:            0.141 s
       Build HIR:            19.334 s
         Parse:                16.609 s
         Optimize blocks:       0.070 s
         GVN:                   0.954 s
         Null checks elim:      0.644 s
         Range checks elim:     0.470 s
         Other:                 0.587 s
       Emit LIR:              9.350 s
         LIR Gen:               3.806 s
         Linear Scan:           5.424 s
         Other:                 0.120 s
       Code Emission:         3.947 s
       Code Installation:     1.666 s
       Other:                 0.689 s

    C2 Compile Time:       64.769 s
       Parse:                16.354 s
       Optimize:             21.760 s
         Escape Analysis:       1.061 s
           Conn Graph:            0.863 s
           Macro Eliminate:       0.061 s
         GVN 1:                 2.644 s
         Incremental Inline:    0.569 s
           IdealLoop:             0.000 s
          (IGVN:                  0.186 s)
          (Inline:                0.284 s)
          (Prune Useless:         0.088 s)
           Other:                 0.569 s
         Vector:                0.821 s
           Box elimination:     0.819 s
             IGVN:              0.219 s
             Prune Useless:     0.107 s
         Renumber Live:         0.072 s
         IdealLoop:            11.686 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.369 s
         GVN 2:                 0.101 s
         Macro Expand:          1.589 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.451 s
         Other:                 2.394 s
       Matcher:                    5.441 s
         Post Selection Cleanup:   0.468 s
       Scheduler:                  5.153 s
       Regalloc:              9.919 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.272 s
         Build IFG (phys):      1.512 s
         Compute Liveness:      2.740 s
         Regalloc Split:        1.420 s
         Postalloc Copy Rem:    2.275 s
         Merge multidefs:       0.249 s
         Fixup Spills:          0.146 s
         Compact:               0.022 s
         Coalesce 1:            0.527 s
         Coalesce 2:            0.206 s
         Coalesce 3:            0.064 s
         Cache LRG:             0.018 s
         Simplify:              0.221 s
         Select:                0.347 s
       Block Ordering:        0.539 s
       Peephole:              0.050 s
       Code Emission:           4.126 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.947 s
         Build OOP maps:        0.503 s
         Fill buffer:           1.204 s
         Code Installation:     0.191 s
         Other:                 0.280 s
       Other:                 1.237 s

  Total compiled methods    :     1129 methods
    Standard compilation    :     1107 methods
    On stack replacement    :       22 methods
  Total compiled bytecodes  :    97512 bytes
    Standard compilation    :    87482 bytes
    On stack replacement    :    10030 bytes
  Average compilation speed :     1030 bytes/s

  nmethod code size         :  1984256 bytes
  nmethod total size        :  1396096 bytes


Result "jvbench.somier.SomierBenchmark.fullVec":
  N = 10
  mean =      9.287 ±(99.9%) 0.293 s/op

  Histogram, s/op:
    [9.100, 9.150) = 3 
    [9.150, 9.200) = 2 
    [9.200, 9.250) = 0 
    [9.250, 9.300) = 2 
    [9.300, 9.350) = 0 
    [9.350, 9.400) = 0 
    [9.400, 9.450) = 2 
    [9.450, 9.500) = 0 
    [9.500, 9.550) = 0 
    [9.550, 9.600) = 0 
    [9.600, 9.650) = 0 
    [9.650, 9.700) = 0 
    [9.700, 9.750) = 1 
    [9.750, 9.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.127 s/op
     p(50.0000) =      9.215 s/op
     p(90.0000) =      9.701 s/op
     p(95.0000) =      9.730 s/op
     p(99.0000) =      9.730 s/op
     p(99.9000) =      9.730 s/op
     p(99.9900) =      9.730 s/op
     p(99.9990) =      9.730 s/op
     p(99.9999) =      9.730 s/op
    p(100.0000) =      9.730 s/op

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.alloc.rate.norm":
  1745.600 ±(99.9%) 3318.201 B/op [Average]
  (min, avg, max) = (1048.000, 1745.600, 7992.000), stdev = 2194.784
  CI (99.9%): [≈ 0, 5063.801] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsteps=10 -Dn=128 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.somier.SomierBenchmark.serial

# Run progress: 75.00% complete, ETA 00:20:25
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 183.896 s/op
# Warmup Iteration   2: 152.202 s/op
# Warmup Iteration   3: 151.553 s/op
# Warmup Iteration   4: 151.551 s/op
# Warmup Iteration   5: 151.476 s/op
# Warmup Iteration   6: 151.467 s/op
# Warmup Iteration   7: 151.459 s/op
# Warmup Iteration   8: 151.524 s/op
# Warmup Iteration   9: 151.607 s/op
# Warmup Iteration  10: 151.415 s/op
Iteration   1: 151.406 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 8056.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 151.415 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 151.415 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 151.885 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 151.577 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 151.416 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 151.420 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 151.413 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 151.466 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 151.500 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1144.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2093.965 bytes/s; standard: 30.019 s, 62636 bytes, 857 methods; osr:  0.643 s, 1569 bytes, 8 methods; nmethods_size: 1335616 bytes; nmethods_code_size: 939680 bytes}
  C2 {speed: 170.225 bytes/s; standard: 36.225 s, 6032 bytes, 59 methods; osr:  5.749 s, 1113 bytes, 9 methods; nmethods_size: 79560 bytes; nmethods_code_size: 50976 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1273.396 bytes/s; standard:  0.513 s, 653 bytes, 135 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32456 bytes; nmethods_code_size: 20544 bytes}
  Tier2 {speed: 489.455 bytes/s; standard:  0.200 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2118.742 bytes/s; standard: 29.306 s, 61885 bytes, 721 methods; osr:  0.643 s, 1569 bytes, 8 methods; nmethods_size: 1302184 bytes; nmethods_code_size: 918592 bytes}
  Tier4 {speed: 170.225 bytes/s; standard: 36.225 s, 6032 bytes, 59 methods; osr:  5.749 s, 1113 bytes, 9 methods; nmethods_size: 79560 bytes; nmethods_code_size: 50976 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  73.156 s
    Standard compilation   :  66.243 s, Average : 0.072 s
    Bailed out compilation :   0.520 s, Average : 0.520 s
    On stack replacement   :   6.392 s, Average : 0.376 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       31.081 s
       Setup time:            0.232 s
       Build HIR:            17.059 s
         Parse:                14.367 s
         Optimize blocks:       0.036 s
         GVN:                   0.870 s
         Null checks elim:      0.701 s
         Range checks elim:     0.469 s
         Other:                 0.615 s
       Emit LIR:              8.291 s
         LIR Gen:               3.429 s
         Linear Scan:           4.782 s
         Other:                 0.081 s
       Code Emission:         3.466 s
       Code Installation:     1.344 s
       Other:                 0.689 s

    C2 Compile Time:       47.254 s
       Parse:                10.133 s
       Optimize:             17.035 s
         Escape Analysis:       0.814 s
           Conn Graph:            0.723 s
           Macro Eliminate:       0.004 s
         GVN 1:                 2.282 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             9.802 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.377 s
         GVN 2:                 0.091 s
         Macro Expand:          1.373 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.458 s
         Other:                 1.835 s
       Matcher:                    4.702 s
         Post Selection Cleanup:   0.277 s
       Scheduler:                  3.880 s
       Regalloc:              6.659 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.172 s
         Build IFG (phys):      0.994 s
         Compute Liveness:      1.933 s
         Regalloc Split:        1.051 s
         Postalloc Copy Rem:    1.145 s
         Merge multidefs:       0.148 s
         Fixup Spills:          0.121 s
         Compact:               0.019 s
         Coalesce 1:            0.439 s
         Coalesce 2:            0.194 s
         Coalesce 3:            0.065 s
         Cache LRG:             0.012 s
         Simplify:              0.128 s
         Select:                0.250 s
       Block Ordering:        0.356 s
       Peephole:              0.046 s
       Code Emission:           3.108 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.427 s
         Build OOP maps:        0.461 s
         Fill buffer:           0.891 s
         Code Installation:     0.092 s
         Other:                 0.236 s
       Other:                 1.244 s

  Total compiled methods    :      933 methods
    Standard compilation    :      916 methods
    On stack replacement    :       17 methods
  Total compiled bytecodes  :    71350 bytes
    Standard compilation    :    68668 bytes
    On stack replacement    :     2682 bytes
  Average compilation speed :      975 bytes/s

  nmethod code size         :  1415176 bytes
  nmethod total size        :   990656 bytes


Result "jvbench.somier.SomierBenchmark.serial":
  N = 10
  mean =    151.491 ±(99.9%) 0.225 s/op

  Histogram, s/op:
    [151.400, 151.450) = 6 
    [151.450, 151.500) = 2 
    [151.500, 151.550) = 0 
    [151.550, 151.600) = 1 
    [151.600, 151.650) = 0 
    [151.650, 151.700) = 0 
    [151.700, 151.750) = 0 
    [151.750, 151.800) = 0 
    [151.800, 151.850) = 0 

  Percentiles, s/op:
      p(0.0000) =    151.406 s/op
     p(50.0000) =    151.418 s/op
     p(90.0000) =    151.854 s/op
     p(95.0000) =    151.885 s/op
     p(99.0000) =    151.885 s/op
     p(99.9000) =    151.885 s/op
     p(99.9900) =    151.885 s/op
     p(99.9990) =    151.885 s/op
     p(99.9999) =    151.885 s/op
    p(100.0000) =    151.885 s/op

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁵ MB/sec

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.alloc.rate.norm":
  1822.400 ±(99.9%) 3311.454 B/op [Average]
  (min, avg, max) = (1112.000, 1822.400, 8056.000), stdev = 2190.321
  CI (99.9%): [≈ 0, 5133.854] (assumes normal distribution)

Secondary result "jvbench.somier.SomierBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 01:53:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                        Mode  Cnt     Score      Error   Units
SomierBenchmark.autoVec                            ss   10   150.291 ±    0.534    s/op
SomierBenchmark.autoVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁵             MB/sec
SomierBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1819.200 ± 3313.153    B/op
SomierBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
SomierBenchmark.explicitVec                        ss   10     9.169 ±    0.318    s/op
SomierBenchmark.explicitVec:·gc.alloc.rate         ss   10    ≈ 10⁻⁴             MB/sec
SomierBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1745.600 ± 3318.201    B/op
SomierBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
SomierBenchmark.fullVec                            ss   10     9.287 ±    0.293    s/op
SomierBenchmark.fullVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁴             MB/sec
SomierBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1745.600 ± 3318.201    B/op
SomierBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
SomierBenchmark.serial                             ss   10   151.491 ±    0.225    s/op
SomierBenchmark.serial:·gc.alloc.rate              ss   10    ≈ 10⁻⁵             MB/sec
SomierBenchmark.serial:·gc.alloc.rate.norm         ss   10  1822.400 ± 3311.454    B/op
SomierBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_total/2024-05-14_16:31:12/somier/SomierBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2825.588 bytes/s; standard: 37.110 s, 104991 bytes, 1221 methods; osr:  0.277 s, 649 bytes, 1 methods; nmethods_size: 2132112 bytes; nmethods_code_size: 1506464 bytes}
  C2 {speed: 342.041 bytes/s; standard: 47.008 s, 18137 bytes, 121 methods; osr:  6.477 s, 157 bytes, 3 methods; nmethods_size: 151616 bytes; nmethods_code_size: 94464 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1347.497 bytes/s; standard:  0.511 s, 688 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34896 bytes; nmethods_code_size: 21984 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2846.053 bytes/s; standard: 36.599 s, 104303 bytes, 1076 methods; osr:  0.277 s, 649 bytes, 1 methods; nmethods_size: 2097216 bytes; nmethods_code_size: 1484480 bytes}
  Tier4 {speed: 342.041 bytes/s; standard: 47.008 s, 18137 bytes, 121 methods; osr:  6.477 s, 157 bytes, 3 methods; nmethods_size: 151616 bytes; nmethods_code_size: 94464 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  90.872 s
    Standard compilation   :  84.117 s, Average : 0.063 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   6.755 s, Average : 1.689 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       37.175 s
       Setup time:            0.196 s
       Build HIR:            19.511 s
         Parse:                16.189 s
         Optimize blocks:       0.023 s
         GVN:                   1.201 s
         Null checks elim:      0.709 s
         Range checks elim:     0.445 s
         Other:                 0.944 s
       Emit LIR:             11.128 s
         LIR Gen:               4.121 s
         Linear Scan:           6.870 s
         Other:                 0.136 s
       Code Emission:         3.884 s
       Code Installation:     1.723 s
       Other:                 0.734 s

    C2 Compile Time:       59.378 s
       Parse:                13.230 s
       Optimize:             18.585 s
         Escape Analysis:       0.942 s
           Conn Graph:            0.871 s
           Macro Eliminate:       0.004 s
         GVN 1:                 2.551 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.027 s
         IdealLoop:            10.147 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.490 s
         GVN 2:                 0.110 s
         Macro Expand:          1.766 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.502 s
         Other:                 2.048 s
       Matcher:                    5.435 s
         Post Selection Cleanup:   0.451 s
       Scheduler:                  5.101 s
       Regalloc:             10.288 s
         Ctor Chaitin:          0.040 s
         Build IFG (virt):      0.265 s
         Build IFG (phys):      1.620 s
         Compute Liveness:      2.927 s
         Regalloc Split:        1.661 s
         Postalloc Copy Rem:    2.094 s
         Merge multidefs:       0.216 s
         Fixup Spills:          0.131 s
         Compact:               0.028 s
         Coalesce 1:            0.703 s
         Coalesce 2:            0.274 s
         Coalesce 3:            0.078 s
         Cache LRG:             0.017 s
         Simplify:              0.192 s
         Select:                0.293 s
       Block Ordering:        0.517 s
       Peephole:              0.078 s
       Code Emission:           4.644 s
         Insn Scheduling:       0.000 s
         Shorten branches:      2.184 s
         Build OOP maps:        0.522 s
         Fill buffer:           1.434 s
         Code Installation:     0.126 s
         Other:                 0.377 s
       Other:                 1.373 s

  Total compiled methods    :     1346 methods
    Standard compilation    :     1342 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   123934 bytes
    Standard compilation    :   123128 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     1363 bytes/s

  nmethod code size         :  2283728 bytes
  nmethod total size        :  1600928 bytes
