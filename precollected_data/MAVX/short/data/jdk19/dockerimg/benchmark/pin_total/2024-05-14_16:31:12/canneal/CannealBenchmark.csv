"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"jvbench.canneal.CannealBenchmark.autoVec","ss",1,10,18.605083,0.683443,"s/op"
"jvbench.canneal.CannealBenchmark.autoVec:·gc.alloc.rate","ss",1,10,0.000337,0.000146,"MB/sec"
"jvbench.canneal.CannealBenchmark.autoVec:·gc.alloc.rate.norm","ss",1,10,6778.400000,3173.333001,"B/op"
"jvbench.canneal.CannealBenchmark.autoVec:·gc.count","ss",1,10,0.000000,NaN,"counts"
"jvbench.canneal.CannealBenchmark.explicitVec","ss",1,10,33.261136,1.179781,"s/op"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.alloc.rate","ss",1,10,60.173223,2.197058,"MB/sec"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.alloc.rate.norm","ss",1,10,2131519946.400000,856422.063445,"B/op"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.churn.G1_Eden_Space","ss",1,10,34.463319,164.766116,"MB/sec"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.churn.G1_Eden_Space.norm","ss",1,10,1218025881.600000,5823275267.331397,"B/op"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.count","ss",1,10,1.000000,NaN,"counts"
"jvbench.canneal.CannealBenchmark.explicitVec:·gc.time","ss",1,10,113.000000,NaN,"ms"
"jvbench.canneal.CannealBenchmark.fullVec","ss",1,10,30.985561,0.664103,"s/op"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.alloc.rate","ss",1,10,64.502656,1.420838,"MB/sec"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.alloc.rate.norm","ss",1,10,2131519946.400000,856442.331692,"B/op"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.churn.G1_Eden_Space","ss",1,10,36.660009,175.268297,"MB/sec"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.churn.G1_Eden_Space.norm","ss",1,10,1224736768.000000,5855359428.583911,"B/op"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.count","ss",1,10,1.000000,NaN,"counts"
"jvbench.canneal.CannealBenchmark.fullVec:·gc.time","ss",1,10,110.000000,NaN,"ms"
"jvbench.canneal.CannealBenchmark.serial","ss",1,10,19.000528,0.650591,"s/op"
"jvbench.canneal.CannealBenchmark.serial:·gc.alloc.rate","ss",1,10,0.000331,0.000161,"MB/sec"
"jvbench.canneal.CannealBenchmark.serial:·gc.alloc.rate.norm","ss",1,10,6775.200000,3158.034478,"B/op"
"jvbench.canneal.CannealBenchmark.serial:·gc.count","ss",1,10,0.000000,NaN,"counts"
