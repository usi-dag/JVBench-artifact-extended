# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 28.108 s/op
# Warmup Iteration   2: 25.043 s/op
# Warmup Iteration   3: 310.799 s/op
# Warmup Iteration   4: 361.526 s/op
# Warmup Iteration   5: 384.942 s/op
# Warmup Iteration   6: 384.915 s/op
# Warmup Iteration   7: 384.657 s/op
# Warmup Iteration   8: 384.757 s/op
# Warmup Iteration   9: 384.902 s/op
# Warmup Iteration  10: 55.835 s/op
Iteration   1: 55.469 s/op
Iteration   2: 55.821 s/op
Iteration   3: 55.469 s/op
Iteration   4: 55.812 s/op
Iteration   5: 55.463 s/op
Iteration   6: 55.813 s/op
Iteration   7: 55.465 s/op
Iteration   8: 55.782 s/op
Iteration   9: 55.500 s/op
Iteration  10: 55.829 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2365.747 bytes/s; standard: 18.674 s, 43878 bytes, 616 methods; osr:  0.074 s, 477 bytes, 3 methods; nmethods_size: 855352 bytes; nmethods_code_size: 605216 bytes}
  C2 {speed: 152.656 bytes/s; standard: 31.961 s, 4672 bytes, 48 methods; osr:  1.985 s, 510 bytes, 4 methods; nmethods_size: 50144 bytes; nmethods_code_size: 33248 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3323.201 bytes/s; standard:  0.150 s, 499 bytes, 104 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 24928 bytes; nmethods_code_size: 15776 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2358.017 bytes/s; standard: 18.524 s, 43379 bytes, 512 methods; osr:  0.074 s, 477 bytes, 3 methods; nmethods_size: 830424 bytes; nmethods_code_size: 589440 bytes}
  Tier4 {speed: 152.656 bytes/s; standard: 31.961 s, 4672 bytes, 48 methods; osr:  1.985 s, 510 bytes, 4 methods; nmethods_size: 50144 bytes; nmethods_code_size: 33248 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  52.905 s
    Standard compilation   :  50.635 s, Average : 0.076 s
    Bailed out compilation :   0.211 s, Average : 0.211 s
    On stack replacement   :   2.059 s, Average : 0.294 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       18.911 s
       Setup time:            0.041 s
       Build HIR:            11.054 s
         Parse:                 9.121 s
         Optimize blocks:       0.011 s
         GVN:                   0.637 s
         Null checks elim:      0.373 s
         Range checks elim:     0.372 s
         Other:                 0.540 s
       Emit LIR:              4.495 s
         LIR Gen:               2.187 s
         Linear Scan:           2.203 s
         Other:                 0.105 s
       Code Emission:         2.227 s
       Code Installation:     0.765 s
       Other:                 0.328 s

    C2 Compile Time:       39.141 s
       Parse:                 9.809 s
       Optimize:             13.857 s
         Escape Analysis:       0.864 s
           Conn Graph:            0.818 s
           Macro Eliminate:       0.010 s
         GVN 1:                 1.881 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             7.477 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.272 s
         GVN 2:                 0.046 s
         Macro Expand:          1.332 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.408 s
         Other:                 1.574 s
       Matcher:                    3.733 s
         Post Selection Cleanup:   0.253 s
       Scheduler:                  2.986 s
       Regalloc:              3.880 s
         Ctor Chaitin:          0.026 s
         Build IFG (virt):      0.123 s
         Build IFG (phys):      0.432 s
         Compute Liveness:      1.281 s
         Regalloc Split:        0.915 s
         Postalloc Copy Rem:    0.402 s
         Merge multidefs:       0.076 s
         Fixup Spills:          0.105 s
         Compact:               0.008 s
         Coalesce 1:            0.359 s
         Coalesce 2:            0.157 s
         Coalesce 3:            0.033 s
         Cache LRG:             0.008 s
         Simplify:              0.053 s
         Select:                0.092 s
       Block Ordering:        0.452 s
       Peephole:              0.037 s
       Code Emission:           2.963 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.395 s
         Build OOP maps:        0.250 s
         Fill buffer:           0.967 s
         Code Installation:     0.127 s
         Other:                 0.224 s
       Other:                 1.296 s

  Total compiled methods    :      671 methods
    Standard compilation    :      664 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    49537 bytes
    Standard compilation    :    48550 bytes
    On stack replacement    :      987 bytes
  Average compilation speed :      936 bytes/s

  nmethod code size         :   905496 bytes
  nmethod total size        :   638464 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =     55.642 Â±(99.9%) 0.271 s/op

  Histogram, s/op:
    [55.400, 55.450) = 0 
    [55.450, 55.500) = 5 
    [55.500, 55.550) = 0 
    [55.550, 55.600) = 0 
    [55.600, 55.650) = 0 
    [55.650, 55.700) = 0 
    [55.700, 55.750) = 0 
    [55.750, 55.800) = 1 
    [55.800, 55.850) = 4 

  Percentiles, s/op:
      p(0.0000) =     55.463 s/op
     p(50.0000) =     55.641 s/op
     p(90.0000) =     55.828 s/op
     p(95.0000) =     55.829 s/op
     p(99.0000) =     55.829 s/op
     p(99.9000) =     55.829 s/op
     p(99.9900) =     55.829 s/op
     p(99.9990) =     55.829 s/op
     p(99.9999) =     55.829 s/op
    p(100.0000) =     55.829 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 02:45:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 46.672 s/op
# Warmup Iteration   2: 29.083 s/op
# Warmup Iteration   3: 29.146 s/op
# Warmup Iteration   4: 28.955 s/op
# Warmup Iteration   5: 29.227 s/op
# Warmup Iteration   6: 28.840 s/op
# Warmup Iteration   7: 29.218 s/op
# Warmup Iteration   8: 28.834 s/op
# Warmup Iteration   9: 29.111 s/op
# Warmup Iteration  10: 28.922 s/op
Iteration   1: 28.265 s/op
Iteration   2: 29.051 s/op
Iteration   3: 28.919 s/op
Iteration   4: 28.824 s/op
Iteration   5: 28.955 s/op
Iteration   6: 29.062 s/op
Iteration   7: 28.804 s/op
Iteration   8: 28.827 s/op
Iteration   9: 29.218 s/op
Iteration  10: 28.813 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2291.934 bytes/s; standard: 22.194 s, 51055 bytes, 756 methods; osr:  0.553 s, 1081 bytes, 3 methods; nmethods_size: 1143184 bytes; nmethods_code_size: 819168 bytes}
  C2 {speed: 247.906 bytes/s; standard: 34.430 s, 6794 bytes, 70 methods; osr:  3.165 s, 2526 bytes, 8 methods; nmethods_size: 72376 bytes; nmethods_code_size: 44480 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2956.927 bytes/s; standard:  0.184 s, 544 bytes, 113 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 27096 bytes; nmethods_code_size: 17152 bytes}
  Tier2 {speed: 545.453 bytes/s; standard:  0.180 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2300.487 bytes/s; standard: 21.831 s, 50413 bytes, 642 methods; osr:  0.553 s, 1081 bytes, 3 methods; nmethods_size: 1115112 bytes; nmethods_code_size: 801472 bytes}
  Tier4 {speed: 247.906 bytes/s; standard: 34.430 s, 6794 bytes, 70 methods; osr:  3.165 s, 2526 bytes, 8 methods; nmethods_size: 72376 bytes; nmethods_code_size: 44480 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  60.343 s
    Standard compilation   :  56.624 s, Average : 0.069 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.719 s, Average : 0.338 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.687 s
       Setup time:            0.020 s
       Build HIR:            13.244 s
         Parse:                11.113 s
         Optimize blocks:       0.027 s
         GVN:                   0.538 s
         Null checks elim:      0.559 s
         Range checks elim:     0.429 s
         Other:                 0.577 s
       Emit LIR:              5.122 s
         LIR Gen:               2.631 s
         Linear Scan:           2.392 s
         Other:                 0.098 s
       Code Emission:         2.780 s
       Code Installation:     1.100 s
       Other:                 0.421 s

    C2 Compile Time:       42.564 s
       Parse:                11.840 s
       Optimize:             13.616 s
         Escape Analysis:       0.977 s
           Conn Graph:            0.809 s
           Macro Eliminate:       0.060 s
         GVN 1:                 1.719 s
         Incremental Inline:    0.316 s
           IdealLoop:             0.000 s
          (IGVN:                  0.073 s)
          (Inline:                0.218 s)
          (Prune Useless:         0.017 s)
           Other:                 0.316 s
         Vector:                0.628 s
           Box elimination:     0.627 s
             IGVN:              0.101 s
             Prune Useless:     0.014 s
         Renumber Live:         0.018 s
         IdealLoop:             6.235 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.271 s
         GVN 2:                 0.039 s
         Macro Expand:          1.543 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.385 s
         Other:                 1.483 s
       Matcher:                    3.999 s
         Post Selection Cleanup:   0.324 s
       Scheduler:                  3.405 s
       Regalloc:              4.360 s
         Ctor Chaitin:          0.049 s
         Build IFG (virt):      0.145 s
         Build IFG (phys):      0.550 s
         Compute Liveness:      1.380 s
         Regalloc Split:        1.000 s
         Postalloc Copy Rem:    0.440 s
         Merge multidefs:       0.074 s
         Fixup Spills:          0.142 s
         Compact:               0.018 s
         Coalesce 1:            0.426 s
         Coalesce 2:            0.161 s
         Coalesce 3:            0.042 s
         Cache LRG:             0.003 s
         Simplify:              0.056 s
         Select:                0.090 s
       Block Ordering:        0.374 s
       Peephole:              0.056 s
       Code Emission:           3.528 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.688 s
         Build OOP maps:        0.329 s
         Fill buffer:           1.128 s
         Code Installation:     0.135 s
         Other:                 0.248 s
       Other:                 1.250 s

  Total compiled methods    :      837 methods
    Standard compilation    :      826 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    61456 bytes
    Standard compilation    :    57849 bytes
    On stack replacement    :     3607 bytes
  Average compilation speed :     1018 bytes/s

  nmethod code size         :  1215560 bytes
  nmethod total size        :   863648 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =     28.874 Â±(99.9%) 0.383 s/op

  Histogram, s/op:
    [28.200, 28.300) = 1 
    [28.300, 28.400) = 0 
    [28.400, 28.500) = 0 
    [28.500, 28.600) = 0 
    [28.600, 28.700) = 0 
    [28.700, 28.800) = 0 
    [28.800, 28.900) = 4 
    [28.900, 29.000) = 2 
    [29.000, 29.100) = 2 
    [29.100, 29.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     28.265 s/op
     p(50.0000) =     28.873 s/op
     p(90.0000) =     29.202 s/op
     p(95.0000) =     29.218 s/op
     p(99.0000) =     29.218 s/op
     p(99.9000) =     29.218 s/op
     p(99.9900) =     29.218 s/op
     p(99.9990) =     29.218 s/op
     p(99.9999) =     29.218 s/op
    p(100.0000) =     29.218 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 01:06:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 155.856 s/op
# Warmup Iteration   2: 7.866 s/op
# Warmup Iteration   3: 29.787 s/op
# Warmup Iteration   4: 29.891 s/op
# Warmup Iteration   5: 29.675 s/op
# Warmup Iteration   6: 29.717 s/op
# Warmup Iteration   7: 29.970 s/op
# Warmup Iteration   8: 29.646 s/op
# Warmup Iteration   9: 29.665 s/op
# Warmup Iteration  10: 30.039 s/op
Iteration   1: 7.618 s/op
Iteration   2: 7.831 s/op
Iteration   3: 29.662 s/op
Iteration   4: 29.786 s/op
Iteration   5: 29.894 s/op
Iteration   6: 29.672 s/op
Iteration   7: 29.641 s/op
Iteration   8: 30.040 s/op
Iteration   9: 29.648 s/op
Iteration  10: 29.668 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2402.796 bytes/s; standard: 20.882 s, 50319 bytes, 739 methods; osr:  0.668 s, 1463 bytes, 4 methods; nmethods_size: 1179712 bytes; nmethods_code_size: 844960 bytes}
  C2 {speed: 226.209 bytes/s; standard: 37.254 s, 7900 bytes, 72 methods; osr:  4.274 s, 1494 bytes, 7 methods; nmethods_size: 70808 bytes; nmethods_code_size: 43136 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2251.791 bytes/s; standard:  0.224 s, 504 bytes, 105 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 25112 bytes; nmethods_code_size: 15872 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2404.380 bytes/s; standard: 20.659 s, 49815 bytes, 634 methods; osr:  0.668 s, 1463 bytes, 4 methods; nmethods_size: 1154600 bytes; nmethods_code_size: 829088 bytes}
  Tier4 {speed: 226.209 bytes/s; standard: 37.254 s, 7900 bytes, 72 methods; osr:  4.274 s, 1494 bytes, 7 methods; nmethods_size: 70808 bytes; nmethods_code_size: 43136 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  63.394 s
    Standard compilation   :  58.136 s, Average : 0.072 s
    Bailed out compilation :   0.316 s, Average : 0.316 s
    On stack replacement   :   4.942 s, Average : 0.449 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.722 s
       Setup time:            0.037 s
       Build HIR:            12.199 s
         Parse:                10.472 s
         Optimize blocks:       0.011 s
         GVN:                   0.530 s
         Null checks elim:      0.405 s
         Range checks elim:     0.385 s
         Other:                 0.396 s
       Emit LIR:              5.137 s
         LIR Gen:               2.633 s
         Linear Scan:           2.417 s
         Other:                 0.086 s
       Code Emission:         2.727 s
       Code Installation:     1.145 s
       Other:                 0.479 s

    C2 Compile Time:       46.325 s
       Parse:                13.220 s
       Optimize:             15.401 s
         Escape Analysis:       1.036 s
           Conn Graph:            0.775 s
           Macro Eliminate:       0.121 s
         GVN 1:                 1.805 s
         Incremental Inline:    0.254 s
           IdealLoop:             0.000 s
          (IGVN:                  0.031 s)
          (Inline:                0.205 s)
          (Prune Useless:         0.012 s)
           Other:                 0.254 s
         Vector:                0.521 s
           Box elimination:     0.519 s
             IGVN:              0.046 s
             Prune Useless:     0.010 s
         Renumber Live:         0.019 s
         IdealLoop:             7.945 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.258 s
         GVN 2:                 0.040 s
         Macro Expand:          1.445 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.410 s
         Other:                 1.666 s
       Matcher:                    4.359 s
         Post Selection Cleanup:   0.287 s
       Scheduler:                  3.536 s
       Regalloc:              4.540 s
         Ctor Chaitin:          0.026 s
         Build IFG (virt):      0.153 s
         Build IFG (phys):      0.549 s
         Compute Liveness:      1.527 s
         Regalloc Split:        1.048 s
         Postalloc Copy Rem:    0.529 s
         Merge multidefs:       0.052 s
         Fixup Spills:          0.132 s
         Compact:               0.005 s
         Coalesce 1:            0.395 s
         Coalesce 2:            0.196 s
         Coalesce 3:            0.100 s
         Cache LRG:             0.003 s
         Simplify:              0.073 s
         Select:                0.098 s
       Block Ordering:        0.365 s
       Peephole:              0.056 s
       Code Emission:           3.481 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.589 s
         Build OOP maps:        0.331 s
         Fill buffer:           1.295 s
         Code Installation:     0.084 s
         Other:                 0.182 s
       Other:                 1.283 s

  Total compiled methods    :      822 methods
    Standard compilation    :      811 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    61176 bytes
    Standard compilation    :    58219 bytes
    On stack replacement    :     2957 bytes
  Average compilation speed :      965 bytes/s

  nmethod code size         :  1250520 bytes
  nmethod total size        :   888096 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =     25.346 Â±(99.9%) 14.042 s/op

  Histogram, s/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 0 
    [ 7.500, 10.000) = 2 
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 7 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.618 s/op
     p(50.0000) =     29.665 s/op
     p(90.0000) =     30.025 s/op
     p(95.0000) =     30.040 s/op
     p(99.0000) =     30.040 s/op
     p(99.9000) =     30.040 s/op
     p(99.9900) =     30.040 s/op
     p(99.9990) =     30.040 s/op
     p(99.9999) =     30.040 s/op
    p(100.0000) =     30.040 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:26:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 27.198 s/op
# Warmup Iteration   2: 408.076 s/op
# Warmup Iteration   3: 325.005 s/op
# Warmup Iteration   4: 385.052 s/op
# Warmup Iteration   5: 407.174 s/op
# Warmup Iteration   6: 406.795 s/op
# Warmup Iteration   7: 407.000 s/op
# Warmup Iteration   8: 406.954 s/op
# Warmup Iteration   9: 406.916 s/op
# Warmup Iteration  10: 101.857 s/op
Iteration   1: 101.682 s/op
Iteration   2: 101.695 s/op
Iteration   3: 101.740 s/op
Iteration   4: 101.681 s/op
Iteration   5: 101.669 s/op
Iteration   6: 101.669 s/op
Iteration   7: 101.664 s/op
Iteration   8: 101.668 s/op
Iteration   9: 101.693 s/op
Iteration  10: 101.673 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2168.537 bytes/s; standard: 20.702 s, 44585 bytes, 619 methods; osr:  0.077 s, 477 bytes, 3 methods; nmethods_size: 863632 bytes; nmethods_code_size: 611296 bytes}
  C2 {speed: 169.710 bytes/s; standard: 27.730 s, 4502 bytes, 46 methods; osr:  1.803 s, 510 bytes, 4 methods; nmethods_size: 48544 bytes; nmethods_code_size: 32320 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3214.064 bytes/s; standard:  0.158 s, 509 bytes, 106 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 25424 bytes; nmethods_code_size: 16096 bytes}
  Tier2 {speed: 671.468 bytes/s; standard:  0.146 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2171.121 bytes/s; standard: 20.398 s, 43978 bytes, 512 methods; osr:  0.077 s, 477 bytes, 3 methods; nmethods_size: 837232 bytes; nmethods_code_size: 594656 bytes}
  Tier4 {speed: 169.710 bytes/s; standard: 27.730 s, 4502 bytes, 46 methods; osr:  1.803 s, 510 bytes, 4 methods; nmethods_size: 48544 bytes; nmethods_code_size: 32320 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  50.551 s
    Standard compilation   :  48.432 s, Average : 0.073 s
    Bailed out compilation :   0.239 s, Average : 0.119 s
    On stack replacement   :   1.880 s, Average : 0.269 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.959 s
       Setup time:            0.029 s
       Build HIR:            12.065 s
         Parse:                10.020 s
         Optimize blocks:       0.033 s
         GVN:                   0.669 s
         Null checks elim:      0.443 s
         Range checks elim:     0.390 s
         Other:                 0.510 s
       Emit LIR:              4.875 s
         LIR Gen:               2.546 s
         Linear Scan:           2.234 s
         Other:                 0.094 s
       Code Emission:         2.558 s
       Code Installation:     0.961 s
       Other:                 0.471 s

    C2 Compile Time:       34.821 s
       Parse:                 8.135 s
       Optimize:             11.243 s
         Escape Analysis:       0.676 s
           Conn Graph:            0.611 s
           Macro Eliminate:       0.003 s
         GVN 1:                 1.860 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.443 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.209 s
         GVN 2:                 0.038 s
         Macro Expand:          1.326 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.472 s
         Other:                 1.217 s
       Matcher:                    3.687 s
         Post Selection Cleanup:   0.255 s
       Scheduler:                  2.793 s
       Regalloc:              3.971 s
         Ctor Chaitin:          0.016 s
         Build IFG (virt):      0.095 s
         Build IFG (phys):      0.537 s
         Compute Liveness:      1.301 s
         Regalloc Split:        0.869 s
         Postalloc Copy Rem:    0.468 s
         Merge multidefs:       0.060 s
         Fixup Spills:          0.109 s
         Compact:               0.007 s
         Coalesce 1:            0.279 s
         Coalesce 2:            0.163 s
         Coalesce 3:            0.042 s
         Cache LRG:             0.003 s
         Simplify:              0.047 s
         Select:                0.087 s
       Block Ordering:        0.432 s
       Peephole:              0.050 s
       Code Emission:           3.186 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.449 s
         Build OOP maps:        0.266 s
         Fill buffer:           0.939 s
         Code Installation:     0.228 s
         Other:                 0.305 s
       Other:                 1.096 s

  Total compiled methods    :      672 methods
    Standard compilation    :      665 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    50074 bytes
    Standard compilation    :    49087 bytes
    On stack replacement    :      987 bytes
  Average compilation speed :      990 bytes/s

  nmethod code size         :   912176 bytes
  nmethod total size        :   643616 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =    101.684 Â±(99.9%) 0.034 s/op

  Histogram, s/op:
    [101.660, 101.665) = 1 
    [101.665, 101.670) = 3 
    [101.670, 101.675) = 1 
    [101.675, 101.680) = 0 
    [101.680, 101.685) = 2 
    [101.685, 101.690) = 0 
    [101.690, 101.695) = 2 
    [101.695, 101.700) = 0 
    [101.700, 101.705) = 0 
    [101.705, 101.710) = 0 
    [101.710, 101.715) = 0 
    [101.715, 101.720) = 0 
    [101.720, 101.725) = 0 
    [101.725, 101.730) = 0 
    [101.730, 101.735) = 0 
    [101.735, 101.740) = 0 
    [101.740, 101.745) = 1 
    [101.745, 101.750) = 0 

  Percentiles, s/op:
      p(0.0000) =    101.664 s/op
     p(50.0000) =    101.677 s/op
     p(90.0000) =    101.736 s/op
     p(95.0000) =    101.740 s/op
     p(99.0000) =    101.740 s/op
     p(99.9000) =    101.740 s/op
     p(99.9900) =    101.740 s/op
     p(99.9990) =    101.740 s/op
     p(99.9999) =    101.740 s/op
    p(100.0000) =    101.740 s/op


# Run complete. Total time: 02:30:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                      Mode  Cnt    Score    Error  Units
Jacobi2dBenchmark.autoVec        ss   10   55.642 Â±  0.271   s/op
Jacobi2dBenchmark.explicitVec    ss   10   28.874 Â±  0.383   s/op
Jacobi2dBenchmark.fullVec        ss   10   25.346 Â± 14.042   s/op
Jacobi2dBenchmark.serial         ss   10  101.684 Â±  0.034   s/op

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_vectorial/2024-05-03_15:53:39/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4253.196 bytes/s; standard: 21.171 s, 90653 bytes, 1120 methods; osr:  0.296 s, 649 bytes, 1 methods; nmethods_size: 1772184 bytes; nmethods_code_size: 1253984 bytes}
  C2 {speed: 339.161 bytes/s; standard: 32.579 s, 13121 bytes, 91 methods; osr:  6.571 s, 157 bytes, 3 methods; nmethods_size: 108600 bytes; nmethods_code_size: 67008 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3613.566 bytes/s; standard:  0.184 s, 665 bytes, 141 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33936 bytes; nmethods_code_size: 21376 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4258.727 bytes/s; standard: 20.987 s, 89988 bytes, 979 methods; osr:  0.296 s, 649 bytes, 1 methods; nmethods_size: 1738248 bytes; nmethods_code_size: 1232608 bytes}
  Tier4 {speed: 339.161 bytes/s; standard: 32.579 s, 13121 bytes, 91 methods; osr:  6.571 s, 157 bytes, 3 methods; nmethods_size: 108600 bytes; nmethods_code_size: 67008 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  60.616 s
    Standard compilation   :  53.750 s, Average : 0.044 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   6.867 s, Average : 1.717 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.408 s
       Setup time:            0.033 s
       Build HIR:            12.164 s
         Parse:                10.232 s
         Optimize blocks:       0.012 s
         GVN:                   0.574 s
         Null checks elim:      0.506 s
         Range checks elim:     0.354 s
         Other:                 0.486 s
       Emit LIR:              5.189 s
         LIR Gen:               2.561 s
         Linear Scan:           2.553 s
         Other:                 0.075 s
       Code Emission:         2.577 s
       Code Installation:     0.993 s
       Other:                 0.452 s

    C2 Compile Time:       44.059 s
       Parse:                11.123 s
       Optimize:             14.991 s
         Escape Analysis:       0.953 s
           Conn Graph:            0.872 s
           Macro Eliminate:       0.004 s
         GVN 1:                 2.132 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.022 s
         IdealLoop:             8.008 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.282 s
         GVN 2:                 0.035 s
         Macro Expand:          1.582 s
         Barrier Expand:        0.002 s
         Graph Reshape:         0.471 s
         Other:                 1.503 s
       Matcher:                    4.350 s
         Post Selection Cleanup:   0.282 s
       Scheduler:                  3.549 s
       Regalloc:              4.688 s
         Ctor Chaitin:          0.024 s
         Build IFG (virt):      0.169 s
         Build IFG (phys):      0.601 s
         Compute Liveness:      1.559 s
         Regalloc Split:        1.134 s
         Postalloc Copy Rem:    0.427 s
         Merge multidefs:       0.074 s
         Fixup Spills:          0.129 s
         Compact:               0.008 s
         Coalesce 1:            0.404 s
         Coalesce 2:            0.183 s
         Coalesce 3:            0.029 s
         Cache LRG:             0.018 s
         Simplify:              0.065 s
         Select:                0.090 s
       Block Ordering:        0.407 s
       Peephole:              0.062 s
       Code Emission:           3.599 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.662 s
         Build OOP maps:        0.275 s
         Fill buffer:           1.278 s
         Code Installation:     0.127 s
         Other:                 0.257 s
       Other:                 1.163 s

  Total compiled methods    :     1215 methods
    Standard compilation    :     1211 methods
    On stack replacement    :        4 methods
  Total compiled bytecodes  :   104580 bytes
    Standard compilation    :   103774 bytes
    On stack replacement    :      806 bytes
  Average compilation speed :     1725 bytes/s

  nmethod code size         :  1880784 bytes
  nmethod total size        :  1320992 bytes
