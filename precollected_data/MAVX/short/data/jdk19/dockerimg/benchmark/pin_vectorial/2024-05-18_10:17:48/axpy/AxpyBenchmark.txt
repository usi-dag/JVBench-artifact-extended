# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.785 s/op
# Warmup Iteration   2: 0.248 s/op
# Warmup Iteration   3: 0.282 s/op
# Warmup Iteration   4: 0.199 s/op
# Warmup Iteration   5: 0.277 s/op
# Warmup Iteration   6: 0.211 s/op
# Warmup Iteration   7: 0.199 s/op
# Warmup Iteration   8: 0.205 s/op
# Warmup Iteration   9: 0.202 s/op
# Warmup Iteration  10: 0.279 s/op
Iteration   1: 0.239 s/op
                 ·gc.alloc.rate:      0.007 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.210 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.203 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.275 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.202 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.201 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.199 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.200 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.211 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.290 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2658.676 bytes/s; standard: 22.312 s, 59226 bytes, 841 methods; osr:  0.275 s, 824 bytes, 3 methods; nmethods_size: 1253336 bytes; nmethods_code_size: 891552 bytes}
  C2 {speed: 167.106 bytes/s; standard: 26.060 s, 4472 bytes, 52 methods; osr:  1.845 s, 191 bytes, 4 methods; nmethods_size: 41728 bytes; nmethods_code_size: 27392 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3975.515 bytes/s; standard:  0.167 s, 664 bytes, 137 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32920 bytes; nmethods_code_size: 20864 bytes}
  Tier2 {speed: 497.233 bytes/s; standard:  0.197 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2667.949 bytes/s; standard: 21.948 s, 58464 bytes, 703 methods; osr:  0.275 s, 824 bytes, 3 methods; nmethods_size: 1219440 bytes; nmethods_code_size: 870144 bytes}
  Tier4 {speed: 167.106 bytes/s; standard: 26.060 s, 4472 bytes, 52 methods; osr:  1.845 s, 191 bytes, 4 methods; nmethods_size: 41728 bytes; nmethods_code_size: 27392 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  50.491 s
    Standard compilation   :  48.371 s, Average : 0.054 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   2.120 s, Average : 0.303 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.537 s
       Setup time:            0.019 s
       Build HIR:            14.130 s
         Parse:                12.014 s
         Optimize blocks:       0.032 s
         GVN:                   0.679 s
         Null checks elim:      0.528 s
         Range checks elim:     0.396 s
         Other:                 0.479 s
       Emit LIR:              4.964 s
         LIR Gen:               2.516 s
         Linear Scan:           2.334 s
         Other:                 0.114 s
       Code Emission:         2.285 s
       Code Installation:     0.788 s
       Other:                 0.352 s

    C2 Compile Time:       31.607 s
       Parse:                 7.871 s
       Optimize:             10.872 s
         Escape Analysis:       0.586 s
           Conn Graph:            0.530 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.887 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.571 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.192 s
         GVN 2:                 0.048 s
         Macro Expand:          1.045 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.334 s
         Other:                 1.207 s
       Matcher:                    3.008 s
         Post Selection Cleanup:   0.178 s
       Scheduler:                  2.272 s
       Regalloc:              3.399 s
         Ctor Chaitin:          0.011 s
         Build IFG (virt):      0.131 s
         Build IFG (phys):      0.395 s
         Compute Liveness:      1.072 s
         Regalloc Split:        0.754 s
         Postalloc Copy Rem:    0.288 s
         Merge multidefs:       0.059 s
         Fixup Spills:          0.095 s
         Compact:               0.011 s
         Coalesce 1:            0.283 s
         Coalesce 2:            0.156 s
         Coalesce 3:            0.127 s
         Cache LRG:             0.003 s
         Simplify:              0.034 s
         Select:                0.076 s
       Block Ordering:        0.290 s
       Peephole:              0.083 s
       Code Emission:           2.814 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.346 s
         Build OOP maps:        0.243 s
         Fill buffer:           0.879 s
         Code Installation:     0.157 s
         Other:                 0.188 s
       Other:                 0.842 s

  Total compiled methods    :      900 methods
    Standard compilation    :      893 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    64713 bytes
    Standard compilation    :    63698 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :     1281 bytes/s

  nmethod code size         :  1295064 bytes
  nmethod total size        :   918944 bytes


Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.223 ±(99.9%) 0.051 s/op

  Histogram, s/op:
    [0.190, 0.200) = 2 
    [0.200, 0.210) = 4 
    [0.210, 0.220) = 1 
    [0.220, 0.230) = 0 
    [0.230, 0.240) = 1 
    [0.240, 0.250) = 0 
    [0.250, 0.260) = 0 
    [0.260, 0.270) = 0 
    [0.270, 0.280) = 1 
    [0.280, 0.290) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.199 s/op
     p(50.0000) =      0.206 s/op
     p(90.0000) =      0.289 s/op
     p(95.0000) =      0.290 s/op
     p(99.0000) =      0.290 s/op
     p(99.9000) =      0.290 s/op
     p(99.9900) =      0.290 s/op
     p(99.9990) =      0.290 s/op
     p(99.9999) =      0.290 s/op
    p(100.0000) =      0.290 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:03:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.377 s/op
# Warmup Iteration   2: 1.496 s/op
# Warmup Iteration   3: 0.385 s/op
# Warmup Iteration   4: 0.346 s/op
# Warmup Iteration   5: 0.346 s/op
# Warmup Iteration   6: 0.371 s/op
# Warmup Iteration   7: 0.346 s/op
# Warmup Iteration   8: 0.346 s/op
# Warmup Iteration   9: 0.346 s/op
# Warmup Iteration  10: 0.346 s/op
Iteration   1: 0.347 s/op
                 ·gc.alloc.rate:      0.007 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.296 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.348 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.346 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.346 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.349 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3324.548 bytes/s; standard: 20.455 s, 69397 bytes, 1002 methods; osr:  0.702 s, 941 bytes, 3 methods; nmethods_size: 1589792 bytes; nmethods_code_size: 1137728 bytes}
  C2 {speed: 212.835 bytes/s; standard: 36.511 s, 7028 bytes, 85 methods; osr:  3.167 s, 1417 bytes, 8 methods; nmethods_size: 75336 bytes; nmethods_code_size: 47328 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3046.751 bytes/s; standard:  0.233 s, 709 bytes, 146 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34992 bytes; nmethods_code_size: 22144 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3327.638 bytes/s; standard: 20.222 s, 68688 bytes, 856 methods; osr:  0.702 s, 941 bytes, 3 methods; nmethods_size: 1554800 bytes; nmethods_code_size: 1115584 bytes}
  Tier4 {speed: 212.835 bytes/s; standard: 36.511 s, 7028 bytes, 85 methods; osr:  3.167 s, 1417 bytes, 8 methods; nmethods_size: 75336 bytes; nmethods_code_size: 47328 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  60.836 s
    Standard compilation   :  56.966 s, Average : 0.052 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   3.870 s, Average : 0.352 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.035 s
       Setup time:            0.048 s
       Build HIR:            12.479 s
         Parse:                10.858 s
         Optimize blocks:       0.010 s
         GVN:                   0.499 s
         Null checks elim:      0.420 s
         Range checks elim:     0.292 s
         Other:                 0.400 s
       Emit LIR:              4.832 s
         LIR Gen:               2.377 s
         Linear Scan:           2.385 s
         Other:                 0.071 s
       Code Emission:         2.444 s
       Code Installation:     0.841 s
       Other:                 0.391 s

    C2 Compile Time:       44.116 s
       Parse:                12.728 s
       Optimize:             14.200 s
         Escape Analysis:       0.927 s
           Conn Graph:            0.686 s
           Macro Eliminate:       0.061 s
         GVN 1:                 1.757 s
         Incremental Inline:    0.318 s
           IdealLoop:             0.000 s
          (IGVN:                  0.063 s)
          (Inline:                0.215 s)
          (Prune Useless:         0.024 s)
           Other:                 0.318 s
         Vector:                0.652 s
           Box elimination:     0.650 s
             IGVN:              0.069 s
             Prune Useless:     0.021 s
         Renumber Live:         0.017 s
         IdealLoop:             6.887 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.285 s
         GVN 2:                 0.075 s
         Macro Expand:          1.340 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.384 s
         Other:                 1.558 s
       Matcher:                    3.696 s
         Post Selection Cleanup:   0.320 s
       Scheduler:                  3.794 s
       Regalloc:              4.781 s
         Ctor Chaitin:          0.018 s
         Build IFG (virt):      0.166 s
         Build IFG (phys):      0.623 s
         Compute Liveness:      1.665 s
         Regalloc Split:        1.170 s
         Postalloc Copy Rem:    0.438 s
         Merge multidefs:       0.080 s
         Fixup Spills:          0.155 s
         Compact:               0.010 s
         Coalesce 1:            0.411 s
         Coalesce 2:            0.141 s
         Coalesce 3:            0.031 s
         Cache LRG:             0.003 s
         Simplify:              0.065 s
         Select:                0.090 s
       Block Ordering:        0.371 s
       Peephole:              0.036 s
       Code Emission:           3.379 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.567 s
         Build OOP maps:        0.249 s
         Fill buffer:           1.174 s
         Code Installation:     0.148 s
         Other:                 0.242 s
       Other:                 0.982 s

  Total compiled methods    :     1098 methods
    Standard compilation    :     1087 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    78783 bytes
    Standard compilation    :    76425 bytes
    On stack replacement    :     2358 bytes
  Average compilation speed :     1295 bytes/s

  nmethod code size         :  1665128 bytes
  nmethod total size        :  1185056 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.342 ±(99.9%) 0.024 s/op

  Histogram, s/op:
    [0.290, 0.295) = 0 
    [0.295, 0.300) = 1 
    [0.300, 0.305) = 0 
    [0.305, 0.310) = 0 
    [0.310, 0.315) = 0 
    [0.315, 0.320) = 0 
    [0.320, 0.325) = 0 
    [0.325, 0.330) = 0 
    [0.330, 0.335) = 0 
    [0.335, 0.340) = 0 
    [0.340, 0.345) = 0 
    [0.345, 0.350) = 9 

  Percentiles, s/op:
      p(0.0000) =      0.296 s/op
     p(50.0000) =      0.347 s/op
     p(90.0000) =      0.349 s/op
     p(95.0000) =      0.349 s/op
     p(99.0000) =      0.349 s/op
     p(99.9000) =      0.349 s/op
     p(99.9900) =      0.349 s/op
     p(99.9990) =      0.349 s/op
     p(99.9999) =      0.349 s/op
    p(100.0000) =      0.349 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate.norm":
  1739.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1048.000, 1739.200, 7960.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5043.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:02:28
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4.461 s/op
# Warmup Iteration   2: 0.979 s/op
# Warmup Iteration   3: 0.353 s/op
# Warmup Iteration   4: 0.348 s/op
# Warmup Iteration   5: 0.346 s/op
# Warmup Iteration   6: 0.347 s/op
# Warmup Iteration   7: 0.346 s/op
# Warmup Iteration   8: 0.346 s/op
# Warmup Iteration   9: 0.347 s/op
# Warmup Iteration  10: 0.354 s/op
Iteration   1: 0.346 s/op
                 ·gc.alloc.rate:      0.007 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.350 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.346 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.347 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.348 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.346 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.348 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.351 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3228.022 bytes/s; standard: 20.925 s, 69453 bytes, 994 methods; osr:  0.882 s, 941 bytes, 3 methods; nmethods_size: 1595800 bytes; nmethods_code_size: 1142080 bytes}
  C2 {speed: 201.239 bytes/s; standard: 37.252 s, 6992 bytes, 84 methods; osr:  4.534 s, 1417 bytes, 8 methods; nmethods_size: 74600 bytes; nmethods_code_size: 46624 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2353.386 bytes/s; standard:  0.299 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34776 bytes; nmethods_code_size: 22016 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3240.187 bytes/s; standard: 20.626 s, 68749 bytes, 849 methods; osr:  0.882 s, 941 bytes, 3 methods; nmethods_size: 1561024 bytes; nmethods_code_size: 1120064 bytes}
  Tier4 {speed: 201.239 bytes/s; standard: 37.252 s, 6992 bytes, 84 methods; osr:  4.534 s, 1417 bytes, 8 methods; nmethods_size: 74600 bytes; nmethods_code_size: 46624 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  63.593 s
    Standard compilation   :  58.177 s, Average : 0.054 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   5.416 s, Average : 0.492 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       21.757 s
       Setup time:            0.020 s
       Build HIR:            12.909 s
         Parse:                11.240 s
         Optimize blocks:       0.012 s
         GVN:                   0.529 s
         Null checks elim:      0.340 s
         Range checks elim:     0.317 s
         Other:                 0.470 s
       Emit LIR:              5.054 s
         LIR Gen:               2.541 s
         Linear Scan:           2.436 s
         Other:                 0.078 s
       Code Emission:         2.455 s
       Code Installation:     1.019 s
       Other:                 0.301 s

    C2 Compile Time:       46.193 s
       Parse:                12.456 s
       Optimize:             15.523 s
         Escape Analysis:       1.227 s
           Conn Graph:            0.898 s
           Macro Eliminate:       0.100 s
         GVN 1:                 1.899 s
         Incremental Inline:    0.401 s
           IdealLoop:             0.000 s
          (IGVN:                  0.056 s)
          (Inline:                0.266 s)
          (Prune Useless:         0.069 s)
           Other:                 0.401 s
         Vector:                0.552 s
           Box elimination:     0.550 s
             IGVN:              0.027 s
             Prune Useless:     0.018 s
         Renumber Live:         0.017 s
         IdealLoop:             7.673 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.287 s
         GVN 2:                 0.045 s
         Macro Expand:          1.440 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.399 s
         Other:                 1.581 s
       Matcher:                    3.906 s
         Post Selection Cleanup:   0.327 s
       Scheduler:                  3.689 s
       Regalloc:              5.448 s
         Ctor Chaitin:          0.041 s
         Build IFG (virt):      0.201 s
         Build IFG (phys):      0.791 s
         Compute Liveness:      1.841 s
         Regalloc Split:        1.059 s
         Postalloc Copy Rem:    0.562 s
         Merge multidefs:       0.095 s
         Fixup Spills:          0.215 s
         Compact:               0.011 s
         Coalesce 1:            0.528 s
         Coalesce 2:            0.174 s
         Coalesce 3:            0.032 s
         Cache LRG:             0.003 s
         Simplify:              0.045 s
         Select:                0.093 s
       Block Ordering:        0.411 s
       Peephole:              0.041 s
       Code Emission:           3.604 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.777 s
         Build OOP maps:        0.291 s
         Fill buffer:           1.135 s
         Code Installation:     0.154 s
         Other:                 0.248 s
       Other:                 0.962 s

  Total compiled methods    :     1089 methods
    Standard compilation    :     1078 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    78803 bytes
    Standard compilation    :    76445 bytes
    On stack replacement    :     2358 bytes
  Average compilation speed :     1239 bytes/s

  nmethod code size         :  1670400 bytes
  nmethod total size        :  1188704 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.348 ±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.345, 0.346) = 0 
    [0.346, 0.346) = 1 
    [0.346, 0.347) = 2 
    [0.347, 0.347) = 1 
    [0.347, 0.348) = 2 
    [0.348, 0.348) = 1 
    [0.348, 0.349) = 1 
    [0.349, 0.349) = 0 
    [0.349, 0.350) = 0 
    [0.350, 0.350) = 1 
    [0.350, 0.351) = 0 
    [0.351, 0.351) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.346 s/op
     p(50.0000) =      0.347 s/op
     p(90.0000) =      0.350 s/op
     p(95.0000) =      0.351 s/op
     p(99.0000) =      0.351 s/op
     p(99.9000) =      0.351 s/op
     p(99.9900) =      0.351 s/op
     p(99.9990) =      0.351 s/op
     p(99.9999) =      0.351 s/op
    p(100.0000) =      0.351 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:01:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1.041 s/op
# Warmup Iteration   2: 0.599 s/op
# Warmup Iteration   3: 0.350 s/op
# Warmup Iteration   4: 0.675 s/op
# Warmup Iteration   5: 0.674 s/op
# Warmup Iteration   6: 0.490 s/op
# Warmup Iteration   7: 0.256 s/op
# Warmup Iteration   8: 0.278 s/op
# Warmup Iteration   9: 0.239 s/op
# Warmup Iteration  10: 0.675 s/op
Iteration   1: 0.676 s/op
                 ·gc.alloc.rate:      0.006 MB/sec
                 ·gc.alloc.rate.norm: 7944.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.463 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.679 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.741 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.679 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.306 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.259 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.836 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.583 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.340 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 1032.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2934.902 bytes/s; standard: 19.925 s, 58337 bytes, 832 methods; osr:  0.232 s, 824 bytes, 3 methods; nmethods_size: 1221216 bytes; nmethods_code_size: 868448 bytes}
  C2 {speed: 156.378 bytes/s; standard: 23.062 s, 4273 bytes, 52 methods; osr:  6.067 s, 282 bytes, 5 methods; nmethods_size: 42944 bytes; nmethods_code_size: 28448 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2688.133 bytes/s; standard:  0.245 s, 659 bytes, 136 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 32672 bytes; nmethods_code_size: 20704 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 2937.940 bytes/s; standard: 19.680 s, 57678 bytes, 696 methods; osr:  0.232 s, 824 bytes, 3 methods; nmethods_size: 1188544 bytes; nmethods_code_size: 847744 bytes}
  Tier4 {speed: 156.378 bytes/s; standard: 23.062 s, 4273 bytes, 52 methods; osr:  6.067 s, 282 bytes, 5 methods; nmethods_size: 42944 bytes; nmethods_code_size: 28448 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  49.440 s
    Standard compilation   :  42.987 s, Average : 0.049 s
    Bailed out compilation :   0.154 s, Average : 0.154 s
    On stack replacement   :   6.299 s, Average : 0.787 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.240 s
       Setup time:            0.020 s
       Build HIR:            11.552 s
         Parse:                 9.696 s
         Optimize blocks:       0.011 s
         GVN:                   0.578 s
         Null checks elim:      0.500 s
         Range checks elim:     0.328 s
         Other:                 0.439 s
       Emit LIR:              4.760 s
         LIR Gen:               2.276 s
         Linear Scan:           2.316 s
         Other:                 0.169 s
       Code Emission:         2.679 s
       Code Installation:     0.889 s
       Other:                 0.340 s

    C2 Compile Time:       33.407 s
       Parse:                 8.182 s
       Optimize:             11.124 s
         Escape Analysis:       0.674 s
           Conn Graph:            0.627 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.641 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.791 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.209 s
         GVN 2:                 0.054 s
         Macro Expand:          1.271 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.329 s
         Other:                 1.153 s
       Matcher:                    3.169 s
         Post Selection Cleanup:   0.226 s
       Scheduler:                  3.180 s
       Regalloc:              3.753 s
         Ctor Chaitin:          0.025 s
         Build IFG (virt):      0.117 s
         Build IFG (phys):      0.571 s
         Compute Liveness:      1.221 s
         Regalloc Split:        0.847 s
         Postalloc Copy Rem:    0.337 s
         Merge multidefs:       0.041 s
         Fixup Spills:          0.098 s
         Compact:               0.006 s
         Coalesce 1:            0.337 s
         Coalesce 2:            0.153 s
         Coalesce 3:            0.036 s
         Cache LRG:             0.003 s
         Simplify:              0.050 s
         Select:                0.073 s
       Block Ordering:        0.442 s
       Peephole:              0.027 s
       Code Emission:           2.426 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.237 s
         Build OOP maps:        0.225 s
         Fill buffer:           0.717 s
         Code Installation:     0.084 s
         Other:                 0.163 s
       Other:                 1.019 s

  Total compiled methods    :      892 methods
    Standard compilation    :      884 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    63716 bytes
    Standard compilation    :    62610 bytes
    On stack replacement    :     1106 bytes
  Average compilation speed :     1288 bytes/s

  nmethod code size         :  1264160 bytes
  nmethod total size        :   896896 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.556 ±(99.9%) 0.304 s/op

  Histogram, s/op:
    [0.200, 0.250) = 0 
    [0.250, 0.300) = 1 
    [0.300, 0.350) = 2 
    [0.350, 0.400) = 0 
    [0.400, 0.450) = 0 
    [0.450, 0.500) = 1 
    [0.500, 0.550) = 0 
    [0.550, 0.600) = 1 
    [0.600, 0.650) = 0 
    [0.650, 0.700) = 3 
    [0.700, 0.750) = 1 
    [0.750, 0.800) = 0 
    [0.800, 0.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.259 s/op
     p(50.0000) =      0.629 s/op
     p(90.0000) =      0.827 s/op
     p(95.0000) =      0.836 s/op
     p(99.0000) =      0.836 s/op
     p(99.9000) =      0.836 s/op
     p(99.9900) =      0.836 s/op
     p(99.9990) =      0.836 s/op
     p(99.9999) =      0.836 s/op
    p(100.0000) =      0.836 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate":
  0.001 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate.norm":
  1723.200 ±(99.9%) 3304.567 B/op [Average]
  (min, avg, max) = (1032.000, 1723.200, 7944.000), stdev = 2185.766
  CI (99.9%): [≈ 0, 5027.767] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                      Mode  Cnt     Score      Error   Units
AxpyBenchmark.autoVec                            ss   10     0.223 ±    0.051    s/op
AxpyBenchmark.autoVec:·gc.alloc.rate             ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
AxpyBenchmark.explicitVec                        ss   10     0.342 ±    0.024    s/op
AxpyBenchmark.explicitVec:·gc.alloc.rate         ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1739.200 ± 3304.567    B/op
AxpyBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
AxpyBenchmark.fullVec                            ss   10     0.348 ±    0.002    s/op
AxpyBenchmark.fullVec:·gc.alloc.rate             ss   10     0.002 ±    0.003  MB/sec
AxpyBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
AxpyBenchmark.serial                             ss   10     0.556 ±    0.304    s/op
AxpyBenchmark.serial:·gc.alloc.rate              ss   10     0.001 ±    0.002  MB/sec
AxpyBenchmark.serial:·gc.alloc.rate.norm         ss   10  1723.200 ± 3304.567    B/op
AxpyBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_vectorial/2024-05-18_10:17:48/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4516.618 bytes/s; standard: 23.143 s, 105058 bytes, 1257 methods; osr:  0.261 s, 649 bytes, 1 methods; nmethods_size: 2144688 bytes; nmethods_code_size: 1512736 bytes}
  C2 {speed: 508.562 bytes/s; standard: 34.401 s, 17786 bytes, 119 methods; osr:  0.702 s, 66 bytes, 2 methods; nmethods_size: 148464 bytes; nmethods_code_size: 91968 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1626.539 bytes/s; standard:  0.443 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 4572.334 bytes/s; standard: 22.701 s, 104338 bytes, 1105 methods; osr:  0.261 s, 649 bytes, 1 methods; nmethods_size: 2108056 bytes; nmethods_code_size: 1489632 bytes}
  Tier4 {speed: 508.562 bytes/s; standard: 34.401 s, 17786 bytes, 119 methods; osr:  0.702 s, 66 bytes, 2 methods; nmethods_size: 148464 bytes; nmethods_code_size: 91968 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  58.507 s
    Standard compilation   :  57.544 s, Average : 0.042 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.963 s, Average : 0.321 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       23.326 s
       Setup time:            0.051 s
       Build HIR:            13.506 s
         Parse:                11.737 s
         Optimize blocks:       0.010 s
         GVN:                   0.499 s
         Null checks elim:      0.415 s
         Range checks elim:     0.391 s
         Other:                 0.454 s
       Emit LIR:              5.135 s
         LIR Gen:               2.570 s
         Linear Scan:           2.494 s
         Other:                 0.071 s
       Code Emission:         2.955 s
       Code Installation:     1.256 s
       Other:                 0.423 s

    C2 Compile Time:       39.366 s
       Parse:                 9.678 s
       Optimize:             12.679 s
         Escape Analysis:       0.853 s
           Conn Graph:            0.755 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.752 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.022 s
         IdealLoop:             6.663 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.281 s
         GVN 2:                 0.072 s
         Macro Expand:          1.392 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.355 s
         Other:                 1.287 s
       Matcher:                    3.720 s
         Post Selection Cleanup:   0.285 s
       Scheduler:                  3.531 s
       Regalloc:              5.046 s
         Ctor Chaitin:          0.008 s
         Build IFG (virt):      0.172 s
         Build IFG (phys):      0.930 s
         Compute Liveness:      1.671 s
         Regalloc Split:        1.116 s
         Postalloc Copy Rem:    0.365 s
         Merge multidefs:       0.087 s
         Fixup Spills:          0.117 s
         Compact:               0.008 s
         Coalesce 1:            0.480 s
         Coalesce 2:            0.148 s
         Coalesce 3:            0.036 s
         Cache LRG:             0.003 s
         Simplify:              0.069 s
         Select:                0.073 s
       Block Ordering:        0.360 s
       Peephole:              0.037 s
       Code Emission:           3.260 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.706 s
         Build OOP maps:        0.221 s
         Fill buffer:           1.052 s
         Code Installation:     0.108 s
         Other:                 0.173 s
       Other:                 0.946 s

  Total compiled methods    :     1379 methods
    Standard compilation    :     1376 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   123559 bytes
    Standard compilation    :   122844 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     2111 bytes/s

  nmethod code size         :  2293152 bytes
  nmethod total size        :  1604704 bytes
