# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 384.342 s/op
# Warmup Iteration   2: 26.053 s/op
# Warmup Iteration   3: 303.442 s/op
# Warmup Iteration   4: 360.835 s/op
# Warmup Iteration   5: 25.919 s/op
# Warmup Iteration   6: 25.112 s/op
# Warmup Iteration   7: 25.371 s/op
# Warmup Iteration   8: 25.684 s/op
# Warmup Iteration   9: 25.286 s/op
# Warmup Iteration  10: 55.744 s/op
Iteration   1: 56.065 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.910 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.879 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.064 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 55.703 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 56.067 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 55.750 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 56.010 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 55.990 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 55.807 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3157.922 bytes/s; standard: 20.171 s, 63451 bytes, 884 methods; osr:  0.270 s, 1099 bytes, 4 methods; nmethods_size: 1338480 bytes; nmethods_code_size: 952448 bytes}
  C2 {speed: 187.033 bytes/s; standard: 29.708 s, 5432 bytes, 59 methods; osr:  2.062 s, 510 bytes, 4 methods; nmethods_size: 57920 bytes; nmethods_code_size: 38976 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2620.337 bytes/s; standard:  0.271 s, 709 bytes, 146 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34992 bytes; nmethods_code_size: 22144 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3165.134 bytes/s; standard: 19.900 s, 62742 bytes, 738 methods; osr:  0.270 s, 1099 bytes, 4 methods; nmethods_size: 1303488 bytes; nmethods_code_size: 930304 bytes}
  Tier4 {speed: 187.033 bytes/s; standard: 29.708 s, 5432 bytes, 59 methods; osr:  2.062 s, 510 bytes, 4 methods; nmethods_size: 57920 bytes; nmethods_code_size: 38976 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  52.291 s
    Standard compilation   :  49.879 s, Average : 0.053 s
    Bailed out compilation :   0.081 s, Average : 0.081 s
    On stack replacement   :   2.332 s, Average : 0.291 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       20.464 s
       Setup time:            0.052 s
       Build HIR:            11.668 s
         Parse:                10.066 s
         Optimize blocks:       0.016 s
         GVN:                   0.463 s
         Null checks elim:      0.433 s
         Range checks elim:     0.297 s
         Other:                 0.393 s
       Emit LIR:              4.860 s
         LIR Gen:               2.405 s
         Linear Scan:           2.341 s
         Other:                 0.114 s
       Code Emission:         2.405 s
       Code Installation:     1.158 s
       Other:                 0.321 s

    C2 Compile Time:       36.177 s
       Parse:                 8.988 s
       Optimize:             12.552 s
         Escape Analysis:       0.644 s
           Conn Graph:            0.584 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.884 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             6.857 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.280 s
         GVN 2:                 0.070 s
         Macro Expand:          1.073 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.397 s
         Other:                 1.347 s
       Matcher:                    3.346 s
         Post Selection Cleanup:   0.236 s
       Scheduler:                  3.005 s
       Regalloc:              4.023 s
         Ctor Chaitin:          0.012 s
         Build IFG (virt):      0.120 s
         Build IFG (phys):      0.543 s
         Compute Liveness:      1.483 s
         Regalloc Split:        0.786 s
         Postalloc Copy Rem:    0.424 s
         Merge multidefs:       0.065 s
         Fixup Spills:          0.115 s
         Compact:               0.006 s
         Coalesce 1:            0.346 s
         Coalesce 2:            0.191 s
         Coalesce 3:            0.031 s
         Cache LRG:             0.003 s
         Simplify:              0.043 s
         Select:                0.059 s
       Block Ordering:        0.293 s
       Peephole:              0.034 s
       Code Emission:           2.815 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.364 s
         Build OOP maps:        0.220 s
         Fill buffer:           0.778 s
         Code Installation:     0.108 s
         Other:                 0.345 s
       Other:                 1.012 s

  Total compiled methods    :      951 methods
    Standard compilation    :      943 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    70492 bytes
    Standard compilation    :    68883 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :     1348 bytes/s

  nmethod code size         :  1396400 bytes
  nmethod total size        :   991424 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =     55.924 ±(99.9%) 0.206 s/op

  Histogram, s/op:
    [55.700, 55.725) = 1 
    [55.725, 55.750) = 1 
    [55.750, 55.775) = 0 
    [55.775, 55.800) = 0 
    [55.800, 55.825) = 1 
    [55.825, 55.850) = 0 
    [55.850, 55.875) = 0 
    [55.875, 55.900) = 1 
    [55.900, 55.925) = 1 
    [55.925, 55.950) = 0 
    [55.950, 55.975) = 0 
    [55.975, 56.000) = 1 
    [56.000, 56.025) = 1 
    [56.025, 56.050) = 0 
    [56.050, 56.075) = 3 

  Percentiles, s/op:
      p(0.0000) =     55.703 s/op
     p(50.0000) =     55.950 s/op
     p(90.0000) =     56.067 s/op
     p(95.0000) =     56.067 s/op
     p(99.0000) =     56.067 s/op
     p(99.9000) =     56.067 s/op
     p(99.9900) =     56.067 s/op
     p(99.9990) =     56.067 s/op
     p(99.9999) =     56.067 s/op
    p(100.0000) =     56.067 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁵ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm":
  1768.000 ±(99.9%) 3306.302 B/op [Average]
  (min, avg, max) = (1048.000, 1768.000, 7992.000), stdev = 2186.914
  CI (99.9%): [≈ 0, 5074.302] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 01:34:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 132.485 s/op
# Warmup Iteration   2: 8.224 s/op
# Warmup Iteration   3: 7.460 s/op
# Warmup Iteration   4: 29.390 s/op
# Warmup Iteration   5: 7.421 s/op
# Warmup Iteration   6: 7.532 s/op
# Warmup Iteration   7: 8.091 s/op
# Warmup Iteration   8: 7.669 s/op
# Warmup Iteration   9: 7.310 s/op
# Warmup Iteration  10: 29.385 s/op
Iteration   1: 7.419 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7976.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7.414 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.754 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.383 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.428 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7.376 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 29.602 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 29.371 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1096.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7.336 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 29.492 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1064.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2991.384 bytes/s; standard: 23.832 s, 71384 bytes, 1020 methods; osr:  0.520 s, 1463 bytes, 4 methods; nmethods_size: 1681248 bytes; nmethods_code_size: 1204704 bytes}
  C2 {speed: 253.052 bytes/s; standard: 36.833 s, 8736 bytes, 86 methods; osr:  3.593 s, 1494 bytes, 7 methods; nmethods_size: 81632 bytes; nmethods_code_size: 51456 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 2272.725 bytes/s; standard:  0.314 s, 714 bytes, 147 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35240 bytes; nmethods_code_size: 22304 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3000.777 bytes/s; standard: 23.518 s, 70670 bytes, 873 methods; osr:  0.520 s, 1463 bytes, 4 methods; nmethods_size: 1646008 bytes; nmethods_code_size: 1182400 bytes}
  Tier4 {speed: 253.052 bytes/s; standard: 36.833 s, 8736 bytes, 86 methods; osr:  3.593 s, 1494 bytes, 7 methods; nmethods_size: 81632 bytes; nmethods_code_size: 51456 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  64.779 s
    Standard compilation   :  60.665 s, Average : 0.055 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   4.114 s, Average : 0.374 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       24.288 s
       Setup time:            0.043 s
       Build HIR:            15.119 s
         Parse:                13.398 s
         Optimize blocks:       0.013 s
         GVN:                   0.487 s
         Null checks elim:      0.446 s
         Range checks elim:     0.381 s
         Other:                 0.395 s
       Emit LIR:              4.982 s
         LIR Gen:               2.691 s
         Linear Scan:           2.104 s
         Other:                 0.188 s
       Code Emission:         2.252 s
       Code Installation:     1.412 s
       Other:                 0.480 s

    C2 Compile Time:       44.570 s
       Parse:                12.210 s
       Optimize:             14.818 s
         Escape Analysis:       0.932 s
           Conn Graph:            0.756 s
           Macro Eliminate:       0.088 s
         GVN 1:                 1.700 s
         Incremental Inline:    0.364 s
           IdealLoop:             0.000 s
          (IGVN:                  0.028 s)
          (Inline:                0.288 s)
          (Prune Useless:         0.042 s)
           Other:                 0.364 s
         Vector:                0.582 s
           Box elimination:     0.581 s
             IGVN:              0.034 s
             Prune Useless:     0.023 s
         Renumber Live:         0.018 s
         IdealLoop:             7.472 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.280 s
         GVN 2:                 0.057 s
         Macro Expand:          1.248 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.386 s
         Other:                 1.777 s
       Matcher:                    3.886 s
         Post Selection Cleanup:   0.294 s
       Scheduler:                  3.722 s
       Regalloc:              4.928 s
         Ctor Chaitin:          0.028 s
         Build IFG (virt):      0.161 s
         Build IFG (phys):      0.673 s
         Compute Liveness:      1.733 s
         Regalloc Split:        1.163 s
         Postalloc Copy Rem:    0.362 s
         Merge multidefs:       0.057 s
         Fixup Spills:          0.105 s
         Compact:               0.003 s
         Coalesce 1:            0.513 s
         Coalesce 2:            0.168 s
         Coalesce 3:            0.080 s
         Cache LRG:             0.003 s
         Simplify:              0.043 s
         Select:                0.100 s
       Block Ordering:        0.299 s
       Peephole:              0.037 s
       Code Emission:           3.643 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.651 s
         Build OOP maps:        0.270 s
         Fill buffer:           1.103 s
         Code Installation:     0.224 s
         Other:                 0.396 s
       Other:                 0.802 s

  Total compiled methods    :     1117 methods
    Standard compilation    :     1106 methods
    On stack replacement    :       11 methods
  Total compiled bytecodes  :    83077 bytes
    Standard compilation    :    80120 bytes
    On stack replacement    :     2957 bytes
  Average compilation speed :     1282 bytes/s

  nmethod code size         :  1762880 bytes
  nmethod total size        :  1256160 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =     20.657 ±(99.9%) 17.270 s/op

  Histogram, s/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 4 
    [ 7.500, 10.000) = 0 
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.336 s/op
     p(50.0000) =     29.377 s/op
     p(90.0000) =     29.739 s/op
     p(95.0000) =     29.754 s/op
     p(99.0000) =     29.754 s/op
     p(99.9000) =     29.754 s/op
     p(99.9900) =     29.754 s/op
     p(99.9990) =     29.754 s/op
     p(99.9999) =     29.754 s/op
    p(100.0000) =     29.754 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm":
  1764.800 ±(99.9%) 3299.546 B/op [Average]
  (min, avg, max) = (1064.000, 1764.800, 7976.000), stdev = 2182.445
  CI (99.9%): [≈ 0, 5064.346] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:40:04
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 157.520 s/op
# Warmup Iteration   2: 8.342 s/op
# Warmup Iteration   3: 7.578 s/op
# Warmup Iteration   4: 31.033 s/op
# Warmup Iteration   5: 7.644 s/op
# Warmup Iteration   6: 7.856 s/op
# Warmup Iteration   7: 7.860 s/op
# Warmup Iteration   8: 7.977 s/op
# Warmup Iteration   9: 8.281 s/op
# Warmup Iteration  10: 30.257 s/op
Iteration   1: 8.027 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 7960.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7.595 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 30.210 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.796 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.803 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7.807 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 29.800 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 29.381 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 29.769 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7.883 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 1048.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 3127.039 bytes/s; standard: 23.343 s, 73022 bytes, 1031 methods; osr:  0.477 s, 1463 bytes, 4 methods; nmethods_size: 1699464 bytes; nmethods_code_size: 1215616 bytes}
  C2 {speed: 254.866 bytes/s; standard: 31.569 s, 8692 bytes, 85 methods; osr:  8.754 s, 1585 bytes, 8 methods; nmethods_size: 80984 bytes; nmethods_code_size: 50784 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 3657.751 bytes/s; standard:  0.197 s, 719 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35456 bytes; nmethods_code_size: 22432 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 3122.623 bytes/s; standard: 23.146 s, 72303 bytes, 883 methods; osr:  0.477 s, 1463 bytes, 4 methods; nmethods_size: 1664008 bytes; nmethods_code_size: 1193184 bytes}
  Tier4 {speed: 254.866 bytes/s; standard: 31.569 s, 8692 bytes, 85 methods; osr:  8.754 s, 1585 bytes, 8 methods; nmethods_size: 80984 bytes; nmethods_code_size: 50784 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  64.343 s
    Standard compilation   :  54.912 s, Average : 0.049 s
    Bailed out compilation :   0.200 s, Average : 0.200 s
    On stack replacement   :   9.231 s, Average : 0.769 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       23.975 s
       Setup time:            0.026 s
       Build HIR:            14.251 s
         Parse:                12.496 s
         Optimize blocks:       0.012 s
         GVN:                   0.519 s
         Null checks elim:      0.522 s
         Range checks elim:     0.299 s
         Other:                 0.403 s
       Emit LIR:              5.058 s
         LIR Gen:               2.633 s
         Linear Scan:           2.295 s
         Other:                 0.130 s
       Code Emission:         2.685 s
       Code Installation:     1.302 s
       Other:                 0.652 s

    C2 Compile Time:       44.709 s
       Parse:                12.146 s
       Optimize:             15.570 s
         Escape Analysis:       0.894 s
           Conn Graph:            0.686 s
           Macro Eliminate:       0.103 s
         GVN 1:                 1.692 s
         Incremental Inline:    0.436 s
           IdealLoop:             0.000 s
          (IGVN:                  0.081 s)
          (Inline:                0.316 s)
          (Prune Useless:         0.032 s)
           Other:                 0.436 s
         Vector:                0.649 s
           Box elimination:     0.647 s
             IGVN:              0.061 s
             Prune Useless:     0.014 s
         Renumber Live:         0.018 s
         IdealLoop:             8.172 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.274 s
         GVN 2:                 0.050 s
         Macro Expand:          1.382 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.404 s
         Other:                 1.596 s
       Matcher:                    3.993 s
         Post Selection Cleanup:   0.414 s
       Scheduler:                  3.526 s
       Regalloc:              4.611 s
         Ctor Chaitin:          0.054 s
         Build IFG (virt):      0.151 s
         Build IFG (phys):      0.647 s
         Compute Liveness:      1.525 s
         Regalloc Split:        1.000 s
         Postalloc Copy Rem:    0.424 s
         Merge multidefs:       0.060 s
         Fixup Spills:          0.110 s
         Compact:               0.006 s
         Coalesce 1:            0.386 s
         Coalesce 2:            0.141 s
         Coalesce 3:            0.024 s
         Cache LRG:             0.003 s
         Simplify:              0.055 s
         Select:                0.092 s
       Block Ordering:        0.354 s
       Peephole:              0.061 s
       Code Emission:           3.390 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.657 s
         Build OOP maps:        0.294 s
         Fill buffer:           0.961 s
         Code Installation:     0.121 s
         Other:                 0.357 s
       Other:                 0.937 s

  Total compiled methods    :     1128 methods
    Standard compilation    :     1116 methods
    On stack replacement    :       12 methods
  Total compiled bytecodes  :    84762 bytes
    Standard compilation    :    81714 bytes
    On stack replacement    :     3048 bytes
  Average compilation speed :     1317 bytes/s

  nmethod code size         :  1780448 bytes
  nmethod total size        :  1266400 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =     21.007 ±(99.9%) 17.152 s/op

  Histogram, s/op:
    [ 0.000,  2.500) = 0 
    [ 2.500,  5.000) = 0 
    [ 5.000,  7.500) = 0 
    [ 7.500, 10.000) = 4 
    [10.000, 12.500) = 0 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 5 
    [30.000, 32.500) = 1 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.595 s/op
     p(50.0000) =     29.575 s/op
     p(90.0000) =     30.169 s/op
     p(95.0000) =     30.210 s/op
     p(99.0000) =     30.210 s/op
     p(99.9000) =     30.210 s/op
     p(99.9900) =     30.210 s/op
     p(99.9990) =     30.210 s/op
     p(99.9999) =     30.210 s/op
    p(100.0000) =     30.210 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm":
  1752.000 ±(99.9%) 3297.855 B/op [Average]
  (min, avg, max) = (1048.000, 1752.000, 7960.000), stdev = 2181.327
  CI (99.9%): [≈ 0, 5049.855] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dbenchmark.plugin=jvbench.plugin.SocketPlugin -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:16:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 408.187 s/op
# Warmup Iteration   2: 27.635 s/op
# Warmup Iteration   3: 332.823 s/op
# Warmup Iteration   4: 386.543 s/op
# Warmup Iteration   5: 408.299 s/op
# Warmup Iteration   6: 26.650 s/op
# Warmup Iteration   7: 27.350 s/op
# Warmup Iteration   8: 408.293 s/op
# Warmup Iteration   9: 26.661 s/op
# Warmup Iteration  10: 101.680 s/op
Iteration   1: 101.739 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 7992.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 101.735 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 101.756 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 101.714 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 101.651 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 101.648 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 101.643 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 101.664 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1080.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 101.639 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 101.635 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁵ MB/sec
                 ·gc.alloc.rate.norm: 1112.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 2803.808 bytes/s; standard: 22.249 s, 62297 bytes, 864 methods; osr:  0.140 s, 477 bytes, 3 methods; nmethods_size: 1305552 bytes; nmethods_code_size: 927712 bytes}
  C2 {speed: 215.655 bytes/s; standard: 26.030 s, 5442 bytes, 60 methods; osr:  1.570 s, 510 bytes, 4 methods; nmethods_size: 57672 bytes; nmethods_code_size: 38784 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1623.629 bytes/s; standard:  0.415 s, 674 bytes, 139 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33416 bytes; nmethods_code_size: 21184 bytes}
  Tier2 {speed: 574.432 bytes/s; standard:  0.171 s, 98 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 976 bytes; nmethods_code_size: 544 bytes}
  Tier3 {speed: 2843.722 bytes/s; standard: 21.663 s, 61525 bytes, 724 methods; osr:  0.140 s, 477 bytes, 3 methods; nmethods_size: 1271160 bytes; nmethods_code_size: 905984 bytes}
  Tier4 {speed: 215.655 bytes/s; standard: 26.030 s, 5442 bytes, 60 methods; osr:  1.570 s, 510 bytes, 4 methods; nmethods_size: 57672 bytes; nmethods_code_size: 38784 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  49.988 s
    Standard compilation   :  48.279 s, Average : 0.052 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   1.710 s, Average : 0.244 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.346 s
       Setup time:            0.025 s
       Build HIR:            13.174 s
         Parse:                11.442 s
         Optimize blocks:       0.022 s
         GVN:                   0.638 s
         Null checks elim:      0.378 s
         Range checks elim:     0.352 s
         Other:                 0.342 s
       Emit LIR:              5.201 s
         LIR Gen:               2.531 s
         Linear Scan:           2.604 s
         Other:                 0.065 s
       Code Emission:         2.453 s
       Code Installation:     1.042 s
       Other:                 0.451 s

    C2 Compile Time:       31.770 s
       Parse:                 7.979 s
       Optimize:             10.487 s
         Escape Analysis:       0.597 s
           Conn Graph:            0.523 s
           Macro Eliminate:       0.006 s
         GVN 1:                 1.724 s
         Incremental Inline:    0.001 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.001 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             5.265 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.184 s
         GVN 2:                 0.038 s
         Macro Expand:          1.197 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.288 s
         Other:                 1.190 s
       Matcher:                    2.938 s
         Post Selection Cleanup:   0.182 s
       Scheduler:                  2.706 s
       Regalloc:              3.742 s
         Ctor Chaitin:          0.021 s
         Build IFG (virt):      0.113 s
         Build IFG (phys):      0.568 s
         Compute Liveness:      1.176 s
         Regalloc Split:        0.846 s
         Postalloc Copy Rem:    0.407 s
         Merge multidefs:       0.068 s
         Fixup Spills:          0.092 s
         Compact:               0.015 s
         Coalesce 1:            0.271 s
         Coalesce 2:            0.133 s
         Coalesce 3:            0.023 s
         Cache LRG:             0.003 s
         Simplify:              0.043 s
         Select:                0.105 s
       Block Ordering:        0.395 s
       Peephole:              0.043 s
       Code Emission:           2.455 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.116 s
         Build OOP maps:        0.188 s
         Fill buffer:           0.760 s
         Code Installation:     0.070 s
         Other:                 0.321 s
       Other:                 0.958 s

  Total compiled methods    :      931 methods
    Standard compilation    :      924 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    68726 bytes
    Standard compilation    :    67739 bytes
    On stack replacement    :      987 bytes
  Average compilation speed :     1374 bytes/s

  nmethod code size         :  1363224 bytes
  nmethod total size        :   966496 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =    101.682 ±(99.9%) 0.072 s/op

  Histogram, s/op:
    [101.600, 101.613) = 0 
    [101.613, 101.625) = 0 
    [101.625, 101.638) = 1 
    [101.638, 101.650) = 3 
    [101.650, 101.663) = 1 
    [101.663, 101.675) = 1 
    [101.675, 101.688) = 0 
    [101.688, 101.700) = 0 
    [101.700, 101.713) = 0 
    [101.713, 101.725) = 1 
    [101.725, 101.738) = 1 
    [101.738, 101.750) = 1 
    [101.750, 101.763) = 1 
    [101.763, 101.775) = 0 
    [101.775, 101.788) = 0 
    [101.788, 101.800) = 0 

  Percentiles, s/op:
      p(0.0000) =    101.635 s/op
     p(50.0000) =    101.658 s/op
     p(90.0000) =    101.754 s/op
     p(95.0000) =    101.756 s/op
     p(99.0000) =    101.756 s/op
     p(99.9000) =    101.756 s/op
     p(99.9900) =    101.756 s/op
     p(99.9990) =    101.756 s/op
     p(99.9999) =    101.756 s/op
    p(100.0000) =    101.756 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁵ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate.norm":
  1793.600 ±(99.9%) 3292.729 B/op [Average]
  (min, avg, max) = (1080.000, 1793.600, 7992.000), stdev = 2177.936
  CI (99.9%): [≈ 0, 5086.329] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 01:43:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt     Score      Error   Units
Jacobi2dBenchmark.autoVec                            ss   10    55.924 ±    0.206    s/op
Jacobi2dBenchmark.autoVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁵             MB/sec
Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  1768.000 ± 3306.302    B/op
Jacobi2dBenchmark.autoVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.explicitVec                        ss   10    20.657 ±   17.270    s/op
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate         ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  1764.800 ± 3299.546    B/op
Jacobi2dBenchmark.explicitVec:·gc.count              ss   10       ≈ 0             counts
Jacobi2dBenchmark.fullVec                            ss   10    21.007 ±   17.152    s/op
Jacobi2dBenchmark.fullVec:·gc.alloc.rate             ss   10    ≈ 10⁻⁴             MB/sec
Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  1752.000 ± 3297.855    B/op
Jacobi2dBenchmark.fullVec:·gc.count                  ss   10       ≈ 0             counts
Jacobi2dBenchmark.serial                             ss   10   101.682 ±    0.072    s/op
Jacobi2dBenchmark.serial:·gc.alloc.rate              ss   10    ≈ 10⁻⁵             MB/sec
Jacobi2dBenchmark.serial:·gc.alloc.rate.norm         ss   10  1793.600 ± 3292.729    B/op
Jacobi2dBenchmark.serial:·gc.count                   ss   10       ≈ 0             counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/pin_vectorial/2024-05-18_10:17:48/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 4954.270 bytes/s; standard: 21.862 s, 108806 bytes, 1277 methods; osr:  0.232 s, 649 bytes, 1 methods; nmethods_size: 2207320 bytes; nmethods_code_size: 1560192 bytes}
  C2 {speed: 513.256 bytes/s; standard: 34.513 s, 17972 bytes, 120 methods; osr:  0.632 s, 66 bytes, 2 methods; nmethods_size: 150072 bytes; nmethods_code_size: 92800 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 1666.943 bytes/s; standard:  0.428 s, 713 bytes, 150 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36168 bytes; nmethods_code_size: 22816 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 5019.171 bytes/s; standard: 21.434 s, 108093 bytes, 1127 methods; osr:  0.232 s, 649 bytes, 1 methods; nmethods_size: 2171152 bytes; nmethods_code_size: 1537376 bytes}
  Tier4 {speed: 513.256 bytes/s; standard: 34.513 s, 17972 bytes, 120 methods; osr:  0.632 s, 66 bytes, 2 methods; nmethods_size: 150072 bytes; nmethods_code_size: 92800 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :  57.237 s
    Standard compilation   :  56.374 s, Average : 0.040 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.863 s, Average : 0.288 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:       22.046 s
       Setup time:            0.036 s
       Build HIR:            12.663 s
         Parse:                11.044 s
         Optimize blocks:       0.010 s
         GVN:                   0.498 s
         Null checks elim:      0.425 s
         Range checks elim:     0.345 s
         Other:                 0.341 s
       Emit LIR:              5.130 s
         LIR Gen:               2.615 s
         Linear Scan:           2.450 s
         Other:                 0.065 s
       Code Emission:         2.671 s
       Code Installation:     1.123 s
       Other:                 0.424 s

    C2 Compile Time:       39.500 s
       Parse:                 9.885 s
       Optimize:             13.030 s
         Escape Analysis:       0.916 s
           Conn Graph:            0.851 s
           Macro Eliminate:       0.004 s
         GVN 1:                 1.892 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.022 s
         IdealLoop:             6.602 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.286 s
         GVN 2:                 0.047 s
         Macro Expand:          1.374 s
         Barrier Expand:        0.001 s
         Graph Reshape:         0.454 s
         Other:                 1.433 s
       Matcher:                    3.668 s
         Post Selection Cleanup:   0.270 s
       Scheduler:                  3.336 s
       Regalloc:              4.866 s
         Ctor Chaitin:          0.026 s
         Build IFG (virt):      0.159 s
         Build IFG (phys):      0.629 s
         Compute Liveness:      1.493 s
         Regalloc Split:        1.131 s
         Postalloc Copy Rem:    0.472 s
         Merge multidefs:       0.060 s
         Fixup Spills:          0.120 s
         Compact:               0.026 s
         Coalesce 1:            0.395 s
         Coalesce 2:            0.223 s
         Coalesce 3:            0.037 s
         Cache LRG:             0.003 s
         Simplify:              0.065 s
         Select:                0.078 s
       Block Ordering:        0.328 s
       Peephole:              0.036 s
       Code Emission:           3.385 s
         Insn Scheduling:       0.000 s
         Shorten branches:      1.836 s
         Build OOP maps:        0.246 s
         Fill buffer:           0.993 s
         Code Installation:     0.072 s
         Other:                 0.237 s
       Other:                 0.894 s

  Total compiled methods    :     1400 methods
    Standard compilation    :     1397 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   127493 bytes
    Standard compilation    :   126778 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :     2227 bytes/s

  nmethod code size         :  2357392 bytes
  nmethod total size        :  1652992 bytes
