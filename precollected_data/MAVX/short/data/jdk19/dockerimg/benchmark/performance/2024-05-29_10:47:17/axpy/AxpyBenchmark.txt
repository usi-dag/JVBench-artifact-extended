                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

                              @ 2   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                  @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
# Warmup Iteration   1:                                       @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                      @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                        @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.167 s/op
# Warmup Iteration   2: 0.115 s/op
# Warmup Iteration   3: 0.110 s/op
# Warmup Iteration   4: 0.176 s/op
# Warmup Iteration   5: 0.106 s/op
# Warmup Iteration   6: 0.110 s/op
# Warmup Iteration   7: 0.108 s/op
# Warmup Iteration   8: 0.108 s/op
# Warmup Iteration   9: 0.159 s/op
# Warmup Iteration  10: 0.110 s/op
Iteration   1: 0.106 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.182 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.119 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.113 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 48722.925 bytes/s; standard:  1.244 s, 59961 bytes, 848 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 1260624 bytes; nmethods_code_size: 898240 bytes}
  C2 {speed: 28905.715 bytes/s; standard:  0.133 s, 4360 bytes, 53 methods; osr:  0.025 s, 191 bytes, 4 methods; nmethods_size: 40544 bytes; nmethods_code_size: 26272 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 60871.001 bytes/s; standard:  0.011 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 48614.955 bytes/s; standard:  1.233 s, 59292 bytes, 710 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 1227424 bytes; nmethods_code_size: 877184 bytes}
  Tier4 {speed: 28905.715 bytes/s; standard:  0.133 s, 4360 bytes, 53 methods; osr:  0.025 s, 191 bytes, 4 methods; nmethods_size: 40544 bytes; nmethods_code_size: 26272 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.405 s
    Standard compilation   :   1.377 s, Average : 0.002 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.028 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        1.244 s
       Setup time:            0.002 s
       Build HIR:             0.125 s
         Parse:                 0.103 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.415 s
         LIR Gen:               0.342 s
         Linear Scan:           0.072 s
         Other:                 0.001 s
       Code Emission:         0.032 s
       Code Installation:     0.663 s
       Other:                 0.008 s

    C2 Compile Time:        0.160 s
       Parse:                 0.019 s
       Optimize:              0.065 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.049 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.011 s
       Regalloc:              0.042 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.006 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.009 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      908 methods
    Standard compilation    :      901 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    65336 bytes
    Standard compilation    :    64321 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :    46502 bytes/s

  nmethod code size         :  1301168 bytes
  nmethod total size        :   924512 bytes
                                    @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                        @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                      @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                      @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                              @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                                @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 40   java.lang.Math::min (11 bytes)   (intrinsic)
                                              @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                    @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)


                                    @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.118 ±(99.9%) 0.035 s/op

  Histogram, s/op:
    [0.100, 0.105) = 0 
    [0.105, 0.110) = 6 
    [0.110, 0.115) = 2 
    [0.115, 0.120) = 1 
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 0 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 0 
    [0.140, 0.145) = 0 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 0 
    [0.155, 0.160) = 0 
    [0.160, 0.165) = 0 
    [0.165, 0.170) = 0 
    [0.170, 0.175) = 0 
    [0.175, 0.180) = 0 
    [0.180, 0.185) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.106 s/op
     p(50.0000) =      0.109 s/op
     p(90.0000) =      0.176 s/op
     p(95.0000) =      0.182 s/op
     p(99.0000) =      0.182 s/op
     p(99.9000) =      0.182 s/op
     p(99.9900) =      0.182 s/op
     p(99.9990) =      0.182 s/op
     p(99.9999) =      0.182 s/op
    p(100.0000) =      0.182 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:00:49
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
# Warmup Iteration   1:                                 @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                  @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
  ** missing constant: opr=RShiftI vclass=ConP etype=ConP vlen=ConI
                                      @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   failed to inline (intrinsic)
                                @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                          @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                      @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                      @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                        @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                        @ 12   jdk.internal.misc.Unsafe::allocateInstance (0 bytes)   (intrinsic)
                                      @ 1   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
0.231 s/op
# Warmup Iteration   2:                                     @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
0.133 s/op
# Warmup Iteration   3: 0.107 s/op
# Warmup Iteration   4: 0.166 s/op
# Warmup Iteration   5: 0.107 s/op
# Warmup Iteration   6: 0.107 s/op
# Warmup Iteration   7: 0.107 s/op
# Warmup Iteration   8:                                       @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
0.166 s/op
                              @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
# Warmup Iteration   9: 0.107 s/op
# Warmup Iteration  10: 0.107 s/op
Iteration   1: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.122 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.107 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 53281.448 bytes/s; standard:  1.347 s, 71155 bytes, 1000 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1605680 bytes; nmethods_code_size: 1147776 bytes}
  C2 {speed: 30511.638 bytes/s; standard:  0.228 s, 6737 bytes, 82 methods; osr:  0.027 s, 1065 bytes, 4 methods; nmethods_size: 66904 bytes; nmethods_code_size: 41344 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 63593.167 bytes/s; standard:  0.011 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 53196.997 bytes/s; standard:  1.336 s, 70456 bytes, 856 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1571120 bytes; nmethods_code_size: 1125888 bytes}
  Tier4 {speed: 30511.638 bytes/s; standard:  0.228 s, 6737 bytes, 82 methods; osr:  0.027 s, 1065 bytes, 4 methods; nmethods_size: 66904 bytes; nmethods_code_size: 41344 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.609 s
    Standard compilation   :   1.576 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.033 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        1.348 s
       Setup time:            0.002 s
       Build HIR:             0.492 s
         Parse:                 0.465 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.009 s
       Emit LIR:              0.121 s
         LIR Gen:               0.030 s
         Linear Scan:           0.090 s
         Other:                 0.002 s
       Code Emission:         0.366 s
       Code Installation:     0.358 s
       Other:                 0.009 s

    C2 Compile Time:        0.258 s
       Parse:                 0.052 s
       Optimize:              0.089 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.003 s
           Box elimination:     0.003 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.059 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.018 s
       Regalloc:              0.063 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.012 s
         Compute Liveness:      0.022 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1089 methods
    Standard compilation    :     1082 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    79898 bytes
    Standard compilation    :    77892 bytes
    On stack replacement    :     2006 bytes
  Average compilation speed :    49662 bytes/s

  nmethod code size         :  1672584 bytes
  nmethod total size        :  1189120 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.109 ±(99.9%) 0.007 s/op

  Histogram, s/op:
    [0.100, 0.103) = 0 
    [0.103, 0.105) = 0 
    [0.105, 0.108) = 9 
    [0.108, 0.110) = 0 
    [0.110, 0.113) = 0 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 0 
    [0.118, 0.120) = 0 
    [0.120, 0.123) = 1 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.107 s/op
     p(50.0000) =      0.107 s/op
     p(90.0000) =      0.121 s/op
     p(95.0000) =      0.122 s/op
     p(99.0000) =      0.122 s/op
     p(99.9000) =      0.122 s/op
     p(99.9900) =      0.122 s/op
     p(99.9990) =      0.122 s/op
     p(99.9999) =      0.122 s/op
    p(100.0000) =      0.122 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:00:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
# Warmup Iteration   1:                               @ 91   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                                        @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 91   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 91   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                        @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                  @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
  ** missing constant: opr=RShiftI vclass=ConP etype=ConP vlen=ConI
                                      @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                  @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   failed to inline (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                      @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                      @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                          @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                          @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                                @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                        @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                    @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                  @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                              @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                          @ 3   jdk.internal.misc.Unsafe::loadFence (5 bytes)   (intrinsic)
                                        @ 12   jdk.internal.misc.Unsafe::allocateInstance (0 bytes)   (intrinsic)
                                      @ 1   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
0.242 s/op
# Warmup Iteration   2:                                     @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 32   jdk.internal.vm.vector.VectorSupport::load (38 bytes)   (intrinsic)
                                            @ 1   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                            @ 19   jdk.internal.vm.vector.VectorSupport::fromBitsCoerced (35 bytes)   (intrinsic)
                                            @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                            @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                        @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                          @ 1   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                          @ 5   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 85   java.lang.Object::getClass (0 bytes)   (intrinsic)
                                      @ 116   jdk.internal.vm.vector.VectorSupport::binaryOp (38 bytes)   (intrinsic)
                                    @ 3   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                @ 43   jdk.internal.vm.vector.VectorSupport::store (38 bytes)   (intrinsic)
0.135 s/op
# Warmup Iteration   3: 0.462 s/op
# Warmup Iteration   4: 0.110 s/op
# Warmup Iteration   5: 0.383 s/op
# Warmup Iteration   6:                                       @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                        @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                      @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.109 s/op
# Warmup Iteration   7: 0.109 s/op
# Warmup Iteration   8: 0.136 s/op
# Warmup Iteration   9: 0.187 s/op
# Warmup Iteration  10: 0.109 s/op
Iteration   1: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.110 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3:                                     @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                  @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 32   java.lang.StringLatin1::indexOfChar (33 bytes)   (intrinsic)
0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4:                                   @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5:                                         @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                          @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                        @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.110 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.110 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.109 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 70569.896 bytes/s; standard:  1.018 s, 71268 bytes, 1003 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1609040 bytes; nmethods_code_size: 1150144 bytes}
  C2 {speed: 30446.659 bytes/s; standard:  0.225 s, 6712 bytes, 81 methods; osr:  0.031 s, 1065 bytes, 4 methods; nmethods_size: 66232 bytes; nmethods_code_size: 40768 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 61925.182 bytes/s; standard:  0.011 s, 699 bytes, 144 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34560 bytes; nmethods_code_size: 21888 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 70666.324 bytes/s; standard:  1.006 s, 70569 bytes, 859 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1574480 bytes; nmethods_code_size: 1128256 bytes}
  Tier4 {speed: 30446.659 bytes/s; standard:  0.225 s, 6712 bytes, 81 methods; osr:  0.031 s, 1065 bytes, 4 methods; nmethods_size: 66232 bytes; nmethods_code_size: 40768 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.279 s
    Standard compilation   :   1.242 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.036 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        1.019 s
       Setup time:            0.002 s
       Build HIR:             0.168 s
         Parse:                 0.141 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.124 s
         LIR Gen:               0.031 s
         Linear Scan:           0.091 s
         Other:                 0.002 s
       Code Emission:         0.041 s
       Code Installation:     0.674 s
       Other:                 0.010 s

    C2 Compile Time:        0.258 s
       Parse:                 0.051 s
       Optimize:              0.088 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.002 s
           Box elimination:     0.002 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.060 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.018 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.065 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.013 s
         Compute Liveness:      0.022 s
         Regalloc Split:        0.006 s
         Postalloc Copy Rem:    0.010 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.014 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1091 methods
    Standard compilation    :     1084 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    79986 bytes
    Standard compilation    :    77980 bytes
    On stack replacement    :     2006 bytes
  Average compilation speed :    62554 bytes/s

  nmethod code size         :  1675272 bytes
  nmethod total size        :  1190912 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.109 ±(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.109, 0.109) = 0 
    [0.109, 0.109) = 2 
    [0.109, 0.109) = 0 
    [0.109, 0.109) = 0 
    [0.109, 0.109) = 2 
    [0.109, 0.109) = 1 
    [0.109, 0.109) = 1 
    [0.109, 0.109) = 0 
    [0.109, 0.109) = 0 
    [0.109, 0.110) = 1 
    [0.110, 0.110) = 2 
    [0.110, 0.110) = 0 
    [0.110, 0.110) = 0 
    [0.110, 0.110) = 0 
    [0.110, 0.110) = 0 
    [0.110, 0.110) = 0 
    [0.110, 0.110) = 1 
    [0.110, 0.110) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.109 s/op
     p(50.0000) =      0.109 s/op
     p(90.0000) =      0.110 s/op
     p(95.0000) =      0.110 s/op
     p(99.0000) =      0.110 s/op
     p(99.9000) =      0.110 s/op
     p(99.9900) =      0.110 s/op
     p(99.9990) =      0.110 s/op
     p(99.9999) =      0.110 s/op
    p(100.0000) =      0.110 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime -XX:+PrintIntrinsics --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                    @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 5   jdk.internal.misc.Unsafe::putReferenceVolatile (0 bytes)   (intrinsic)
                                  @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
# Warmup Iteration   1:                                   @ 16   java.lang.Class::isPrimitive (0 bytes)   (intrinsic)
                                  @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   (intrinsic)
                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                    @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 55   java.lang.Math::min (11 bytes)   (intrinsic)
                              @ 58   java.lang.System::arraycopy (0 bytes)   (intrinsic)
0.154 s/op
# Warmup Iteration   2:                                           @ 0   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
                                            @ 9   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                          @ 11   java.lang.Thread::currentThread (0 bytes)   (intrinsic)
0.117 s/op
# Warmup Iteration   3: 0.111 s/op
# Warmup Iteration   4: 0.111 s/op
# Warmup Iteration   5: 0.181 s/op
# Warmup Iteration   6: 0.111 s/op
# Warmup Iteration   7: 0.111 s/op
# Warmup Iteration   8: 0.111 s/op
# Warmup Iteration   9: 0.123 s/op
# Warmup Iteration  10: 0.110 s/op
Iteration   1: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.117 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 0.138 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 0.111 s/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 48486.500 bytes/s; standard:  1.246 s, 59783 bytes, 845 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 1255536 bytes; nmethods_code_size: 894432 bytes}
  C2 {speed: 29374.591 bytes/s; standard:  0.136 s, 4341 bytes, 52 methods; osr:  0.019 s, 191 bytes, 4 methods; nmethods_size: 40768 bytes; nmethods_code_size: 26592 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 63220.719 bytes/s; standard:  0.011 s, 669 bytes, 138 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 33200 bytes; nmethods_code_size: 21056 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 48360.699 bytes/s; standard:  1.236 s, 59114 bytes, 707 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 1222336 bytes; nmethods_code_size: 873376 bytes}
  Tier4 {speed: 29374.591 bytes/s; standard:  0.136 s, 4341 bytes, 52 methods; osr:  0.019 s, 191 bytes, 4 methods; nmethods_size: 40768 bytes; nmethods_code_size: 26592 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   1.404 s
    Standard compilation   :   1.382 s, Average : 0.002 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.022 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        1.246 s
       Setup time:            0.002 s
       Build HIR:             0.444 s
         Parse:                 0.423 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.094 s
         LIR Gen:               0.022 s
         Linear Scan:           0.070 s
         Other:                 0.001 s
       Code Emission:         0.352 s
       Code Installation:     0.025 s
       Other:                 0.329 s

    C2 Compile Time:        0.157 s
       Parse:                 0.018 s
       Optimize:              0.064 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.048 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.012 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.012 s
       Regalloc:              0.040 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.006 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :      904 methods
    Standard compilation    :      897 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    65139 bytes
    Standard compilation    :    64124 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :    46386 bytes/s

  nmethod code size         :  1296304 bytes
  nmethod total size        :   921024 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.114 ±(99.9%) 0.013 s/op

  Histogram, s/op:
    [0.110, 0.113) = 8 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 1 
    [0.118, 0.120) = 0 
    [0.120, 0.123) = 0 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 0 
    [0.128, 0.130) = 0 
    [0.130, 0.133) = 0 
    [0.133, 0.135) = 0 
    [0.135, 0.138) = 0 
    [0.138, 0.140) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.111 s/op
     p(50.0000) =      0.111 s/op
     p(90.0000) =      0.136 s/op
     p(95.0000) =      0.138 s/op
     p(99.0000) =      0.138 s/op
     p(99.9000) =      0.138 s/op
     p(99.9900) =      0.138 s/op
     p(99.9990) =      0.138 s/op
     p(99.9999) =      0.138 s/op
    p(100.0000) =      0.138 s/op

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.alloc.rate.norm":
  504.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
  CI (99.9%): [504.000, 504.000] (assumes normal distribution)

Secondary result "jvbench.axpy.AxpyBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                      @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 40   java.lang.StringLatin1::inflate (10 bytes)   (intrinsic)
                                @ 32   java.lang.StringLatin1::indexOfChar (33 bytes)   (intrinsic)
                              @ 4   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                              @ 8   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
                              @ 1   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                              @ 7   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                                @ 1   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                                @ 7   java.lang.Double::doubleToLongBits (16 bytes)   (intrinsic)
                                @ 4   java.lang.Double::doubleToRawLongBits (0 bytes)   (intrinsic)
                                @ 8   java.lang.Double::longBitsToDouble (0 bytes)   (intrinsic)
Benchmark                                                      @ 3   java.lang.Math::max (11 bytes)   (intrinsic)
                                  @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 22   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                  @ 40   java.lang.StringLatin1::inflate (10 bytes)   (intrinsic)
                    Mode  Cnt    Score    Error   Units
AxpyBenchmark.autoVec                            ss   10    0.118 ±  0.035    s/op
AxpyBenchmark.autoVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.explicitVec                        ss   10    0.109 ±  0.007    s/op
AxpyBenchmark.explicitVec:·gc.alloc.rate         ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
AxpyBenchmark.fullVec                            ss   10    0.109 ±  0.001    s/op
AxpyBenchmark.fullVec:·gc.alloc.rate             ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
AxpyBenchmark.serial                             ss   10    0.114 ±  0.013    s/op
AxpyBenchmark.serial:·gc.alloc.rate              ss   10    0.001 ±  0.001  MB/sec
AxpyBenchmark.serial:·gc.alloc.rate.norm         ss   10  504.000 ±  0.001    B/op
AxpyBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                                        @ 5   jdk.internal.util.Preconditions::checkIndex (18 bytes)   (intrinsic)
                              @ 17   java.lang.Object::hashCode (0 bytes)   (intrinsic, virtual)
                                @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                                @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   (intrinsic)
                                @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)   (intrinsic)
                                @ 31   jdk.internal.misc.Unsafe::compareAndSetLong (0 bytes)   (intrinsic)
                                  @ 1   java.lang.Integer::numberOfLeadingZeros (79 bytes)   (intrinsic)
                                @ 227   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                                @ 257   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   (intrinsic)
                              @ 32   java.lang.StringLatin1::compareTo (14 bytes)   (intrinsic)
                                @ 32   java.lang.StringLatin1::compareTo (14 bytes)   (intrinsic)

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-29_10:47:17/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 234538.198 bytes/s; standard:  0.448 s, 105031 bytes, 1257 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 2142848 bytes; nmethods_code_size: 1512672 bytes}
  C2 {speed: 37592.559 bytes/s; standard:  0.536 s, 20355 bytes, 119 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 161272 bytes; nmethods_code_size: 98624 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 64701.200 bytes/s; standard:  0.011 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 238838.843 bytes/s; standard:  0.437 s, 104311 bytes, 1105 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 2106216 bytes; nmethods_code_size: 1489568 bytes}
  Tier4 {speed: 37592.559 bytes/s; standard:  0.536 s, 20355 bytes, 119 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 161272 bytes; nmethods_code_size: 98624 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.994 s
    Standard compilation   :   0.984 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.010 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.445 s
       Setup time:            0.002 s
       Build HIR:             0.178 s
         Parse:                 0.143 s
         Optimize blocks:       0.000 s
         GVN:                   0.013 s
         Null checks elim:      0.008 s
         Range checks elim:     0.002 s
         Other:                 0.012 s
       Emit LIR:              0.162 s
         LIR Gen:               0.038 s
         Linear Scan:           0.122 s
         Other:                 0.002 s
       Code Emission:         0.052 s
       Code Installation:     0.039 s
       Other:                 0.011 s

    C2 Compile Time:        0.545 s
       Parse:                 0.088 s
       Optimize:              0.144 s
         Escape Analysis:       0.003 s
           Conn Graph:            0.003 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.017 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.002 s
         IdealLoop:             0.090 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.006 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.004 s
         Other:                 0.018 s
       Matcher:                    0.043 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.045 s
       Regalloc:              0.192 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.035 s
         Compute Liveness:      0.062 s
         Regalloc Split:        0.023 s
         Postalloc Copy Rem:    0.032 s
         Merge multidefs:       0.013 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.007 s
         Coalesce 2:            0.002 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.007 s
         Select:                0.009 s
       Block Ordering:        0.003 s
       Peephole:              0.001 s
       Code Emission:           0.030 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.006 s
         Build OOP maps:        0.010 s
         Fill buffer:           0.008 s
         Code Installation:     0.004 s
         Other:                 0.002 s

  Total compiled methods    :     1379 methods
    Standard compilation    :     1376 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   126101 bytes
    Standard compilation    :   125386 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   126886 bytes/s

  nmethod code size         :  2304120 bytes
  nmethod total size        :  1611296 bytes
