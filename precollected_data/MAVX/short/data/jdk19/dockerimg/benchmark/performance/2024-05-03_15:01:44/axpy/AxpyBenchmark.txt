# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.169 s/op
# Warmup Iteration   2: 0.117 s/op
# Warmup Iteration   3: 0.108 s/op
# Warmup Iteration   4: 0.109 s/op
# Warmup Iteration   5: 0.175 s/op
# Warmup Iteration   6: 0.108 s/op
# Warmup Iteration   7: 0.109 s/op
# Warmup Iteration   8: 0.108 s/op
# Warmup Iteration   9: 0.108 s/op
# Warmup Iteration  10: 0.174 s/op
Iteration   1: 0.108 s/op
Iteration   2: 0.108 s/op
Iteration   3: 0.109 s/op
Iteration   4: 0.182 s/op
Iteration   5: 0.108 s/op
Iteration   6: 0.108 s/op
Iteration   7: 0.108 s/op
Iteration   8: 0.109 s/op
Iteration   9: 0.109 s/op
Iteration  10: 0.107 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 219430.539 bytes/s; standard:  0.208 s, 45762 bytes, 637 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 904768 bytes; nmethods_code_size: 644096 bytes}
  C2 {speed: 29536.658 bytes/s; standard:  0.127 s, 4273 bytes, 50 methods; osr:  0.024 s, 191 bytes, 4 methods; nmethods_size: 39296 bytes; nmethods_code_size: 25408 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 67357.085 bytes/s; standard:  0.008 s, 524 bytes, 109 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 26200 bytes; nmethods_code_size: 16608 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 225214.905 bytes/s; standard:  0.201 s, 45238 bytes, 528 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 878568 bytes; nmethods_code_size: 627488 bytes}
  Tier4 {speed: 29536.658 bytes/s; standard:  0.127 s, 4273 bytes, 50 methods; osr:  0.024 s, 191 bytes, 4 methods; nmethods_size: 39296 bytes; nmethods_code_size: 25408 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.363 s
    Standard compilation   :   0.336 s, Average : 0.000 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.028 s, Average : 0.004 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.210 s
       Setup time:            0.001 s
       Build HIR:             0.090 s
         Parse:                 0.074 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.069 s
         LIR Gen:               0.016 s
         Linear Scan:           0.052 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.021 s
       Other:                 0.006 s

    C2 Compile Time:        0.154 s
       Parse:                 0.017 s
       Optimize:              0.063 s
         Escape Analysis:       0.000 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.048 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.011 s
       Regalloc:              0.041 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.005 s
         Merge multidefs:       0.003 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.002 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :      694 methods
    Standard compilation    :      687 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    51050 bytes
    Standard compilation    :    50035 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :   140464 bytes/s

  nmethod code size         :   944064 bytes
  nmethod total size        :   669504 bytes


Result "jvbench.axpy.AxpyBenchmark.autoVec":
  N = 10
  mean =      0.116 Â±(99.9%) 0.035 s/op

  Histogram, s/op:
    [0.100, 0.105) = 0 
    [0.105, 0.110) = 9 
    [0.110, 0.115) = 0 
    [0.115, 0.120) = 0 
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 0 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 0 
    [0.140, 0.145) = 0 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 0 
    [0.155, 0.160) = 0 
    [0.160, 0.165) = 0 
    [0.165, 0.170) = 0 
    [0.170, 0.175) = 0 
    [0.175, 0.180) = 0 
    [0.180, 0.185) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.107 s/op
     p(50.0000) =      0.108 s/op
     p(90.0000) =      0.175 s/op
     p(95.0000) =      0.182 s/op
     p(99.0000) =      0.182 s/op
     p(99.9000) =      0.182 s/op
     p(99.9900) =      0.182 s/op
     p(99.9990) =      0.182 s/op
     p(99.9999) =      0.182 s/op
    p(100.0000) =      0.182 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:00:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.250 s/op
# Warmup Iteration   2: 0.133 s/op
# Warmup Iteration   3: 0.108 s/op
# Warmup Iteration   4: 0.174 s/op
# Warmup Iteration   5: 0.108 s/op
# Warmup Iteration   6: 0.108 s/op
# Warmup Iteration   7: 0.108 s/op
# Warmup Iteration   8: 0.149 s/op
# Warmup Iteration   9: 0.138 s/op
# Warmup Iteration  10: 0.110 s/op
Iteration   1: 0.110 s/op
Iteration   2: 0.110 s/op
Iteration   3: 0.110 s/op
Iteration   4: 0.106 s/op
Iteration   5: 0.110 s/op
Iteration   6: 0.110 s/op
Iteration   7: 0.110 s/op
Iteration   8: 0.110 s/op
Iteration   9: 0.110 s/op
Iteration  10: 0.110 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 191840.527 bytes/s; standard:  0.270 s, 51928 bytes, 764 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1157808 bytes; nmethods_code_size: 830368 bytes}
  C2 {speed: 31846.460 bytes/s; standard:  0.206 s, 6463 bytes, 78 methods; osr:  0.031 s, 1111 bytes, 5 methods; nmethods_size: 63624 bytes; nmethods_code_size: 38720 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 63504.234 bytes/s; standard:  0.009 s, 544 bytes, 113 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 27128 bytes; nmethods_code_size: 17184 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 195957.697 bytes/s; standard:  0.261 s, 51384 bytes, 651 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1130680 bytes; nmethods_code_size: 813184 bytes}
  Tier4 {speed: 31846.460 bytes/s; standard:  0.206 s, 6463 bytes, 78 methods; osr:  0.031 s, 1111 bytes, 5 methods; nmethods_size: 63624 bytes; nmethods_code_size: 38720 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.513 s
    Standard compilation   :   0.476 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.038 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.272 s
       Setup time:            0.002 s
       Build HIR:             0.122 s
         Parse:                 0.102 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.089 s
         LIR Gen:               0.021 s
         Linear Scan:           0.066 s
         Other:                 0.001 s
       Code Emission:         0.029 s
       Code Installation:     0.024 s
       Other:                 0.007 s

    C2 Compile Time:        0.241 s
       Parse:                 0.049 s
       Optimize:              0.084 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.002 s
           Box elimination:     0.002 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.057 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.009 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.058 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.011 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.009 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      850 methods
    Standard compilation    :      842 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    60443 bytes
    Standard compilation    :    58391 bytes
    On stack replacement    :     2052 bytes
  Average compilation speed :   117726 bytes/s

  nmethod code size         :  1221432 bytes
  nmethod total size        :   869088 bytes


Result "jvbench.axpy.AxpyBenchmark.explicitVec":
  N = 10
  mean =      0.109 Â±(99.9%) 0.002 s/op

  Histogram, s/op:
    [0.106, 0.107) = 1 
    [0.107, 0.107) = 0 
    [0.107, 0.108) = 0 
    [0.108, 0.108) = 0 
    [0.108, 0.109) = 0 
    [0.109, 0.109) = 0 
    [0.109, 0.110) = 0 
    [0.110, 0.110) = 8 
    [0.110, 0.111) = 1 
    [0.111, 0.111) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.106 s/op
     p(50.0000) =      0.110 s/op
     p(90.0000) =      0.110 s/op
     p(95.0000) =      0.110 s/op
     p(99.0000) =      0.110 s/op
     p(99.9000) =      0.110 s/op
     p(99.9900) =      0.110 s/op
     p(99.9990) =      0.110 s/op
     p(99.9999) =      0.110 s/op
    p(100.0000) =      0.110 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:00:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.259 s/op
# Warmup Iteration   2: 0.135 s/op
# Warmup Iteration   3: 0.108 s/op
# Warmup Iteration   4: 0.167 s/op
# Warmup Iteration   5: 0.104 s/op
# Warmup Iteration   6: 0.108 s/op
# Warmup Iteration   7: 0.108 s/op
# Warmup Iteration   8: 0.118 s/op
# Warmup Iteration   9: 0.108 s/op
# Warmup Iteration  10: 0.109 s/op
Iteration   1: 0.109 s/op
Iteration   2: 0.109 s/op
Iteration   3: 0.111 s/op
Iteration   4: 0.140 s/op
Iteration   5: 0.140 s/op
Iteration   6: 0.238 s/op
Iteration   7: 0.108 s/op
Iteration   8: 0.108 s/op
Iteration   9: 0.107 s/op
Iteration  10: 0.109 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 198020.610 bytes/s; standard:  0.259 s, 51527 bytes, 766 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1152096 bytes; nmethods_code_size: 826016 bytes}
  C2 {speed: 32294.107 bytes/s; standard:  0.200 s, 6444 bytes, 77 methods; osr:  0.033 s, 1111 bytes, 5 methods; nmethods_size: 62992 bytes; nmethods_code_size: 38112 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 66020.723 bytes/s; standard:  0.008 s, 544 bytes, 113 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 27128 bytes; nmethods_code_size: 17184 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 202257.315 bytes/s; standard:  0.251 s, 50983 bytes, 653 methods; osr:  0.006 s, 941 bytes, 3 methods; nmethods_size: 1124968 bytes; nmethods_code_size: 808832 bytes}
  Tier4 {speed: 32294.107 bytes/s; standard:  0.200 s, 6444 bytes, 77 methods; osr:  0.033 s, 1111 bytes, 5 methods; nmethods_size: 62992 bytes; nmethods_code_size: 38112 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.499 s
    Standard compilation   :   0.460 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.039 s, Average : 0.005 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.262 s
       Setup time:            0.001 s
       Build HIR:             0.116 s
         Parse:                 0.097 s
         Optimize blocks:       0.000 s
         GVN:                   0.007 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.007 s
       Emit LIR:              0.086 s
         LIR Gen:               0.020 s
         Linear Scan:           0.065 s
         Other:                 0.001 s
       Code Emission:         0.028 s
       Code Installation:     0.023 s
       Other:                 0.007 s

    C2 Compile Time:        0.237 s
       Parse:                 0.048 s
       Optimize:              0.083 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.005 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.002 s
           Box elimination:     0.002 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.057 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.009 s
       Matcher:                    0.016 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.016 s
       Regalloc:              0.059 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.011 s
         Compute Liveness:      0.020 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.009 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.002 s
         Select:                0.003 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      851 methods
    Standard compilation    :      843 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    60023 bytes
    Standard compilation    :    57971 bytes
    On stack replacement    :     2052 bytes
  Average compilation speed :   120309 bytes/s

  nmethod code size         :  1215088 bytes
  nmethod total size        :   864128 bytes


Result "jvbench.axpy.AxpyBenchmark.fullVec":
  N = 10
  mean =      0.128 Â±(99.9%) 0.062 s/op

  Histogram, s/op:
    [0.100, 0.113) = 7 
    [0.113, 0.125) = 0 
    [0.125, 0.138) = 0 
    [0.138, 0.150) = 2 
    [0.150, 0.163) = 0 
    [0.163, 0.175) = 0 
    [0.175, 0.188) = 0 
    [0.188, 0.200) = 0 
    [0.200, 0.213) = 0 
    [0.213, 0.225) = 0 
    [0.225, 0.238) = 0 
    [0.238, 0.250) = 1 
    [0.250, 0.263) = 0 
    [0.263, 0.275) = 0 
    [0.275, 0.288) = 0 
    [0.288, 0.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.107 s/op
     p(50.0000) =      0.109 s/op
     p(90.0000) =      0.228 s/op
     p(95.0000) =      0.238 s/op
     p(99.0000) =      0.238 s/op
     p(99.9000) =      0.238 s/op
     p(99.9900) =      0.238 s/op
     p(99.9990) =      0.238 s/op
     p(99.9999) =      0.238 s/op
    p(100.0000) =      0.238 s/op


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=70000 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.axpy.AxpyBenchmark.serial

# Run progress: 75.00% complete, ETA 00:00:07
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.172 s/op
# Warmup Iteration   2: 0.121 s/op
# Warmup Iteration   3: 0.111 s/op
# Warmup Iteration   4: 0.111 s/op
# Warmup Iteration   5: 0.181 s/op
# Warmup Iteration   6: 0.111 s/op
# Warmup Iteration   7: 0.111 s/op
# Warmup Iteration   8: 0.111 s/op
# Warmup Iteration   9: 0.124 s/op
# Warmup Iteration  10: 0.111 s/op
Iteration   1: 0.111 s/op
Iteration   2: 0.111 s/op
Iteration   3: 0.111 s/op
Iteration   4: 0.150 s/op
Iteration   5: 0.111 s/op
Iteration   6: 0.111 s/op
Iteration   7: 0.111 s/op
Iteration   8: 0.138 s/op
Iteration   9: 0.111 s/op
Iteration  10: 0.111 s/op

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 216646.341 bytes/s; standard:  0.210 s, 45633 bytes, 634 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 902200 bytes; nmethods_code_size: 642400 bytes}
  C2 {speed: 29519.705 bytes/s; standard:  0.132 s, 4254 bytes, 49 methods; osr:  0.019 s, 191 bytes, 4 methods; nmethods_size: 39384 bytes; nmethods_code_size: 25664 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 62320.079 bytes/s; standard:  0.008 s, 524 bytes, 109 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 26200 bytes; nmethods_code_size: 16608 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 222944.521 bytes/s; standard:  0.202 s, 45109 bytes, 525 methods; osr:  0.004 s, 824 bytes, 3 methods; nmethods_size: 876000 bytes; nmethods_code_size: 625792 bytes}
  Tier4 {speed: 29519.705 bytes/s; standard:  0.132 s, 4254 bytes, 49 methods; osr:  0.019 s, 191 bytes, 4 methods; nmethods_size: 39384 bytes; nmethods_code_size: 25664 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.365 s
    Standard compilation   :   0.342 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.023 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.212 s
       Setup time:            0.001 s
       Build HIR:             0.093 s
         Parse:                 0.077 s
         Optimize blocks:       0.000 s
         GVN:                   0.006 s
         Null checks elim:      0.004 s
         Range checks elim:     0.001 s
         Other:                 0.006 s
       Emit LIR:              0.070 s
         LIR Gen:               0.017 s
         Linear Scan:           0.052 s
         Other:                 0.001 s
       Code Emission:         0.022 s
       Code Installation:     0.019 s
       Other:                 0.006 s

    C2 Compile Time:        0.154 s
       Parse:                 0.017 s
       Optimize:              0.063 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.003 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.048 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.000 s
         Macro Expand:          0.002 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.001 s
         Other:                 0.007 s
       Matcher:                    0.011 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.011 s
       Regalloc:              0.040 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.001 s
         Build IFG (phys):      0.008 s
         Compute Liveness:      0.014 s
         Regalloc Split:        0.003 s
         Postalloc Copy Rem:    0.006 s
         Merge multidefs:       0.004 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.001 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.000 s
         Cache LRG:             0.000 s
         Simplify:              0.001 s
         Select:                0.002 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.008 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.003 s
         Fill buffer:           0.002 s
         Code Installation:     0.001 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :      690 methods
    Standard compilation    :      683 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    50902 bytes
    Standard compilation    :    49887 bytes
    On stack replacement    :     1015 bytes
  Average compilation speed :   139452 bytes/s

  nmethod code size         :   941584 bytes
  nmethod total size        :   668064 bytes


Result "jvbench.axpy.AxpyBenchmark.serial":
  N = 10
  mean =      0.118 Â±(99.9%) 0.022 s/op

  Histogram, s/op:
    [0.110, 0.115) = 8 
    [0.115, 0.120) = 0 
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 0 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 1 
    [0.140, 0.145) = 0 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.111 s/op
     p(50.0000) =      0.111 s/op
     p(90.0000) =      0.149 s/op
     p(95.0000) =      0.150 s/op
     p(99.0000) =      0.150 s/op
     p(99.9000) =      0.150 s/op
     p(99.9900) =      0.150 s/op
     p(99.9990) =      0.150 s/op
     p(99.9999) =      0.150 s/op
    p(100.0000) =      0.150 s/op


# Run complete. Total time: 00:00:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                  Mode  Cnt  Score   Error  Units
AxpyBenchmark.autoVec        ss   10  0.116 Â± 0.035   s/op
AxpyBenchmark.explicitVec    ss   10  0.109 Â± 0.002   s/op
AxpyBenchmark.fullVec        ss   10  0.128 Â± 0.062   s/op
AxpyBenchmark.serial         ss   10  0.118 Â± 0.022   s/op

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-03_15:01:44/axpy/AxpyBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 236721.200 bytes/s; standard:  0.381 s, 90320 bytes, 1127 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 1786024 bytes; nmethods_code_size: 1264736 bytes}
  C2 {speed: 32713.417 bytes/s; standard:  0.396 s, 13104 bytes, 96 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 112280 bytes; nmethods_code_size: 69344 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 63488.908 bytes/s; standard:  0.011 s, 700 bytes, 148 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 35640 bytes; nmethods_code_size: 22464 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 241838.199 bytes/s; standard:  0.370 s, 89620 bytes, 979 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 1750384 bytes; nmethods_code_size: 1242272 bytes}
  Tier4 {speed: 32713.417 bytes/s; standard:  0.396 s, 13104 bytes, 96 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 112280 bytes; nmethods_code_size: 69344 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.787 s
    Standard compilation   :   0.777 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.010 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.379 s
       Setup time:            0.002 s
       Build HIR:             0.151 s
         Parse:                 0.120 s
         Optimize blocks:       0.000 s
         GVN:                   0.011 s
         Null checks elim:      0.007 s
         Range checks elim:     0.002 s
         Other:                 0.011 s
       Emit LIR:              0.136 s
         LIR Gen:               0.031 s
         Linear Scan:           0.103 s
         Other:                 0.002 s
       Code Emission:         0.044 s
       Code Installation:     0.036 s
       Other:                 0.010 s

    C2 Compile Time:        0.405 s
       Parse:                 0.054 s
       Optimize:              0.119 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.011 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.082 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.013 s
       Matcher:                    0.028 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.031 s
       Regalloc:              0.146 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.028 s
         Compute Liveness:      0.046 s
         Regalloc Split:        0.015 s
         Postalloc Copy Rem:    0.022 s
         Merge multidefs:       0.009 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.005 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.002 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.008 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.020 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.004 s
         Build OOP maps:        0.007 s
         Fill buffer:           0.006 s
         Code Installation:     0.003 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :     1226 methods
    Standard compilation    :     1223 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   104139 bytes
    Standard compilation    :   103424 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   132345 bytes/s

  nmethod code size         :  1898304 bytes
  nmethod total size        :  1334080 bytes
