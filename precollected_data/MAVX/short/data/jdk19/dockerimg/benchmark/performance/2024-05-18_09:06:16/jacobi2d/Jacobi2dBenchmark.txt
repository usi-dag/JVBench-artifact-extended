# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.autoVec

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 9.121 s/op
# Warmup Iteration   2: 8.252 s/op
# Warmup Iteration   3: 6.861 s/op
# Warmup Iteration   4: 7.934 s/op
# Warmup Iteration   5: 8.288 s/op
# Warmup Iteration   6: 8.322 s/op
# Warmup Iteration   7: 8.133 s/op
# Warmup Iteration   8: 8.117 s/op
# Warmup Iteration   9: 8.284 s/op
# Warmup Iteration  10: 5.585 s/op
Iteration   1: 5.660 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.543 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.526 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.541 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.591 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.666 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.697 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.520 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.534 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.521 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 205109.119 bytes/s; standard:  0.317 s, 64814 bytes, 897 methods; osr:  0.004 s, 1099 bytes, 4 methods; nmethods_size: 1380984 bytes; nmethods_code_size: 983040 bytes}
  C2 {speed: 21977.705 bytes/s; standard:  0.210 s, 5717 bytes, 60 methods; osr:  0.074 s, 510 bytes, 4 methods; nmethods_size: 58320 bytes; nmethods_code_size: 38944 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 65811.417 bytes/s; standard:  0.011 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 209905.703 bytes/s; standard:  0.306 s, 64110 bytes, 752 methods; osr:  0.004 s, 1099 bytes, 4 methods; nmethods_size: 1346176 bytes; nmethods_code_size: 960992 bytes}
  Tier4 {speed: 21977.705 bytes/s; standard:  0.210 s, 5717 bytes, 60 methods; osr:  0.074 s, 510 bytes, 4 methods; nmethods_size: 58320 bytes; nmethods_code_size: 38944 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.605 s
    Standard compilation   :   0.527 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.078 s, Average : 0.010 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.317 s
       Setup time:            0.002 s
       Build HIR:             0.138 s
         Parse:                 0.115 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.009 s
       Emit LIR:              0.107 s
         LIR Gen:               0.026 s
         Linear Scan:           0.079 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.027 s
       Other:                 0.008 s

    C2 Compile Time:        0.286 s
       Parse:                 0.025 s
       Optimize:              0.131 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.000 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.108 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.003 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.069 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.014 s
         Compute Liveness:      0.024 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.009 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.024 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.013 s
       Other:                 0.001 s

  Total compiled methods    :      965 methods
    Standard compilation    :      957 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72140 bytes
    Standard compilation    :    70531 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :   119301 bytes/s

  nmethod code size         :  1439304 bytes
  nmethod total size        :  1021984 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec":
  N = 10
  mean =      5.580 ±(99.9%) 0.104 s/op

  Histogram, s/op:
    [5.500, 5.513) = 0 
    [5.513, 5.525) = 2 
    [5.525, 5.538) = 2 
    [5.538, 5.550) = 2 
    [5.550, 5.563) = 0 
    [5.563, 5.575) = 0 
    [5.575, 5.588) = 0 
    [5.588, 5.600) = 1 
    [5.600, 5.613) = 0 
    [5.613, 5.625) = 0 
    [5.625, 5.638) = 0 
    [5.638, 5.650) = 0 
    [5.650, 5.663) = 1 
    [5.663, 5.675) = 1 
    [5.675, 5.688) = 0 
    [5.688, 5.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.520 s/op
     p(50.0000) =      5.542 s/op
     p(90.0000) =      5.694 s/op
     p(95.0000) =      5.697 s/op
     p(99.0000) =      5.697 s/op
     p(99.9000) =      5.697 s/op
     p(99.9900) =      5.697 s/op
     p(99.9990) =      5.697 s/op
     p(99.9999) =      5.697 s/op
    p(100.0000) =      5.697 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.autoVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec

# Run progress: 25.00% complete, ETA 00:07:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.428 s/op
# Warmup Iteration   2: 5.230 s/op
# Warmup Iteration   3: 5.227 s/op
# Warmup Iteration   4: 5.343 s/op
# Warmup Iteration   5: 6.341 s/op
# Warmup Iteration   6: 5.239 s/op
# Warmup Iteration   7: 5.940 s/op
# Warmup Iteration   8: 5.317 s/op
# Warmup Iteration   9: 5.663 s/op
# Warmup Iteration  10: 5.557 s/op
Iteration   1: 5.478 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.417 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.340 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.528 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.500 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.282 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.240 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.462 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.362 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.298 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 166099.469 bytes/s; standard:  0.434 s, 72260 bytes, 1036 methods; osr:  0.008 s, 1081 bytes, 3 methods; nmethods_size: 1672560 bytes; nmethods_code_size: 1199200 bytes}
  C2 {speed: 29009.475 bytes/s; standard:  0.269 s, 8115 bytes, 88 methods; osr:  0.050 s, 1142 bytes, 3 methods; nmethods_size: 77256 bytes; nmethods_code_size: 48384 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 61972.788 bytes/s; standard:  0.012 s, 734 bytes, 151 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36168 bytes; nmethods_code_size: 22880 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 168969.502 bytes/s; standard:  0.422 s, 71526 bytes, 885 methods; osr:  0.008 s, 1081 bytes, 3 methods; nmethods_size: 1636392 bytes; nmethods_code_size: 1176320 bytes}
  Tier4 {speed: 29009.475 bytes/s; standard:  0.269 s, 8115 bytes, 88 methods; osr:  0.050 s, 1142 bytes, 3 methods; nmethods_size: 77256 bytes; nmethods_code_size: 48384 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.761 s
    Standard compilation   :   0.703 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.058 s, Average : 0.010 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.437 s
       Setup time:            0.002 s
       Build HIR:             0.196 s
         Parse:                 0.169 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.152 s
         LIR Gen:               0.056 s
         Linear Scan:           0.094 s
         Other:                 0.002 s
       Code Emission:         0.043 s
       Code Installation:     0.034 s
       Other:                 0.009 s

    C2 Compile Time:        0.322 s
       Parse:                 0.059 s
       Optimize:              0.118 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.002 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.000 s)
           Other:                 0.002 s
         Vector:                0.003 s
           Box elimination:     0.003 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.083 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.012 s
       Matcher:                    0.021 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.020 s
       Regalloc:              0.084 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.017 s
         Compute Liveness:      0.028 s
         Regalloc Split:        0.007 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.006 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.004 s
         Select:                0.005 s
       Block Ordering:        0.002 s
       Peephole:              0.000 s
       Code Emission:           0.016 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.003 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1130 methods
    Standard compilation    :     1124 methods
    On stack replacement    :        6 methods
  Total compiled bytecodes  :    82598 bytes
    Standard compilation    :    80375 bytes
    On stack replacement    :     2223 bytes
  Average compilation speed :   108588 bytes/s

  nmethod code size         :  1749816 bytes
  nmethod total size        :  1247584 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec":
  N = 10
  mean =      5.391 ±(99.9%) 0.152 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 1 
    [5.250, 5.275) = 0 
    [5.275, 5.300) = 2 
    [5.300, 5.325) = 0 
    [5.325, 5.350) = 1 
    [5.350, 5.375) = 1 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 1 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 1 
    [5.475, 5.500) = 1 
    [5.500, 5.525) = 1 
    [5.525, 5.550) = 1 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.240 s/op
     p(50.0000) =      5.389 s/op
     p(90.0000) =      5.525 s/op
     p(95.0000) =      5.528 s/op
     p(99.0000) =      5.528 s/op
     p(99.9000) =      5.528 s/op
     p(99.9900) =      5.528 s/op
     p(99.9990) =      5.528 s/op
     p(99.9999) =      5.528 s/op
    p(100.0000) =      5.528 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.explicitVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.fullVec

# Run progress: 50.00% complete, ETA 00:04:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6.721 s/op
# Warmup Iteration   2: 5.282 s/op
# Warmup Iteration   3: 5.358 s/op
# Warmup Iteration   4: 5.474 s/op
# Warmup Iteration   5: 5.352 s/op
# Warmup Iteration   6: 5.245 s/op
# Warmup Iteration   7: 5.229 s/op
# Warmup Iteration   8: 5.336 s/op
# Warmup Iteration   9: 5.230 s/op
# Warmup Iteration  10: 5.377 s/op
Iteration   1: 5.405 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.243 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.229 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.342 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.443 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.231 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.331 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.244 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.232 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.260 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 178940.964 bytes/s; standard:  0.408 s, 73564 bytes, 1038 methods; osr:  0.012 s, 1463 bytes, 4 methods; nmethods_size: 1727848 bytes; nmethods_code_size: 1237952 bytes}
  C2 {speed: 32213.869 bytes/s; standard:  0.265 s, 9096 bytes, 87 methods; osr:  0.053 s, 1142 bytes, 3 methods; nmethods_size: 76504 bytes; nmethods_code_size: 47456 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 65819.968 bytes/s; standard:  0.011 s, 734 bytes, 151 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36168 bytes; nmethods_code_size: 22880 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 182031.836 bytes/s; standard:  0.397 s, 72830 bytes, 887 methods; osr:  0.012 s, 1463 bytes, 4 methods; nmethods_size: 1691680 bytes; nmethods_code_size: 1215072 bytes}
  Tier4 {speed: 32213.869 bytes/s; standard:  0.265 s, 9096 bytes, 87 methods; osr:  0.053 s, 1142 bytes, 3 methods; nmethods_size: 76504 bytes; nmethods_code_size: 47456 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.737 s
    Standard compilation   :   0.673 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.065 s, Average : 0.009 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.415 s
       Setup time:            0.002 s
       Build HIR:             0.197 s
         Parse:                 0.169 s
         Optimize blocks:       0.000 s
         GVN:                   0.010 s
         Null checks elim:      0.006 s
         Range checks elim:     0.002 s
         Other:                 0.010 s
       Emit LIR:              0.130 s
         LIR Gen:               0.032 s
         Linear Scan:           0.097 s
         Other:                 0.002 s
       Code Emission:         0.043 s
       Code Installation:     0.033 s
       Other:                 0.009 s

    C2 Compile Time:        0.321 s
       Parse:                 0.066 s
       Optimize:              0.114 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.007 s
         Incremental Inline:    0.003 s
           IdealLoop:             0.000 s
          (IGVN:                  0.001 s)
          (Inline:                0.001 s)
          (Prune Useless:         0.001 s)
           Other:                 0.003 s
         Vector:                0.003 s
           Box elimination:     0.003 s
             IGVN:              0.001 s
             Prune Useless:     0.001 s
         Renumber Live:         0.000 s
         IdealLoop:             0.081 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.002 s
         GVN 2:                 0.001 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.010 s
       Matcher:                    0.020 s
         Post Selection Cleanup:   0.002 s
       Scheduler:                  0.020 s
       Regalloc:              0.081 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.016 s
         Compute Liveness:      0.027 s
         Regalloc Split:        0.007 s
         Postalloc Copy Rem:    0.011 s
         Merge multidefs:       0.006 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.002 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.015 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.003 s
         Build OOP maps:        0.005 s
         Fill buffer:           0.004 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.000 s

  Total compiled methods    :     1132 methods
    Standard compilation    :     1125 methods
    On stack replacement    :        7 methods
  Total compiled bytecodes  :    85265 bytes
    Standard compilation    :    82660 bytes
    On stack replacement    :     2605 bytes
  Average compilation speed :   115676 bytes/s

  nmethod code size         :  1804352 bytes
  nmethod total size        :  1285408 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec":
  N = 10
  mean =      5.296 ±(99.9%) 0.120 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 5 
    [5.250, 5.275) = 1 
    [5.275, 5.300) = 0 
    [5.300, 5.325) = 0 
    [5.325, 5.350) = 2 
    [5.350, 5.375) = 0 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 1 
    [5.425, 5.450) = 1 
    [5.450, 5.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.229 s/op
     p(50.0000) =      5.252 s/op
     p(90.0000) =      5.440 s/op
     p(95.0000) =      5.443 s/op
     p(99.0000) =      5.443 s/op
     p(99.9000) =      5.443 s/op
     p(99.9900) =      5.443 s/op
     p(99.9990) =      5.443 s/op
     p(99.9999) =      5.443 s/op
    p(100.0000) =      5.443 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.fullVec:·gc.count":
  ≈ 0 counts


# JMH version: 1.35
# VM version: JDK 19-internal, OpenJDK 64-Bit Server VM, 19-internal-adhoc..jdk19u
# VM invoker: /artifact/jdk19/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+CITime --add-modules=jdk.incubator.vector -Dsize=10000 -Dtsteps=14 -XX:-UseSuperWord
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, single-shot each
# Measurement: 10 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: jvbench.jacobi2d.Jacobi2dBenchmark.serial

# Run progress: 75.00% complete, ETA 00:02:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 9.122 s/op
# Warmup Iteration   2: 8.232 s/op
# Warmup Iteration   3: 6.856 s/op
# Warmup Iteration   4: 7.927 s/op
# Warmup Iteration   5: 8.204 s/op
# Warmup Iteration   6: 8.319 s/op
# Warmup Iteration   7: 8.200 s/op
# Warmup Iteration   8: 8.114 s/op
# Warmup Iteration   9: 8.163 s/op
# Warmup Iteration  10: 5.695 s/op
Iteration   1: 5.678 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.523 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.508 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.533 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.615 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.700 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.608 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.507 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.521 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.507 s/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           ≈ 0 counts


Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 208748.905 bytes/s; standard:  0.312 s, 64882 bytes, 899 methods; osr:  0.004 s, 1099 bytes, 4 methods; nmethods_size: 1382776 bytes; nmethods_code_size: 984320 bytes}
  C2 {speed: 24214.555 bytes/s; standard:  0.190 s, 5717 bytes, 60 methods; osr:  0.067 s, 510 bytes, 4 methods; nmethods_size: 58488 bytes; nmethods_code_size: 39168 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 66117.230 bytes/s; standard:  0.011 s, 704 bytes, 145 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 34808 bytes; nmethods_code_size: 22048 bytes}
  Tier2 {speed:  0.000 bytes/s; standard:  0.000 s, 0 bytes, 0 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 0 bytes; nmethods_code_size: 0 bytes}
  Tier3 {speed: 213721.253 bytes/s; standard:  0.301 s, 64178 bytes, 754 methods; osr:  0.004 s, 1099 bytes, 4 methods; nmethods_size: 1347968 bytes; nmethods_code_size: 962272 bytes}
  Tier4 {speed: 24214.555 bytes/s; standard:  0.190 s, 5717 bytes, 60 methods; osr:  0.067 s, 510 bytes, 4 methods; nmethods_size: 58488 bytes; nmethods_code_size: 39168 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.573 s
    Standard compilation   :   0.502 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.071 s, Average : 0.009 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.312 s
       Setup time:            0.002 s
       Build HIR:             0.135 s
         Parse:                 0.112 s
         Optimize blocks:       0.000 s
         GVN:                   0.008 s
         Null checks elim:      0.005 s
         Range checks elim:     0.001 s
         Other:                 0.008 s
       Emit LIR:              0.106 s
         LIR Gen:               0.026 s
         Linear Scan:           0.078 s
         Other:                 0.001 s
       Code Emission:         0.035 s
       Code Installation:     0.027 s
       Other:                 0.008 s

    C2 Compile Time:        0.266 s
       Parse:                 0.024 s
       Optimize:              0.123 s
         Escape Analysis:       0.001 s
           Conn Graph:            0.001 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.006 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.000 s
         IdealLoop:             0.098 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.001 s
         GVN 2:                 0.001 s
         Macro Expand:          0.004 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.002 s
         Other:                 0.011 s
       Matcher:                    0.017 s
         Post Selection Cleanup:   0.001 s
       Scheduler:                  0.017 s
       Regalloc:              0.069 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.002 s
         Build IFG (phys):      0.014 s
         Compute Liveness:      0.024 s
         Regalloc Split:        0.005 s
         Postalloc Copy Rem:    0.008 s
         Merge multidefs:       0.005 s
         Fixup Spills:          0.000 s
         Compact:               0.000 s
         Coalesce 1:            0.003 s
         Coalesce 2:            0.000 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.003 s
         Select:                0.004 s
       Block Ordering:        0.001 s
       Peephole:              0.000 s
       Code Emission:           0.012 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.002 s
         Build OOP maps:        0.004 s
         Fill buffer:           0.003 s
         Code Installation:     0.002 s
         Other:                 0.001 s
       Other:                 0.001 s

  Total compiled methods    :      967 methods
    Standard compilation    :      959 methods
    On stack replacement    :        8 methods
  Total compiled bytecodes  :    72208 bytes
    Standard compilation    :    70599 bytes
    On stack replacement    :     1609 bytes
  Average compilation speed :   125965 bytes/s

  nmethod code size         :  1441264 bytes
  nmethod total size        :  1023488 bytes


Result "jvbench.jacobi2d.Jacobi2dBenchmark.serial":
  N = 10
  mean =      5.570 ±(99.9%) 0.112 s/op

  Histogram, s/op:
    [5.500, 5.513) = 3 
    [5.513, 5.525) = 2 
    [5.525, 5.538) = 1 
    [5.538, 5.550) = 0 
    [5.550, 5.563) = 0 
    [5.563, 5.575) = 0 
    [5.575, 5.588) = 0 
    [5.588, 5.600) = 0 
    [5.600, 5.613) = 1 
    [5.613, 5.625) = 1 
    [5.625, 5.638) = 0 
    [5.638, 5.650) = 0 
    [5.650, 5.663) = 0 
    [5.663, 5.675) = 0 
    [5.675, 5.688) = 1 
    [5.688, 5.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.507 s/op
     p(50.0000) =      5.528 s/op
     p(90.0000) =      5.697 s/op
     p(95.0000) =      5.700 s/op
     p(99.0000) =      5.700 s/op
     p(99.9000) =      5.700 s/op
     p(99.9900) =      5.700 s/op
     p(99.9990) =      5.700 s/op
     p(99.9999) =      5.700 s/op
    p(100.0000) =      5.700 s/op

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.alloc.rate.norm":
  507.200 ±(99.9%) 15.299 B/op [Average]
  (min, avg, max) = (504.000, 507.200, 536.000), stdev = 10.119
  CI (99.9%): [491.901, 522.499] (assumes normal distribution)

Secondary result "jvbench.jacobi2d.Jacobi2dBenchmark.serial:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:08:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt    Score    Error   Units
Jacobi2dBenchmark.autoVec                            ss   10    5.580 ±  0.104    s/op
Jacobi2dBenchmark.autoVec:·gc.alloc.rate             ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.autoVec:·gc.alloc.rate.norm        ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.autoVec:·gc.count                  ss   10      ≈ 0           counts
Jacobi2dBenchmark.explicitVec                        ss   10    5.391 ±  0.152    s/op
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate         ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.explicitVec:·gc.alloc.rate.norm    ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.explicitVec:·gc.count              ss   10      ≈ 0           counts
Jacobi2dBenchmark.fullVec                            ss   10    5.296 ±  0.120    s/op
Jacobi2dBenchmark.fullVec:·gc.alloc.rate             ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.fullVec:·gc.alloc.rate.norm        ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.fullVec:·gc.count                  ss   10      ≈ 0           counts
Jacobi2dBenchmark.serial                             ss   10    5.570 ±  0.112    s/op
Jacobi2dBenchmark.serial:·gc.alloc.rate              ss   10   ≈ 10⁻⁴           MB/sec
Jacobi2dBenchmark.serial:·gc.alloc.rate.norm         ss   10  507.200 ± 15.299    B/op
Jacobi2dBenchmark.serial:·gc.count                   ss   10      ≈ 0           counts

Benchmark result is saved to /artifact/output/short/data/jdk19/dockerimg/benchmark/performance/2024-05-18_09:06:16/jacobi2d/Jacobi2dBenchmark.csv

Individual compiler times (for compiled methods only)
------------------------------------------------

  C1 {speed: 236312.607 bytes/s; standard:  0.455 s, 107494 bytes, 1264 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 2171696 bytes; nmethods_code_size: 1536416 bytes}
  C2 {speed: 35458.700 bytes/s; standard:  0.438 s, 15738 bytes, 120 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 132712 bytes; nmethods_code_size: 81760 bytes}

Individual compilation Tier times (for compiled methods only)
------------------------------------------------

  Tier1 {speed: 66050.828 bytes/s; standard:  0.011 s, 720 bytes, 152 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 36632 bytes; nmethods_code_size: 23104 bytes}
  Tier2 {speed: 240351.762 bytes/s; standard:  0.000 s, 51 bytes, 1 methods; osr:  0.000 s, 0 bytes, 0 methods; nmethods_size: 768 bytes; nmethods_code_size: 480 bytes}
  Tier3 {speed: 240467.270 bytes/s; standard:  0.444 s, 106723 bytes, 1111 methods; osr:  0.003 s, 649 bytes, 1 methods; nmethods_size: 2134296 bytes; nmethods_code_size: 1512832 bytes}
  Tier4 {speed: 35458.700 bytes/s; standard:  0.438 s, 15738 bytes, 120 methods; osr:  0.007 s, 66 bytes, 2 methods; nmethods_size: 132712 bytes; nmethods_code_size: 81760 bytes}

Accumulated compiler times
----------------------------------------------------------
  Total compilation time   :   0.904 s
    Standard compilation   :   0.893 s, Average : 0.001 s
    Bailed out compilation :   0.000 s, Average : 0.000 s
    On stack replacement   :   0.010 s, Average : 0.003 s
    Invalidated            :   0.000 s, Average : 0.000 s

    C1 Compile Time:        0.452 s
       Setup time:            0.002 s
       Build HIR:             0.183 s
         Parse:                 0.145 s
         Optimize blocks:       0.000 s
         GVN:                   0.014 s
         Null checks elim:      0.008 s
         Range checks elim:     0.002 s
         Other:                 0.013 s
       Emit LIR:              0.165 s
         LIR Gen:               0.039 s
         Linear Scan:           0.124 s
         Other:                 0.002 s
       Code Emission:         0.053 s
       Code Installation:     0.040 s
       Other:                 0.010 s

    C2 Compile Time:        0.448 s
       Parse:                 0.072 s
       Optimize:              0.131 s
         Escape Analysis:       0.002 s
           Conn Graph:            0.002 s
           Macro Eliminate:       0.000 s
         GVN 1:                 0.014 s
         Incremental Inline:    0.000 s
           IdealLoop:             0.000 s
          (IGVN:                  0.000 s)
          (Inline:                0.000 s)
          (Prune Useless:         0.000 s)
           Other:                 0.000 s
         Vector:                0.000 s
           Box elimination:     0.000 s
             IGVN:              0.000 s
             Prune Useless:     0.000 s
         Renumber Live:         0.001 s
         IdealLoop:             0.086 s
         IdealLoop Verify:      0.000 s
         Cond Const Prop:       0.003 s
         GVN 2:                 0.002 s
         Macro Expand:          0.005 s
         Barrier Expand:        0.000 s
         Graph Reshape:         0.003 s
         Other:                 0.016 s
       Matcher:                    0.036 s
         Post Selection Cleanup:   0.003 s
       Scheduler:                  0.038 s
       Regalloc:              0.151 s
         Ctor Chaitin:          0.000 s
         Build IFG (virt):      0.003 s
         Build IFG (phys):      0.028 s
         Compute Liveness:      0.049 s
         Regalloc Split:        0.016 s
         Postalloc Copy Rem:    0.024 s
         Merge multidefs:       0.011 s
         Fixup Spills:          0.000 s
         Compact:               0.001 s
         Coalesce 1:            0.006 s
         Coalesce 2:            0.001 s
         Coalesce 3:            0.001 s
         Cache LRG:             0.000 s
         Simplify:              0.006 s
         Select:                0.007 s
       Block Ordering:        0.003 s
       Peephole:              0.000 s
       Code Emission:           0.025 s
         Insn Scheduling:       0.000 s
         Shorten branches:      0.005 s
         Build OOP maps:        0.008 s
         Fill buffer:           0.007 s
         Code Installation:     0.004 s
         Other:                 0.002 s

  Total compiled methods    :     1387 methods
    Standard compilation    :     1384 methods
    On stack replacement    :        3 methods
  Total compiled bytecodes  :   123947 bytes
    Standard compilation    :   123232 bytes
    On stack replacement    :      715 bytes
  Average compilation speed :   137150 bytes/s

  nmethod code size         :  2304408 bytes
  nmethod total size        :  1618176 bytes
